
Tamer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00001f4e  00002022  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f4e  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bootloader   00000ee2  00003000  00003000  00002052  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000090  00800130  00001f7e  00002052  2**0
                  ALLOC
  4 .bootdata     00000019  0080010f  00003ee2  00002f34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .eeprom       000001b9  00810000  00810000  00002f4d  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .stab         0000141c  00000000  00000000  00003108  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .stabstr      0000081a  00000000  00000000  00004524  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000540  00000000  00000000  00004d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000010a4  00000000  00000000  0000527e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00005f9b  00000000  00000000  00006322  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001983  00000000  00000000  0000c2bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00004c34  00000000  00000000  0000dc40  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000880  00000000  00000000  00012874  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002360  00000000  00000000  000130f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00003433  00000000  00000000  00015454  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000548  00000000  00000000  00018887  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   MW_PORT &=  ~(1 << MW_CLK);
}


void MicrowireWriteByteF(uint8_t data)
{
       0:	f7 c0       	rjmp	.+494    	; 0x1f0 <__ctors_end>
	                         NO_STREAM_CALLBACK);
	Endpoint_ClearIN();
}

void CDC_Device_CreateStream(USB_ClassInfo_CDC_Device_t* CDCInterfaceInfo, FILE* Stream)
{
       2:	00 00       	nop
uint8_t Endpoint_Discard_Stream(uint16_t Length
#if !defined(NO_STREAM_CALLBACKS)
                                , StreamCallbackPtr_t Callback
#endif
								)
{
       4:	13 c1       	rjmp	.+550    	; 0x22c <__bad_interrupt>
       6:	00 00       	nop
       8:	11 c1       	rjmp	.+546    	; 0x22c <__bad_interrupt>
       a:	00 00       	nop
       c:	0f c1       	rjmp	.+542    	; 0x22c <__bad_interrupt>
       e:	00 00       	nop
      10:	0d c1       	rjmp	.+538    	; 0x22c <__bad_interrupt>
      12:	00 00       	nop
      14:	0b c1       	rjmp	.+534    	; 0x22c <__bad_interrupt>
      16:	00 00       	nop
      18:	09 c1       	rjmp	.+530    	; 0x22c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	07 c1       	rjmp	.+526    	; 0x22c <__bad_interrupt>
      1e:	00 00       	nop
      20:	05 c1       	rjmp	.+522    	; 0x22c <__bad_interrupt>
      22:	00 00       	nop
      24:	03 c1       	rjmp	.+518    	; 0x22c <__bad_interrupt>
      26:	00 00       	nop
      28:	01 c1       	rjmp	.+514    	; 0x22c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 87 1e 	jmp	0x3d0e	; 0x3d0e <__vector_11>
      30:	fd c0       	rjmp	.+506    	; 0x22c <__bad_interrupt>
      32:	00 00       	nop
      34:	fb c0       	rjmp	.+502    	; 0x22c <__bad_interrupt>
      36:	00 00       	nop
      38:	6b c2       	rjmp	.+1238   	; 0x510 <__vector_14>
      3a:	00 00       	nop
      3c:	f7 c0       	rjmp	.+494    	; 0x22c <__bad_interrupt>
      3e:	00 00       	nop
      40:	f5 c0       	rjmp	.+490    	; 0x22c <__bad_interrupt>
      42:	00 00       	nop
      44:	f3 c0       	rjmp	.+486    	; 0x22c <__bad_interrupt>
      46:	00 00       	nop
      48:	74 c3       	rjmp	.+1768   	; 0x732 <__vector_18>
      4a:	00 00       	nop
      4c:	ef c0       	rjmp	.+478    	; 0x22c <__bad_interrupt>
      4e:	00 00       	nop
      50:	ed c0       	rjmp	.+474    	; 0x22c <__bad_interrupt>
      52:	00 00       	nop
      54:	eb c0       	rjmp	.+470    	; 0x22c <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__vector_22>
      5c:	e7 c0       	rjmp	.+462    	; 0x22c <__bad_interrupt>
      5e:	00 00       	nop
      60:	e5 c0       	rjmp	.+458    	; 0x22c <__bad_interrupt>
      62:	00 00       	nop
      64:	e3 c0       	rjmp	.+454    	; 0x22c <__bad_interrupt>
      66:	00 00       	nop
      68:	e1 c0       	rjmp	.+450    	; 0x22c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	df c0       	rjmp	.+446    	; 0x22c <__bad_interrupt>
      6e:	00 00       	nop
      70:	dd c0       	rjmp	.+442    	; 0x22c <__bad_interrupt>
      72:	00 00       	nop

00000074 <__bootstraps_end>:
      74:	d7 c0       	rjmp	.+430    	; 0x224 <__bootstraps_none>
      76:	00 00       	nop

00000078 <__bootstraps_vec10>:
      78:	d5 c0       	rjmp	.+426    	; 0x224 <__bootstraps_none>
      7a:	00 00       	nop

0000007c <__bootstraps_vec9>:
      7c:	d3 c0       	rjmp	.+422    	; 0x224 <__bootstraps_none>
      7e:	00 00       	nop

00000080 <__bootstraps_vec8>:
      80:	d1 c0       	rjmp	.+418    	; 0x224 <__bootstraps_none>
      82:	00 00       	nop

00000084 <__bootstraps_vec7>:
      84:	cf c0       	rjmp	.+414    	; 0x224 <__bootstraps_none>
      86:	00 00       	nop

00000088 <__bootstraps_vec6>:
      88:	cd c0       	rjmp	.+410    	; 0x224 <__bootstraps_none>
      8a:	00 00       	nop

0000008c <__bootstraps_vec5>:
      8c:	2b c1       	rjmp	.+598    	; 0x2e4 <__bootstrap5>
      8e:	00 00       	nop

00000090 <__bootstraps_vec4>:
      90:	3e c1       	rjmp	.+636    	; 0x30e <__bootstrap4>
      92:	00 00       	nop

00000094 <__bootstraps_vec3>:
      94:	1f c1       	rjmp	.+574    	; 0x2d4 <__bootstrap3>
      96:	00 00       	nop

00000098 <__bootstraps_vec2>:
      98:	18 c1       	rjmp	.+560    	; 0x2ca <__bootstrap2>
      9a:	00 00       	nop

0000009c <__bootstraps_vec1>:
      9c:	20 c1       	rjmp	.+576    	; 0x2de <__bootstrap1>
      9e:	00 00       	nop

000000a0 <__bootstraps_start>:
      a0:	12 c1       	rjmp	.+548    	; 0x2c6 <__bootstrap0>
      a2:	00 00       	nop

000000a4 <resSyntax>:
      a4:	53 59 4e 54 41 58 20 45 52 52 4f 52 00              SYNTAX ERROR.

000000b1 <resErr>:
      b1:	43 4d 44 20 45 52 52 4f 52 00                       CMD ERROR.

000000bb <newLine>:
      bb:	0d 0a 00                                            ...

000000be <resOk>:
      be:	4f 4b 00                                            OK.

000000c1 <resVersion>:
      c1:	43 6c 6f 63 6b 54 61 6d 65 72 20 53 57 3d 31 2e     ClockTamer SW=1.
      d1:	32 20 41 50 49 3d 31 00                             2 API=1.

000000d9 <resBadRange>:
      d9:	42 61 64 20 74 75 6e 69 6e 67 20 72 61 6e 67 65     Bad tuning range
      e9:	00                                                  .

000000ea <pCmd>:
      ea:	52 45 47 50 49 4e 53 45 54 53 41 56 44 45 46 49     REGPINSETSAVDEFI
      fa:	4e 46 56 45 52 48 57 49 52 53 54 4c 44 45 53 54     NFVERHWIRSTLDEST
     10a:	45 00                                               E.

0000010c <pTrg>:
     10c:	4c 4d 4b 4c 4d 58 44 41 43 4c 45 44 56 43 4f 47     LMKLMXDACLEDVCOG
     11c:	50 53 00                                            PS.

0000011f <pDet>:
     11f:	45 4e 42 47 4f 45 53 59 4e 4f 53 43 4f 55 54 50     ENBGOESYNOSCOUTP
     12f:	52 54 4d 49 4e 4d 41 58 4b 42 54 44 49 56 41 55     RTMINMAXKBTDIVAU
     13f:	54 44 31 32 52 30 30 52 30 31 52 30 32 52 30 33     TD12R00R01R02R03
     14f:	00                                                  .

00000150 <DeviceDescriptor>:
     150:	12 01 10 01 02 00 00 08 eb 03 4b 20 00 00 01 02     ..........K ....
     160:	00 01                                               ..

00000162 <ConfigurationDescriptor>:
     162:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     172:	01 00 05 24 00 01 10 05 24 01 03 01 04 24 02 06     ...$....$....$..
     182:	05 24 06 00 01 07 05 82 03 08 00 ff 09 04 01 00     .$..............
     192:	02 0a 00 00 00 07 05 04 02 20 00 00 07 05 83 02     ......... ......
     1a2:	20 00 00                                             ..

000001a5 <ManufacturerString>:
     1a5:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     1b5:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000001bf <ProductString>:
     1bf:	30 03 4c 00 55 00 46 00 41 00 20 00 55 00 53 00     0.L.U.F.A. .U.S.
     1cf:	42 00 2d 00 52 00 53 00 32 00 33 00 32 00 20 00     B.-.R.S.2.3.2. .
     1df:	41 00 64 00 61 00 70 00 74 00 65 00 72 00 00 00     A.d.a.p.t.e.r...
     1ef:	00                                                  .

000001f0 <__ctors_end>:
     1f0:	11 24       	eor	r1, r1
     1f2:	1f be       	out	0x3f, r1	; 63
     1f4:	cf ef       	ldi	r28, 0xFF	; 255
     1f6:	d2 e0       	ldi	r29, 0x02	; 2
     1f8:	de bf       	out	0x3e, r29	; 62
     1fa:	cd bf       	out	0x3d, r28	; 61

000001fc <__do_copy_data>:
     1fc:	11 e0       	ldi	r17, 0x01	; 1
     1fe:	a0 e0       	ldi	r26, 0x00	; 0
     200:	b1 e0       	ldi	r27, 0x01	; 1
     202:	ee e4       	ldi	r30, 0x4E	; 78
     204:	ff e1       	ldi	r31, 0x1F	; 31
     206:	02 c0       	rjmp	.+4      	; 0x20c <.do_copy_data_start>

00000208 <.do_copy_data_loop>:
     208:	05 90       	lpm	r0, Z+
     20a:	0d 92       	st	X+, r0

0000020c <.do_copy_data_start>:
     20c:	a0 33       	cpi	r26, 0x30	; 48
     20e:	b1 07       	cpc	r27, r17
     210:	d9 f7       	brne	.-10     	; 0x208 <.do_copy_data_loop>

00000212 <__do_clear_bss>:
     212:	11 e0       	ldi	r17, 0x01	; 1
     214:	a0 e3       	ldi	r26, 0x30	; 48
     216:	b1 e0       	ldi	r27, 0x01	; 1
     218:	01 c0       	rjmp	.+2      	; 0x21c <.do_clear_bss_start>

0000021a <.do_clear_bss_loop>:
     21a:	1d 92       	st	X+, r1

0000021c <.do_clear_bss_start>:
     21c:	a0 3c       	cpi	r26, 0xC0	; 192
     21e:	b1 07       	cpc	r27, r17
     220:	e1 f7       	brne	.-8      	; 0x21a <.do_clear_bss_loop>
     222:	01 c0       	rjmp	.+2      	; 0x226 <__bootstraps_none+0x2>

00000224 <__bootstraps_none>:
     224:	08 95       	ret
     226:	97 d0       	rcall	.+302    	; 0x356 <main>
     228:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <_exit>

0000022c <__bad_interrupt>:
     22c:	e9 ce       	rjmp	.-558    	; 0x0 <__shared_data_skip>

0000022e <__eerd_dword>:
     22e:	bf 92       	push	r11
     230:	cf 92       	push	r12
     232:	df 92       	push	r13
     234:	ef 92       	push	r14
     236:	ff 92       	push	r15
     238:	0f 93       	push	r16
     23a:	1f 93       	push	r17
     23c:	7b 01       	movw	r14, r22
     23e:	8c 01       	movw	r16, r24
     240:	fb 01       	movw	r30, r22
     242:	09 95       	icall
     244:	b8 2e       	mov	r11, r24
     246:	c8 01       	movw	r24, r16
     248:	01 96       	adiw	r24, 0x01	; 1
     24a:	f7 01       	movw	r30, r14
     24c:	09 95       	icall
     24e:	c8 2e       	mov	r12, r24
     250:	c8 01       	movw	r24, r16
     252:	02 96       	adiw	r24, 0x02	; 2
     254:	f7 01       	movw	r30, r14
     256:	09 95       	icall
     258:	d8 2e       	mov	r13, r24
     25a:	c8 01       	movw	r24, r16
     25c:	03 96       	adiw	r24, 0x03	; 3
     25e:	f7 01       	movw	r30, r14
     260:	09 95       	icall
     262:	98 2f       	mov	r25, r24
     264:	6b 2d       	mov	r22, r11
     266:	7c 2d       	mov	r23, r12
     268:	8d 2d       	mov	r24, r13
     26a:	1f 91       	pop	r17
     26c:	0f 91       	pop	r16
     26e:	ff 90       	pop	r15
     270:	ef 90       	pop	r14
     272:	df 90       	pop	r13
     274:	cf 90       	pop	r12
     276:	bf 90       	pop	r11
     278:	08 95       	ret

0000027a <__eewr_dword>:
     27a:	bf 92       	push	r11
     27c:	cf 92       	push	r12
     27e:	df 92       	push	r13
     280:	ef 92       	push	r14
     282:	ff 92       	push	r15
     284:	0f 93       	push	r16
     286:	1f 93       	push	r17
     288:	d5 2e       	mov	r13, r21
     28a:	c6 2e       	mov	r12, r22
     28c:	b7 2e       	mov	r11, r23
     28e:	79 01       	movw	r14, r18
     290:	8c 01       	movw	r16, r24
     292:	64 2f       	mov	r22, r20
     294:	f9 01       	movw	r30, r18
     296:	09 95       	icall
     298:	c8 01       	movw	r24, r16
     29a:	01 96       	adiw	r24, 0x01	; 1
     29c:	6d 2d       	mov	r22, r13
     29e:	f7 01       	movw	r30, r14
     2a0:	09 95       	icall
     2a2:	c8 01       	movw	r24, r16
     2a4:	02 96       	adiw	r24, 0x02	; 2
     2a6:	6c 2d       	mov	r22, r12
     2a8:	f7 01       	movw	r30, r14
     2aa:	09 95       	icall
     2ac:	c8 01       	movw	r24, r16
     2ae:	03 96       	adiw	r24, 0x03	; 3
     2b0:	6b 2d       	mov	r22, r11
     2b2:	f7 01       	movw	r30, r14
     2b4:	09 95       	icall
     2b6:	1f 91       	pop	r17
     2b8:	0f 91       	pop	r16
     2ba:	ff 90       	pop	r15
     2bc:	ef 90       	pop	r14
     2be:	df 90       	pop	r13
     2c0:	cf 90       	pop	r12
     2c2:	bf 90       	pop	r11
     2c4:	08 95       	ret

000002c6 <__bootstrap0>:
#endif

}


DEFINE_USERTRAP()
     2c6:	0c 94 00 00 	jmp	0	; 0x0 <__shared_data_skip>

000002ca <__bootstrap2>:
#ifdef NO_BOOTSHARED
void EVENT_USB_Device_Connect(void)
#else
TRAP(TR_USB_DEVICE_CONNECT)
#endif
{
     2ca:	2d 9a       	sbi	0x05, 5	; 5
    LedSet();
	SPCR &=~(1<<SPE);
     2cc:	8c b5       	in	r24, 0x2c	; 44
     2ce:	8f 7b       	andi	r24, 0xBF	; 191
     2d0:	8c bd       	out	0x2c, r24	; 44
}
     2d2:	08 95       	ret

000002d4 <__bootstrap3>:
#ifdef NO_BOOTSHARED
void EVENT_USB_Device_Disconnect(void)
#else
TRAP(TR_USB_DEVICE_DISCONNECT)
#endif
{
     2d4:	2d 98       	cbi	0x05, 5	; 5
    LedClear();
	SPCR |= (1<<SPE);
     2d6:	8c b5       	in	r24, 0x2c	; 44
     2d8:	80 64       	ori	r24, 0x40	; 64
     2da:	8c bd       	out	0x2c, r24	; 44
}
     2dc:	08 95       	ret

000002de <__bootstrap1>:
uint16_t CALLBACK_NONDFU_USB_GetDescriptor(const uint16_t wValue, const uint8_t wIndex, void** const DescriptorAddress);

uint16_t TRAP_NAME(TR_USB_GETDESCRIPTOR) (const uint16_t wValue, const uint8_t wIndex, void** const DescriptorAddress);

uint16_t TRAP_NAME(TR_USB_GETDESCRIPTOR) (const uint16_t wValue, const uint8_t wIndex, void** const DescriptorAddress)
{
     2de:	0c 94 32 0c 	jmp	0x1864	; 0x1864 <CALLBACK_NONDFU_USB_GetDescriptor>
    CALLBACK_NONDFU_USB_GetDescriptor(wValue, wIndex, DescriptorAddress);
}
     2e2:	08 95       	ret

000002e4 <__bootstrap5>:
#ifdef NO_BOOTSHARED
void EVENT_USB_Device_ConfigurationChanged(void)
#else
TRAP(TR_USB_DEVICE_CONFIGURATIONCHANGED)
#endif
{
     2e4:	8f e0       	ldi	r24, 0x0F	; 15
     2e6:	91 e0       	ldi	r25, 0x01	; 1
     2e8:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <CDC_Device_ConfigureEndpoints>
     2ec:	88 23       	and	r24, r24
     2ee:	11 f4       	brne	.+4      	; 0x2f4 <__bootstrap5+0x10>
    if (!(CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface)))
        LedClear();
     2f0:	2d 98       	cbi	0x05, 5	; 5
     2f2:	08 95       	ret
	else
		VirtualSerial_CDC_Interface.State.LineEncoding.BaudRateBPS = 9600;
     2f4:	80 e8       	ldi	r24, 0x80	; 128
     2f6:	95 e2       	ldi	r25, 0x25	; 37
     2f8:	a0 e0       	ldi	r26, 0x00	; 0
     2fa:	b0 e0       	ldi	r27, 0x00	; 0
     2fc:	80 93 1e 01 	sts	0x011E, r24
     300:	90 93 1f 01 	sts	0x011F, r25
     304:	a0 93 20 01 	sts	0x0120, r26
     308:	b0 93 21 01 	sts	0x0121, r27
     30c:	08 95       	ret

0000030e <__bootstrap4>:
#ifdef NO_BOOTSHARED
void EVENT_USB_Device_UnhandledControlRequest(void)
#else
TRAP(TR_USB_DEVICE_UNHANDLEDCONTROLREQUEST)
#endif
{
     30e:	8f e0       	ldi	r24, 0x0F	; 15
     310:	91 e0       	ldi	r25, 0x01	; 1
     312:	0c 94 fe 0d 	jmp	0x1bfc	; 0x1bfc <CDC_Device_ProcessControlRequest>

00000316 <SetupHardware>:



/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
     316:	1f 93       	push	r17
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     318:	84 b7       	in	r24, 0x34	; 52
     31a:	87 7f       	andi	r24, 0xF7	; 247
     31c:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     31e:	88 e1       	ldi	r24, 0x18	; 24
     320:	0f b6       	in	r0, 0x3f	; 63
     322:	f8 94       	cli
     324:	80 93 60 00 	sts	0x0060, r24
     328:	10 92 60 00 	sts	0x0060, r1
     32c:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	20 e8       	ldi	r18, 0x80	; 128
     334:	0f b6       	in	r0, 0x3f	; 63
     336:	f8 94       	cli
     338:	20 93 61 00 	sts	0x0061, r18
     33c:	80 93 61 00 	sts	0x0061, r24
     340:	0f be       	out	0x3f, r0	; 63

	/* Hardware Initialization */
//	Serial_Init(38400, false);

#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE))
    USB_ControlEndpointSize = CDC_CONTROL_ENDPOINT_SIZE;
     342:	18 e0       	ldi	r17, 0x08	; 8
     344:	10 93 00 01 	sts	0x0100, r17
#endif

    USB_Init();
     348:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <USB_Init>

#ifdef SPI_ENABLED
	//Enable MISO
	DDRB = (1<<PB3);
     34c:	14 b9       	out	0x04, r17	; 4

	SPCR = (1<<SPIE) | (1<<SPE) | (1<<CPOL);
     34e:	88 ec       	ldi	r24, 0xC8	; 200
     350:	8c bd       	out	0x2c, r24	; 44
	//SPDR = 0xff;
#endif

}
     352:	1f 91       	pop	r17
     354:	08 95       	ret

00000356 <main>:
#if TAMER_VER >= 12
void SetOscillatorMode(uint8_t);
#endif

int main(void)
{
     356:	0f 93       	push	r16
     358:	1f 93       	push	r17
#if TAMER_VER >= 12
    SetOscillatorMode(0);
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	a9 d2       	rcall	.+1362   	; 0x8b0 <SetOscillatorMode>
#endif

    INFOLED_DDR |=  (1 << INFOLED);
     35e:	25 9a       	sbi	0x04, 5	; 4
    INFOLED_PORT |= (1 << INFOLED);
     360:	2d 9a       	sbi	0x05, 5	; 5

    SetupHardware();
     362:	d9 df       	rcall	.-78     	; 0x316 <SetupHardware>
    BoardInit();
     364:	7a d0       	rcall	.+244    	; 0x45a <BoardInit>

    AutoStartControl();
     366:	a4 d6       	rcall	.+3400   	; 0x10b0 <AutoStartControl>

	Buffer_Initialize(&USBtoUSART_Buffer);
     368:	8e e5       	ldi	r24, 0x5E	; 94
     36a:	91 e0       	ldi	r25, 0x01	; 1
     36c:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <Buffer_Initialize>
	Buffer_Initialize(&USARTtoUSB_Buffer);
     370:	81 e3       	ldi	r24, 0x31	; 49
     372:	91 e0       	ldi	r25, 0x01	; 1
     374:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <Buffer_Initialize>

    //CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);

	for (;;)
	{
		for (uint8_t DataBytesRem = CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface); DataBytesRem != 0; DataBytesRem--)
     378:	8f e0       	ldi	r24, 0x0F	; 15
     37a:	91 e0       	ldi	r25, 0x01	; 1
     37c:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <CDC_Device_BytesReceived>
     380:	08 2f       	mov	r16, r24
     382:	1c c0       	rjmp	.+56     	; 0x3bc <main+0x66>
		{
			if (!(BUFF_STATICSIZE - USBtoUSART_Buffer.Elements))
     384:	80 91 8a 01 	lds	r24, 0x018A
     388:	88 32       	cpi	r24, 0x28	; 40
     38a:	d1 f0       	breq	.+52     	; 0x3c0 <main+0x6a>
			  break;

            uint8_t byte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     38c:	8f e0       	ldi	r24, 0x0F	; 15
     38e:	91 e0       	ldi	r25, 0x01	; 1
     390:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <CDC_Device_ReceiveByte>
     394:	18 2f       	mov	r17, r24

            if ((byte != 0) && (byte != 0xff))
     396:	81 50       	subi	r24, 0x01	; 1
     398:	8e 3f       	cpi	r24, 0xFE	; 254
     39a:	28 f4       	brcc	.+10     	; 0x3a6 <main+0x50>
                Buffer_StoreElement(&USBtoUSART_Buffer, byte);
     39c:	8e e5       	ldi	r24, 0x5E	; 94
     39e:	91 e0       	ldi	r25, 0x01	; 1
     3a0:	61 2f       	mov	r22, r17
     3a2:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <Buffer_StoreElement>


			// Uncomment this to enable echo on console
            // CDC_Device_SendByte(&VirtualSerial_CDC_Interface, byte);

            if (byte == '\n' || byte == '\r')
     3a6:	1a 30       	cpi	r17, 0x0A	; 10
     3a8:	11 f0       	breq	.+4      	; 0x3ae <main+0x58>
     3aa:	1d 30       	cpi	r17, 0x0D	; 13
     3ac:	31 f4       	brne	.+12     	; 0x3ba <main+0x64>
            {
                commands++;
     3ae:	80 91 30 01 	lds	r24, 0x0130
     3b2:	8f 5f       	subi	r24, 0xFF	; 255
     3b4:	80 93 30 01 	sts	0x0130, r24
     3b8:	03 c0       	rjmp	.+6      	; 0x3c0 <main+0x6a>

    //CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);

	for (;;)
	{
		for (uint8_t DataBytesRem = CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface); DataBytesRem != 0; DataBytesRem--)
     3ba:	01 50       	subi	r16, 0x01	; 1
     3bc:	00 23       	and	r16, r16
     3be:	11 f7       	brne	.-60     	; 0x384 <main+0x2e>
                break;
            }
		}

        // Clean up buffer if it's full and there're no commands
        if ((commands == 0) && (!(BUFF_STATICSIZE - USBtoUSART_Buffer.Elements)))
     3c0:	80 91 30 01 	lds	r24, 0x0130
     3c4:	88 23       	and	r24, r24
     3c6:	d9 f4       	brne	.+54     	; 0x3fe <main+0xa8>
     3c8:	80 91 8a 01 	lds	r24, 0x018A
     3cc:	88 32       	cpi	r24, 0x28	; 40
     3ce:	b9 f4       	brne	.+46     	; 0x3fe <main+0xa8>
              Buffer_GetElement(&USBtoUSART_Buffer);
     3d0:	8e e5       	ldi	r24, 0x5E	; 94
     3d2:	91 e0       	ldi	r25, 0x01	; 1
     3d4:	0e 94 b3 0c 	call	0x1966	; 0x1966 <Buffer_GetElement>
     3d8:	12 c0       	rjmp	.+36     	; 0x3fe <main+0xa8>
		

        for (;commands>0;commands--)
        {
            uint8_t res = ParseCommand();
     3da:	0e 94 35 0b 	call	0x166a	; 0x166a <ParseCommand>
            if (res)
     3de:	88 23       	and	r24, r24
     3e0:	31 f0       	breq	.+12     	; 0x3ee <main+0x98>
            {
                res = ProcessCommand();
     3e2:	87 d6       	rcall	.+3342   	; 0x10f2 <ProcessCommand>
				if (res == 0)
     3e4:	88 23       	and	r24, r24
     3e6:	31 f4       	brne	.+12     	; 0x3f4 <main+0x9e>
				{
					FillResultPM(resErr);
     3e8:	81 eb       	ldi	r24, 0xB1	; 177
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <main+0x9c>
				}
            }
            else
            {
                FillResultPM(resSyntax);
     3ee:	84 ea       	ldi	r24, 0xA4	; 164
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	17 d6       	rcall	.+3118   	; 0x1022 <FillResultPM>
        // Clean up buffer if it's full and there're no commands
        if ((commands == 0) && (!(BUFF_STATICSIZE - USBtoUSART_Buffer.Elements)))
              Buffer_GetElement(&USBtoUSART_Buffer);
		

        for (;commands>0;commands--)
     3f4:	80 91 30 01 	lds	r24, 0x0130
     3f8:	81 50       	subi	r24, 0x01	; 1
     3fa:	80 93 30 01 	sts	0x0130, r24
     3fe:	80 91 30 01 	lds	r24, 0x0130
     402:	88 23       	and	r24, r24
     404:	51 f7       	brne	.-44     	; 0x3da <main+0x84>
                FillResultPM(resSyntax);
            }
        }


		if (USB_DeviceState == DEVICE_STATE_Configured)
     406:	80 91 0e 01 	lds	r24, 0x010E
     40a:	84 30       	cpi	r24, 0x04	; 4
     40c:	71 f4       	brne	.+28     	; 0x42a <main+0xd4>
     40e:	09 c0       	rjmp	.+18     	; 0x422 <main+0xcc>
		{
			/* Read bytes from the USART receive buffer into the USB IN endpoint */
			while (USARTtoUSB_Buffer.Elements)
				CDC_Device_SendByte(&VirtualSerial_CDC_Interface, Buffer_GetElement(&USARTtoUSB_Buffer));
     410:	81 e3       	ldi	r24, 0x31	; 49
     412:	91 e0       	ldi	r25, 0x01	; 1
     414:	0e 94 b3 0c 	call	0x1966	; 0x1966 <Buffer_GetElement>
     418:	68 2f       	mov	r22, r24
     41a:	8f e0       	ldi	r24, 0x0F	; 15
     41c:	91 e0       	ldi	r25, 0x01	; 1
     41e:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <CDC_Device_SendByte>


		if (USB_DeviceState == DEVICE_STATE_Configured)
		{
			/* Read bytes from the USART receive buffer into the USB IN endpoint */
			while (USARTtoUSB_Buffer.Elements)
     422:	80 91 5d 01 	lds	r24, 0x015D
     426:	88 23       	and	r24, r24
     428:	99 f7       	brne	.-26     	; 0x410 <main+0xba>
				CDC_Device_SendByte(&VirtualSerial_CDC_Interface, Buffer_GetElement(&USARTtoUSB_Buffer));
		}

        TamerControlAux();
     42a:	2d d5       	rcall	.+2650   	; 0xe86 <TamerControlAux>
		//if (USBtoUSART_Buffer.Elements)
        //  Serial_TxByte(Buffer_GetElement(&USBtoUSART_Buffer));

        //Serial_TxByte(CDC_Device_SendByte(&VirtualSerial_CDC_Interface, '\n'));
		
		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     42c:	8f e0       	ldi	r24, 0x0F	; 15
     42e:	91 e0       	ldi	r25, 0x01	; 1
     430:	0e 94 66 0d 	call	0x1acc	; 0x1acc <CDC_Device_USBTask>
		USB_USBTask();
     434:	0e 94 30 1f 	call	0x3e60	; 0x3e60 <USB_USBTask>
     438:	9f cf       	rjmp	.-194    	; 0x378 <main+0x22>

0000043a <MicrowireInit>:
        MicrowireWriteByte(f4);
        MicrowireLatchLMK0X0XX();
}

void MicrowireInit()
{
     43a:	8a b1       	in	r24, 0x0a	; 10
     43c:	83 60       	ori	r24, 0x03	; 3
     43e:	8a b9       	out	0x0a, r24	; 10
   MW_DDR |=  (1 << MW_DATA) | (1 << MW_CLK);
   MW_PORT &= ~(1 << MW_CLK);
     440:	59 98       	cbi	0x0b, 1	; 11
   MW_PORT &= ~(1 << MW_DATA);
     442:	58 98       	cbi	0x0b, 0	; 11
}
     444:	08 95       	ret

00000446 <MicrowireLatchLMX2531>:

void MicrowireLatchLMX2531()
{
     446:	2e 9a       	sbi	0x05, 6	; 5
    MW_LE_PORT |= (1 << MW_LE_LMX2531);
    MW_LE_PORT |= (1 << MW_LE_LMX2531);
     448:	2e 9a       	sbi	0x05, 6	; 5
   //_delay_us(1);
    MW_LE_PORT &= ~(1 << MW_LE_LMX2531);
     44a:	2e 98       	cbi	0x05, 6	; 5
    MW_LE_PORT &= ~(1 << MW_LE_LMX2531);
     44c:	2e 98       	cbi	0x05, 6	; 5
   //_delay_us(1);
}
     44e:	08 95       	ret

00000450 <MicrowireLatchLMK0X0XX>:

void MicrowireLatchLMK0X0XX()
{
     450:	2f 9a       	sbi	0x05, 7	; 5
    MW_LE_PORT |= (1 << MW_LE_LMK0X0XX);
    MW_LE_PORT |= (1 << MW_LE_LMK0X0XX);
     452:	2f 9a       	sbi	0x05, 7	; 5
   //_delay_us(1);
    MW_LE_PORT &= ~(1 << MW_LE_LMK0X0XX);
     454:	2f 98       	cbi	0x05, 7	; 5
    MW_LE_PORT &= ~(1 << MW_LE_LMK0X0XX);
     456:	2f 98       	cbi	0x05, 7	; 5
   //_delay_us(1);
}
     458:	08 95       	ret

0000045a <BoardInit>:


void BoardInit()
{
     45a:	ef df       	rcall	.-34     	; 0x43a <MicrowireInit>
   MicrowireInit();

   MW_LE_DDR |=  (1 << MW_LE_LMX2531) | (1 << MW_LE_LMK0X0XX);
     45c:	84 b1       	in	r24, 0x04	; 4
     45e:	80 6c       	ori	r24, 0xC0	; 192
     460:	84 b9       	out	0x04, r24	; 4
   MW_LE_PORT &= ~((1 << MW_LE_LMX2531) | (1 << MW_LE_LMK0X0XX));
     462:	85 b1       	in	r24, 0x05	; 5
     464:	8f 73       	andi	r24, 0x3F	; 63
     466:	85 b9       	out	0x05, r24	; 5

   LmxCeInit();
     468:	55 9a       	sbi	0x0a, 5	; 10
   LmxCeClear();
     46a:	5d 98       	cbi	0x0b, 5	; 11

   LmkCeInit();
     46c:	87 b1       	in	r24, 0x07	; 7
     46e:	84 64       	ori	r24, 0x44	; 68
     470:	87 b9       	out	0x07, r24	; 7
   LmkSyncClear();
     472:	42 98       	cbi	0x08, 2	; 8
   LmkGoeClear();
     474:	46 98       	cbi	0x08, 6	; 8

   LedInit();
     476:	25 9a       	sbi	0x04, 5	; 4
   LedClear();
     478:	2d 98       	cbi	0x05, 5	; 5
}
     47a:	08 95       	ret

0000047c <MicrowireWriteByte>:

void MicrowireWriteByte(uint8_t data)
{
     47c:	98 e0       	ldi	r25, 0x08	; 8
   uint8_t i;

   for (i = 8; i != 0; i--)
   {
      MW_PORT &=  ~(1 << MW_CLK);  //Toggle CLK low
     47e:	59 98       	cbi	0x0b, 1	; 11

      // Use this because of perfomance impact on an embedded device
      if ((data & 0x80) != 0)
     480:	87 ff       	sbrs	r24, 7
     482:	02 c0       	rjmp	.+4      	; 0x488 <MicrowireWriteByte+0xc>
         MW_PORT |=  (1 << MW_DATA);   //Set DATA bit
     484:	58 9a       	sbi	0x0b, 0	; 11
     486:	01 c0       	rjmp	.+2      	; 0x48a <MicrowireWriteByte+0xe>
      else
         MW_PORT &=  ~(1 << MW_DATA);  //Reset DATA bit
     488:	58 98       	cbi	0x0b, 0	; 11

      data <<= 1;

      MW_PORT |=  (1 << MW_CLK);  //Toggle CLK high
     48a:	59 9a       	sbi	0x0b, 1	; 11

void MicrowireWriteByte(uint8_t data)
{
   uint8_t i;

   for (i = 8; i != 0; i--)
     48c:	91 50       	subi	r25, 0x01	; 1
     48e:	11 f0       	breq	.+4      	; 0x494 <MicrowireWriteByte+0x18>
      if ((data & 0x80) != 0)
         MW_PORT |=  (1 << MW_DATA);   //Set DATA bit
      else
         MW_PORT &=  ~(1 << MW_DATA);  //Reset DATA bit

      data <<= 1;
     490:	88 0f       	add	r24, r24
     492:	f5 cf       	rjmp	.-22     	; 0x47e <MicrowireWriteByte+0x2>

      MW_PORT |=  (1 << MW_CLK);  //Toggle CLK high
   }

   MW_PORT &=  ~(1 << MW_DATA);
     494:	58 98       	cbi	0x0b, 0	; 11
   MW_PORT &=  ~(1 << MW_CLK);
     496:	59 98       	cbi	0x0b, 1	; 11
}
     498:	08 95       	ret

0000049a <write_reg_LMK0X0XX>:
        MicrowireWriteByte(f3);
        MicrowireLatchLMX2531();
}

void write_reg_LMK0X0XX(uint8_t f1, uint8_t f2, uint8_t f3, uint8_t f4)
{
     49a:	ff 92       	push	r15
     49c:	0f 93       	push	r16
     49e:	1f 93       	push	r17
     4a0:	16 2f       	mov	r17, r22
     4a2:	04 2f       	mov	r16, r20
     4a4:	f2 2e       	mov	r15, r18
        MicrowireWriteByte(f1);
     4a6:	ea df       	rcall	.-44     	; 0x47c <MicrowireWriteByte>
        MicrowireWriteByte(f2);
     4a8:	81 2f       	mov	r24, r17
     4aa:	e8 df       	rcall	.-48     	; 0x47c <MicrowireWriteByte>
        MicrowireWriteByte(f3);
     4ac:	80 2f       	mov	r24, r16
     4ae:	e6 df       	rcall	.-52     	; 0x47c <MicrowireWriteByte>
        MicrowireWriteByte(f4);
     4b0:	8f 2d       	mov	r24, r15
     4b2:	e4 df       	rcall	.-56     	; 0x47c <MicrowireWriteByte>
        MicrowireLatchLMK0X0XX();
     4b4:	cd df       	rcall	.-102    	; 0x450 <MicrowireLatchLMK0X0XX>
}
     4b6:	1f 91       	pop	r17
     4b8:	0f 91       	pop	r16
     4ba:	ff 90       	pop	r15
     4bc:	08 95       	ret

000004be <write_reg_LMX2531>:
#include "TamerBoard.h"

#include <util/delay.h>

void write_reg_LMX2531(uint8_t f1, uint8_t f2, uint8_t f3)
{
     4be:	0f 93       	push	r16
     4c0:	1f 93       	push	r17
     4c2:	16 2f       	mov	r17, r22
     4c4:	04 2f       	mov	r16, r20
        MicrowireWriteByte(f1);
     4c6:	da df       	rcall	.-76     	; 0x47c <MicrowireWriteByte>
        MicrowireWriteByte(f2);
     4c8:	81 2f       	mov	r24, r17
     4ca:	d8 df       	rcall	.-80     	; 0x47c <MicrowireWriteByte>
        MicrowireWriteByte(f3);
     4cc:	80 2f       	mov	r24, r16
     4ce:	d6 df       	rcall	.-84     	; 0x47c <MicrowireWriteByte>
        MicrowireLatchLMX2531();
     4d0:	ba df       	rcall	.-140    	; 0x446 <MicrowireLatchLMX2531>
}
     4d2:	1f 91       	pop	r17
     4d4:	0f 91       	pop	r16
     4d6:	08 95       	ret

000004d8 <eeprom_read_byte>:

/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
     4d8:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
     4da:	f9 99       	sbic	0x1f, 1	; 31
     4dc:	fe cf       	rjmp	.-4      	; 0x4da <eeprom_read_byte+0x2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     4de:	32 bd       	out	0x22, r19	; 34
     4e0:	21 bd       	out	0x21, r18	; 33
#endif
    EECR |= (1 << EERE);
     4e2:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
     4e4:	80 b5       	in	r24, 0x20	; 32
}
     4e6:	08 95       	ret

000004e8 <eeprom_write_byte>:

/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
     4e8:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
     4ea:	f9 99       	sbic	0x1f, 1	; 31
     4ec:	fe cf       	rjmp	.-4      	; 0x4ea <eeprom_write_byte+0x2>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     4ee:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     4f0:	32 bd       	out	0x22, r19	; 34
     4f2:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
     4f4:	60 bd       	out	0x20, r22	; 32

    __asm__ __volatile__ (
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	f8 94       	cli
     4fa:	fa 9a       	sbi	0x1f, 2	; 31
     4fc:	f9 9a       	sbi	0x1f, 1	; 31
     4fe:	0f be       	out	0x3f, r0	; 63
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
}
     500:	08 95       	ret

00000502 <InitCounters>:


#ifdef PRESENT_GPS

void InitCounters(void)
{
     502:	87 e4       	ldi	r24, 0x47	; 71
     504:	80 93 81 00 	sts	0x0081, r24
    //External T1 Source
    TCCR1B = (1 << ICES1) | (1 << CS12) | (1 << CS11) | (1 << CS10);

    //Enable input capture interrupt
    TIMSK1 = (1 << ICIE1) | (1 << TOIE1);
     508:	81 e2       	ldi	r24, 0x21	; 33
     50a:	80 93 6f 00 	sts	0x006F, r24
}
     50e:	08 95       	ret

00000510 <__vector_14>:
#define FILTER_EXP_ALPHA        32

#define RESET_OCP_COUNTER       0x80

ISR(TIMER1_CAPT_vect, ISR_BLOCK)
{
     510:	1f 92       	push	r1
     512:	0f 92       	push	r0
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	0f 92       	push	r0
     518:	11 24       	eor	r1, r1
     51a:	6f 92       	push	r6
     51c:	7f 92       	push	r7
     51e:	8f 92       	push	r8
     520:	9f 92       	push	r9
     522:	af 92       	push	r10
     524:	bf 92       	push	r11
     526:	cf 92       	push	r12
     528:	df 92       	push	r13
     52a:	ef 92       	push	r14
     52c:	ff 92       	push	r15
     52e:	0f 93       	push	r16
     530:	1f 93       	push	r17
     532:	2f 93       	push	r18
     534:	3f 93       	push	r19
     536:	4f 93       	push	r20
     538:	5f 93       	push	r21
     53a:	6f 93       	push	r22
     53c:	7f 93       	push	r23
     53e:	8f 93       	push	r24
     540:	9f 93       	push	r25
     542:	af 93       	push	r26
     544:	bf 93       	push	r27
     546:	ef 93       	push	r30
     548:	ff 93       	push	r31
    //TODO Impove this code!!!
    // Situation when counter overflows inside this inturrupt isn't covered

    if (Count1PPS % GpsSync_divider == 0)
     54a:	e0 91 a4 01 	lds	r30, 0x01A4
     54e:	f0 91 a5 01 	lds	r31, 0x01A5
     552:	60 91 2e 01 	lds	r22, 0x012E
     556:	cf 01       	movw	r24, r30
     558:	70 e0       	ldi	r23, 0x00	; 0
     55a:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <__udivmodhi4>
     55e:	89 2b       	or	r24, r25
     560:	09 f0       	breq	.+2      	; 0x564 <__vector_14+0x54>
     562:	c1 c0       	rjmp	.+386    	; 0x6e6 <__vector_14+0x1d6>
    {
        uint32_t prev = LastOCPVal;
     564:	e0 90 ab 01 	lds	r14, 0x01AB
     568:	f0 90 ac 01 	lds	r15, 0x01AC
     56c:	00 91 ad 01 	lds	r16, 0x01AD
     570:	10 91 ae 01 	lds	r17, 0x01AE

        LastOCPVal = ICR1;
     574:	80 91 86 00 	lds	r24, 0x0086
     578:	90 91 87 00 	lds	r25, 0x0087
        LastOCPVal |= (CounterHHValue << 16);
     57c:	20 91 8b 01 	lds	r18, 0x018B
     580:	30 91 8c 01 	lds	r19, 0x018C
     584:	40 91 8d 01 	lds	r20, 0x018D
     588:	50 91 8e 01 	lds	r21, 0x018E
     58c:	a9 01       	movw	r20, r18
     58e:	33 27       	eor	r19, r19
     590:	22 27       	eor	r18, r18
     592:	a0 e0       	ldi	r26, 0x00	; 0
     594:	b0 e0       	ldi	r27, 0x00	; 0
     596:	28 2b       	or	r18, r24
     598:	39 2b       	or	r19, r25
     59a:	4a 2b       	or	r20, r26
     59c:	5b 2b       	or	r21, r27
     59e:	20 93 ab 01 	sts	0x01AB, r18
     5a2:	30 93 ac 01 	sts	0x01AC, r19
     5a6:	40 93 ad 01 	sts	0x01AD, r20
     5aa:	50 93 ae 01 	sts	0x01AE, r21
        if (TIFR1 & (1<< TOV1))
     5ae:	b0 9b       	sbis	0x16, 0	; 22
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__vector_14+0xba>
            LastOCPVal += 0x010000;
     5b2:	20 50       	subi	r18, 0x00	; 0
     5b4:	30 40       	sbci	r19, 0x00	; 0
     5b6:	4f 4f       	sbci	r20, 0xFF	; 255
     5b8:	5f 4f       	sbci	r21, 0xFF	; 255
     5ba:	20 93 ab 01 	sts	0x01AB, r18
     5be:	30 93 ac 01 	sts	0x01AC, r19
     5c2:	40 93 ad 01 	sts	0x01AD, r20
     5c6:	50 93 ae 01 	sts	0x01AE, r21

        uint32_t delta =  (LastOCPVal - prev);
     5ca:	80 91 ab 01 	lds	r24, 0x01AB
     5ce:	90 91 ac 01 	lds	r25, 0x01AC
     5d2:	a0 91 ad 01 	lds	r26, 0x01AD
     5d6:	b0 91 ae 01 	lds	r27, 0x01AE
        int32_t pint = (FilteredVal/FILTER_EXP_ALPHA - delta);
     5da:	60 90 93 01 	lds	r6, 0x0193
     5de:	70 90 94 01 	lds	r7, 0x0194
     5e2:	80 90 95 01 	lds	r8, 0x0195
     5e6:	90 90 96 01 	lds	r9, 0x0196
        if (pint < 0)
            pint = -pint;

        if ((Count1PPS != 0))
     5ea:	30 97       	sbiw	r30, 0x00	; 0
     5ec:	09 f4       	brne	.+2      	; 0x5f0 <__vector_14+0xe0>
     5ee:	76 c0       	rjmp	.+236    	; 0x6dc <__vector_14+0x1cc>
        LastOCPVal = ICR1;
        LastOCPVal |= (CounterHHValue << 16);
        if (TIFR1 & (1<< TOV1))
            LastOCPVal += 0x010000;

        uint32_t delta =  (LastOCPVal - prev);
     5f0:	9c 01       	movw	r18, r24
     5f2:	ad 01       	movw	r20, r26
     5f4:	2e 19       	sub	r18, r14
     5f6:	3f 09       	sbc	r19, r15
     5f8:	40 0b       	sbc	r20, r16
     5fa:	51 0b       	sbc	r21, r17
        int32_t pint = (FilteredVal/FILTER_EXP_ALPHA - delta);
     5fc:	84 01       	movw	r16, r8
     5fe:	73 01       	movw	r14, r6
     600:	b5 e0       	ldi	r27, 0x05	; 5
     602:	16 95       	lsr	r17
     604:	07 95       	ror	r16
     606:	f7 94       	ror	r15
     608:	e7 94       	ror	r14
     60a:	ba 95       	dec	r27
     60c:	d1 f7       	brne	.-12     	; 0x602 <__vector_14+0xf2>
     60e:	57 01       	movw	r10, r14
     610:	68 01       	movw	r12, r16
     612:	a2 1a       	sub	r10, r18
     614:	b3 0a       	sbc	r11, r19
     616:	c4 0a       	sbc	r12, r20
     618:	d5 0a       	sbc	r13, r21
     61a:	d7 fe       	sbrs	r13, 7
     61c:	08 c0       	rjmp	.+16     	; 0x62e <__vector_14+0x11e>
     61e:	d0 94       	com	r13
     620:	c0 94       	com	r12
     622:	b0 94       	com	r11
     624:	a0 94       	com	r10
     626:	a1 1c       	adc	r10, r1
     628:	b1 1c       	adc	r11, r1
     62a:	c1 1c       	adc	r12, r1
     62c:	d1 1c       	adc	r13, r1
        if (pint < 0)
            pint = -pint;

        if ((Count1PPS != 0))
        {
            if (PPS_skipped == RESET_OCP_COUNTER)
     62e:	60 91 af 01 	lds	r22, 0x01AF
     632:	60 38       	cpi	r22, 0x80	; 128
     634:	21 f4       	brne	.+8      	; 0x63e <__vector_14+0x12e>
            {
                PPS_skipped++;
     636:	81 e8       	ldi	r24, 0x81	; 129
     638:	80 93 af 01 	sts	0x01AF, r24
     63c:	46 c0       	rjmp	.+140    	; 0x6ca <__vector_14+0x1ba>
            }
            else if ((FilteredVal == 0) || (PPS_skipped > 1))
     63e:	61 14       	cp	r6, r1
     640:	71 04       	cpc	r7, r1
     642:	81 04       	cpc	r8, r1
     644:	91 04       	cpc	r9, r1
     646:	11 f0       	breq	.+4      	; 0x64c <__vector_14+0x13c>
     648:	62 30       	cpi	r22, 0x02	; 2
     64a:	90 f0       	brcs	.+36     	; 0x670 <__vector_14+0x160>
            {
                PPS_skipped = 0;
     64c:	10 92 af 01 	sts	0x01AF, r1
                FilteredVal = FILTER_EXP_ALPHA*(delta);
     650:	a5 e0       	ldi	r26, 0x05	; 5
     652:	22 0f       	add	r18, r18
     654:	33 1f       	adc	r19, r19
     656:	44 1f       	adc	r20, r20
     658:	55 1f       	adc	r21, r21
     65a:	aa 95       	dec	r26
     65c:	d1 f7       	brne	.-12     	; 0x652 <__vector_14+0x142>
     65e:	20 93 93 01 	sts	0x0193, r18
     662:	30 93 94 01 	sts	0x0194, r19
     666:	40 93 95 01 	sts	0x0195, r20
     66a:	50 93 96 01 	sts	0x0196, r21
     66e:	2d c0       	rjmp	.+90     	; 0x6ca <__vector_14+0x1ba>
            }
            else if ((uint32_t)pint < delta / 524288)
     670:	da 01       	movw	r26, r20
     672:	c9 01       	movw	r24, r18
     674:	73 e1       	ldi	r23, 0x13	; 19
     676:	b6 95       	lsr	r27
     678:	a7 95       	ror	r26
     67a:	97 95       	ror	r25
     67c:	87 95       	ror	r24
     67e:	7a 95       	dec	r23
     680:	d1 f7       	brne	.-12     	; 0x676 <__vector_14+0x166>
     682:	a8 16       	cp	r10, r24
     684:	b9 06       	cpc	r11, r25
     686:	ca 06       	cpc	r12, r26
     688:	db 06       	cpc	r13, r27
     68a:	e0 f4       	brcc	.+56     	; 0x6c4 <__vector_14+0x1b4>
            {
                // TODO Impove this calculation
                FilteredVal = (FILTER_EXP_ALPHA-1)*(FilteredVal/FILTER_EXP_ALPHA) + (delta);
     68c:	d8 01       	movw	r26, r16
     68e:	c7 01       	movw	r24, r14
     690:	65 e0       	ldi	r22, 0x05	; 5
     692:	88 0f       	add	r24, r24
     694:	99 1f       	adc	r25, r25
     696:	aa 1f       	adc	r26, r26
     698:	bb 1f       	adc	r27, r27
     69a:	6a 95       	dec	r22
     69c:	d1 f7       	brne	.-12     	; 0x692 <__vector_14+0x182>
     69e:	8e 19       	sub	r24, r14
     6a0:	9f 09       	sbc	r25, r15
     6a2:	a0 0b       	sbc	r26, r16
     6a4:	b1 0b       	sbc	r27, r17
     6a6:	82 0f       	add	r24, r18
     6a8:	93 1f       	adc	r25, r19
     6aa:	a4 1f       	adc	r26, r20
     6ac:	b5 1f       	adc	r27, r21
     6ae:	80 93 93 01 	sts	0x0193, r24
     6b2:	90 93 94 01 	sts	0x0194, r25
     6b6:	a0 93 95 01 	sts	0x0195, r26
     6ba:	b0 93 96 01 	sts	0x0196, r27

                PPS_skipped = 0;
     6be:	10 92 af 01 	sts	0x01AF, r1
     6c2:	03 c0       	rjmp	.+6      	; 0x6ca <__vector_14+0x1ba>
            }
            else
                PPS_skipped++;
     6c4:	6f 5f       	subi	r22, 0xFF	; 255
     6c6:	60 93 af 01 	sts	0x01AF, r22

            ddd = pint;
     6ca:	a0 92 b5 01 	sts	0x01B5, r10
     6ce:	b0 92 b6 01 	sts	0x01B6, r11
     6d2:	c0 92 b7 01 	sts	0x01B7, r12
     6d6:	d0 92 b8 01 	sts	0x01B8, r13
     6da:	05 c0       	rjmp	.+10     	; 0x6e6 <__vector_14+0x1d6>
        }
        else
        {
            PPS_skipped++;
     6dc:	80 91 af 01 	lds	r24, 0x01AF
     6e0:	8f 5f       	subi	r24, 0xFF	; 255
     6e2:	80 93 af 01 	sts	0x01AF, r24
        }
    }

    Count1PPS++;
     6e6:	31 96       	adiw	r30, 0x01	; 1
     6e8:	f0 93 a5 01 	sts	0x01A5, r31
     6ec:	e0 93 a4 01 	sts	0x01A4, r30

#ifdef BLINK_1PPS
    INFOLED_PORT ^= (1 << INFOLED);
     6f0:	85 b1       	in	r24, 0x05	; 5
     6f2:	90 e2       	ldi	r25, 0x20	; 32
     6f4:	89 27       	eor	r24, r25
     6f6:	85 b9       	out	0x05, r24	; 5
#endif
}
     6f8:	ff 91       	pop	r31
     6fa:	ef 91       	pop	r30
     6fc:	bf 91       	pop	r27
     6fe:	af 91       	pop	r26
     700:	9f 91       	pop	r25
     702:	8f 91       	pop	r24
     704:	7f 91       	pop	r23
     706:	6f 91       	pop	r22
     708:	5f 91       	pop	r21
     70a:	4f 91       	pop	r20
     70c:	3f 91       	pop	r19
     70e:	2f 91       	pop	r18
     710:	1f 91       	pop	r17
     712:	0f 91       	pop	r16
     714:	ff 90       	pop	r15
     716:	ef 90       	pop	r14
     718:	df 90       	pop	r13
     71a:	cf 90       	pop	r12
     71c:	bf 90       	pop	r11
     71e:	af 90       	pop	r10
     720:	9f 90       	pop	r9
     722:	8f 90       	pop	r8
     724:	7f 90       	pop	r7
     726:	6f 90       	pop	r6
     728:	0f 90       	pop	r0
     72a:	0f be       	out	0x3f, r0	; 63
     72c:	0f 90       	pop	r0
     72e:	1f 90       	pop	r1
     730:	18 95       	reti

00000732 <__vector_18>:

ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
     732:	1f 92       	push	r1
     734:	0f 92       	push	r0
     736:	0f b6       	in	r0, 0x3f	; 63
     738:	0f 92       	push	r0
     73a:	11 24       	eor	r1, r1
     73c:	8f 93       	push	r24
     73e:	9f 93       	push	r25
     740:	af 93       	push	r26
     742:	bf 93       	push	r27

    CounterHHValue++;
     744:	80 91 8b 01 	lds	r24, 0x018B
     748:	90 91 8c 01 	lds	r25, 0x018C
     74c:	a0 91 8d 01 	lds	r26, 0x018D
     750:	b0 91 8e 01 	lds	r27, 0x018E
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	a1 1d       	adc	r26, r1
     758:	b1 1d       	adc	r27, r1
     75a:	80 93 8b 01 	sts	0x018B, r24
     75e:	90 93 8c 01 	sts	0x018C, r25
     762:	a0 93 8d 01 	sts	0x018D, r26
     766:	b0 93 8e 01 	sts	0x018E, r27
}
     76a:	bf 91       	pop	r27
     76c:	af 91       	pop	r26
     76e:	9f 91       	pop	r25
     770:	8f 91       	pop	r24
     772:	0f 90       	pop	r0
     774:	0f be       	out	0x3f, r0	; 63
     776:	0f 90       	pop	r0
     778:	1f 90       	pop	r1
     77a:	18 95       	reti

0000077c <UpdateOSCValue>:

void UpdateOSCValue(void)
{
     77c:	2f 92       	push	r2
     77e:	3f 92       	push	r3
     780:	4f 92       	push	r4
     782:	5f 92       	push	r5
     784:	6f 92       	push	r6
     786:	7f 92       	push	r7
     788:	8f 92       	push	r8
     78a:	9f 92       	push	r9
     78c:	af 92       	push	r10
     78e:	bf 92       	push	r11
     790:	cf 92       	push	r12
     792:	df 92       	push	r13
     794:	ef 92       	push	r14
     796:	ff 92       	push	r15
     798:	0f 93       	push	r16
     79a:	1f 93       	push	r17
    int32_t delta = (int)(FilteredVal/FILTER_EXP_ALPHA) - (int)Fout ;
     79c:	60 90 29 01 	lds	r6, 0x0129
     7a0:	70 90 2a 01 	lds	r7, 0x012A
     7a4:	80 90 2b 01 	lds	r8, 0x012B
     7a8:	90 90 2c 01 	lds	r9, 0x012C
     7ac:	80 91 93 01 	lds	r24, 0x0193
     7b0:	90 91 94 01 	lds	r25, 0x0194
     7b4:	a0 91 95 01 	lds	r26, 0x0195
     7b8:	b0 91 96 01 	lds	r27, 0x0196
     7bc:	e5 e0       	ldi	r30, 0x05	; 5
     7be:	b6 95       	lsr	r27
     7c0:	a7 95       	ror	r26
     7c2:	97 95       	ror	r25
     7c4:	87 95       	ror	r24
     7c6:	ea 95       	dec	r30
     7c8:	d1 f7       	brne	.-12     	; 0x7be <UpdateOSCValue+0x42>
     7ca:	86 19       	sub	r24, r6
     7cc:	97 09       	sbc	r25, r7
     7ce:	5c 01       	movw	r10, r24
     7d0:	cc 24       	eor	r12, r12
     7d2:	b7 fc       	sbrc	r11, 7
     7d4:	c0 94       	com	r12
     7d6:	dc 2c       	mov	r13, r12

    uint32_t pdelta = (delta > 0) ? delta : -delta;
     7d8:	86 01       	movw	r16, r12
     7da:	75 01       	movw	r14, r10
     7dc:	d7 fe       	sbrs	r13, 7
     7de:	07 c0       	rjmp	.+14     	; 0x7ee <UpdateOSCValue+0x72>
     7e0:	ee 24       	eor	r14, r14
     7e2:	ff 24       	eor	r15, r15
     7e4:	87 01       	movw	r16, r14
     7e6:	ea 18       	sub	r14, r10
     7e8:	fb 08       	sbc	r15, r11
     7ea:	0c 09       	sbc	r16, r12
     7ec:	1d 09       	sbc	r17, r13
    if (pdelta < Fout / 4096)
     7ee:	d4 01       	movw	r26, r8
     7f0:	c3 01       	movw	r24, r6
     7f2:	7c e0       	ldi	r23, 0x0C	; 12
     7f4:	b6 95       	lsr	r27
     7f6:	a7 95       	ror	r26
     7f8:	97 95       	ror	r25
     7fa:	87 95       	ror	r24
     7fc:	7a 95       	dec	r23
     7fe:	d1 f7       	brne	.-12     	; 0x7f4 <UpdateOSCValue+0x78>
     800:	e8 16       	cp	r14, r24
     802:	f9 06       	cpc	r15, r25
     804:	0a 07       	cpc	r16, r26
     806:	1b 07       	cpc	r17, r27
     808:	08 f0       	brcs	.+2      	; 0x80c <UpdateOSCValue+0x90>
     80a:	41 c0       	rjmp	.+130    	; 0x88e <UpdateOSCValue+0x112>
    {
        //TODO Make pure div operation instead of this
        uint32_t m = 0x7FFFFFFF / Fosc;
     80c:	50 90 25 01 	lds	r5, 0x0125
     810:	40 90 26 01 	lds	r4, 0x0126
     814:	30 90 27 01 	lds	r3, 0x0127
     818:	20 90 28 01 	lds	r2, 0x0128
     81c:	6f ef       	ldi	r22, 0xFF	; 255
     81e:	7f ef       	ldi	r23, 0xFF	; 255
     820:	8f ef       	ldi	r24, 0xFF	; 255
     822:	9f e7       	ldi	r25, 0x7F	; 127
     824:	25 2d       	mov	r18, r5
     826:	34 2d       	mov	r19, r4
     828:	43 2d       	mov	r20, r3
     82a:	52 2d       	mov	r21, r2
     82c:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__udivmodsi4>
     830:	c9 01       	movw	r24, r18
     832:	da 01       	movw	r26, r20
        if (pdelta > m)
     834:	8e 15       	cp	r24, r14
     836:	9f 05       	cpc	r25, r15
     838:	a0 07       	cpc	r26, r16
     83a:	b1 07       	cpc	r27, r17
     83c:	70 f4       	brcc	.+28     	; 0x85a <UpdateOSCValue+0xde>
        {
            delta = (delta > 0) ? m : -m;
     83e:	1a 14       	cp	r1, r10
     840:	1b 04       	cpc	r1, r11
     842:	1c 04       	cpc	r1, r12
     844:	1d 04       	cpc	r1, r13
     846:	3c f0       	brlt	.+14     	; 0x856 <UpdateOSCValue+0xda>
     848:	b0 95       	com	r27
     84a:	a0 95       	com	r26
     84c:	90 95       	com	r25
     84e:	81 95       	neg	r24
     850:	9f 4f       	sbci	r25, 0xFF	; 255
     852:	af 4f       	sbci	r26, 0xFF	; 255
     854:	bf 4f       	sbci	r27, 0xFF	; 255
     856:	5c 01       	movw	r10, r24
     858:	6d 01       	movw	r12, r26
        }

        Fosc = (uint32_t)((int32_t)Fosc + (delta*(int32_t)Fosc) / (int32_t)Fout);
     85a:	e5 2c       	mov	r14, r5
     85c:	f4 2c       	mov	r15, r4
     85e:	03 2d       	mov	r16, r3
     860:	12 2d       	mov	r17, r2
     862:	c6 01       	movw	r24, r12
     864:	b5 01       	movw	r22, r10
     866:	a8 01       	movw	r20, r16
     868:	97 01       	movw	r18, r14
     86a:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__mulsi3>
     86e:	a4 01       	movw	r20, r8
     870:	93 01       	movw	r18, r6
     872:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <__divmodsi4>
     876:	e2 0e       	add	r14, r18
     878:	f3 1e       	adc	r15, r19
     87a:	04 1f       	adc	r16, r20
     87c:	15 1f       	adc	r17, r21
     87e:	e0 92 25 01 	sts	0x0125, r14
     882:	f0 92 26 01 	sts	0x0126, r15
     886:	00 93 27 01 	sts	0x0127, r16
     88a:	10 93 28 01 	sts	0x0128, r17
    }
}
     88e:	1f 91       	pop	r17
     890:	0f 91       	pop	r16
     892:	ff 90       	pop	r15
     894:	ef 90       	pop	r14
     896:	df 90       	pop	r13
     898:	cf 90       	pop	r12
     89a:	bf 90       	pop	r11
     89c:	af 90       	pop	r10
     89e:	9f 90       	pop	r9
     8a0:	8f 90       	pop	r8
     8a2:	7f 90       	pop	r7
     8a4:	6f 90       	pop	r6
     8a6:	5f 90       	pop	r5
     8a8:	4f 90       	pop	r4
     8aa:	3f 90       	pop	r3
     8ac:	2f 90       	pop	r2
     8ae:	08 95       	ret

000008b0 <SetOscillatorMode>:
#define ENABLE_OSC  PD6
#define DDR_OSC     DDRD
#define PORT_OSC    PORTD

void SetOscillatorMode(uint8_t mode)
{
     8b0:	56 9a       	sbi	0x0a, 6	; 10
    DDR_OSC |= (1 << ENABLE_OSC);

    if (mode)
     8b2:	88 23       	and	r24, r24
     8b4:	11 f0       	breq	.+4      	; 0x8ba <SetOscillatorMode+0xa>
    {
        PORT_OSC |= (1 << ENABLE_OSC);
     8b6:	5e 9a       	sbi	0x0b, 6	; 11
     8b8:	08 95       	ret
    }
    else
    {
        PORT_OSC &= ~(1 << ENABLE_OSC);
     8ba:	5e 98       	cbi	0x0b, 6	; 11
     8bc:	08 95       	ret

000008be <SetOscillator>:
    }
}

static void SetOscillator(void)
{
     8be:	80 91 2f 01 	lds	r24, 0x012F
    SetOscillatorMode (EnableOscillator);
}
     8c2:	f6 cf       	rjmp	.-20     	; 0x8b0 <SetOscillatorMode>

000008c4 <SetLMK>:
    return 1;
}


void SetLMK(void)
{
     8c4:	cf 92       	push	r12
     8c6:	df 92       	push	r13
     8c8:	ef 92       	push	r14
     8ca:	ff 92       	push	r15
     8cc:	0f 93       	push	r16
     8ce:	1f 93       	push	r17
     8d0:	11 e0       	ldi	r17, 0x01	; 1
     8d2:	00 e0       	ldi	r16, 0x00	; 0
   uint8_t j = 1;
   for (uint8_t i = 0; i < 8; i++, j<<=1)
   {
        if ((j & LMK_OutMask) == j)
     8d4:	80 91 2d 01 	lds	r24, 0x012D
     8d8:	81 23       	and	r24, r17
     8da:	81 17       	cp	r24, r17
     8dc:	29 f4       	brne	.+10     	; 0x8e8 <SetLMK+0x24>
            //LMK0X0XX_WRITE(MAKE_LMK(1, 1, LMK_devider, 0, i));
            write_reg_LMK0X0XX(MAKE_LMK_HH(), MAKE_LMK_HL(1, 1), MAKE_LMK_LH(LMK_devider), MAKE_LMK_LL(0, i));
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	63 e0       	ldi	r22, 0x03	; 3
     8e2:	40 91 b4 01 	lds	r20, 0x01B4
     8e6:	03 c0       	rjmp	.+6      	; 0x8ee <SetLMK+0x2a>
        else
            //LMK0X0XX_WRITE(0x00000100 | (uint32_t)i);
            write_reg_LMK0X0XX(MAKE_LMK_HH(), MAKE_LMK_HL(0, 0), MAKE_LMK_LH(1), MAKE_LMK_LL(0, i));
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	41 e0       	ldi	r20, 0x01	; 1
     8ee:	20 2f       	mov	r18, r16
     8f0:	d4 dd       	rcall	.-1112   	; 0x49a <write_reg_LMK0X0XX>


void SetLMK(void)
{
   uint8_t j = 1;
   for (uint8_t i = 0; i < 8; i++, j<<=1)
     8f2:	0f 5f       	subi	r16, 0xFF	; 255
     8f4:	08 30       	cpi	r16, 0x08	; 8
     8f6:	11 f0       	breq	.+4      	; 0x8fc <SetLMK+0x38>
     8f8:	11 0f       	add	r17, r17
     8fa:	ec cf       	rjmp	.-40     	; 0x8d4 <SetLMK+0x10>
            //LMK0X0XX_WRITE(0x00000100 | (uint32_t)i);
            write_reg_LMK0X0XX(MAKE_LMK_HH(), MAKE_LMK_HL(0, 0), MAKE_LMK_LH(1), MAKE_LMK_LL(0, i));
   }

#ifdef PRESENT_GPS
   LMK0X0XX_WRITE(MAKE_LMK(1, 1, GpsSync_divider * LMK_devider, 0, GPS_PORT));
     8fc:	60 91 2e 01 	lds	r22, 0x012E
     900:	80 91 b4 01 	lds	r24, 0x01B4
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	70 e0       	ldi	r23, 0x00	; 0
     908:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <__mulhi3>
     90c:	8c 01       	movw	r16, r24
     90e:	13 60       	ori	r17, 0x03	; 3
     910:	22 27       	eor	r18, r18
     912:	17 fd       	sbrc	r17, 7
     914:	20 95       	com	r18
     916:	32 2f       	mov	r19, r18
     918:	32 2f       	mov	r19, r18
     91a:	21 2f       	mov	r18, r17
     91c:	10 2f       	mov	r17, r16
     91e:	00 27       	eor	r16, r16
     920:	82 e0       	ldi	r24, 0x02	; 2
     922:	c8 2e       	mov	r12, r24
     924:	d1 2c       	mov	r13, r1
     926:	e1 2c       	mov	r14, r1
     928:	f1 2c       	mov	r15, r1
     92a:	c0 2a       	or	r12, r16
     92c:	d1 2a       	or	r13, r17
     92e:	e2 2a       	or	r14, r18
     930:	f3 2a       	or	r15, r19
     932:	8f 2d       	mov	r24, r15
     934:	bb 27       	eor	r27, r27
     936:	87 fd       	sbrc	r24, 7
     938:	b0 95       	com	r27
     93a:	9b 2f       	mov	r25, r27
     93c:	ab 2f       	mov	r26, r27
     93e:	a7 01       	movw	r20, r14
     940:	77 27       	eor	r23, r23
     942:	57 fd       	sbrc	r21, 7
     944:	70 95       	com	r23
     946:	67 2f       	mov	r22, r23
     948:	cd 2c       	mov	r12, r13
     94a:	de 2c       	mov	r13, r14
     94c:	ef 2c       	mov	r14, r15
     94e:	ff 24       	eor	r15, r15
     950:	e7 fc       	sbrc	r14, 7
     952:	fa 94       	dec	r15
     954:	02 60       	ori	r16, 0x02	; 2
     956:	64 2f       	mov	r22, r20
     958:	4c 2d       	mov	r20, r12
     95a:	20 2f       	mov	r18, r16
     95c:	9e dd       	rcall	.-1220   	; 0x49a <write_reg_LMK0X0XX>
#endif

   LMK0X0XX_WRITE(0x00022A09);
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	62 e0       	ldi	r22, 0x02	; 2
     962:	4a e2       	ldi	r20, 0x2A	; 42
     964:	29 e0       	ldi	r18, 0x09	; 9
     966:	99 dd       	rcall	.-1230   	; 0x49a <write_reg_LMK0X0XX>
   LMK0X0XX_WRITE(0x6800000E);
     968:	88 e6       	ldi	r24, 0x68	; 104
     96a:	60 e0       	ldi	r22, 0x00	; 0
     96c:	40 e0       	ldi	r20, 0x00	; 0
     96e:	2e e0       	ldi	r18, 0x0E	; 14
     970:	94 dd       	rcall	.-1240   	; 0x49a <write_reg_LMK0X0XX>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     972:	80 e2       	ldi	r24, 0x20	; 32
     974:	9e e4       	ldi	r25, 0x4E	; 78
     976:	fc 01       	movw	r30, r24
     978:	31 97       	sbiw	r30, 0x01	; 1
     97a:	f1 f7       	brne	.-4      	; 0x978 <SetLMK+0xb4>



   _delay_ms(10);

    LmkSyncClear();
     97c:	42 98       	cbi	0x08, 2	; 8
     97e:	01 97       	sbiw	r24, 0x01	; 1
     980:	f1 f7       	brne	.-4      	; 0x97e <SetLMK+0xba>

   _delay_ms(10);

    LmkSyncSet();
     982:	42 9a       	sbi	0x08, 2	; 8
}
     984:	1f 91       	pop	r17
     986:	0f 91       	pop	r16
     988:	ff 90       	pop	r15
     98a:	ef 90       	pop	r14
     98c:	df 90       	pop	r13
     98e:	cf 90       	pop	r12
     990:	08 95       	ret

00000992 <InitLMK>:
    LMX2531_WRITE(LMX2531_R12_INIT);
    LMX2531_WRITE(LMX2531_R9_INIT);
}

void InitLMK(void)
{
     992:	46 9a       	sbi	0x08, 6	; 8
     994:	84 ef       	ldi	r24, 0xF4	; 244
     996:	91 e0       	ldi	r25, 0x01	; 1
     998:	28 ec       	ldi	r18, 0xC8	; 200
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	f9 01       	movw	r30, r18
     99e:	31 97       	sbiw	r30, 0x01	; 1
     9a0:	f1 f7       	brne	.-4      	; 0x99e <InitLMK+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9a2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9a4:	d9 f7       	brne	.-10     	; 0x99c <InitLMK+0xa>
    // Enable LMK01000
    LmkGoeSet();
    _delay_ms(50);

    LMK0X0XX_WRITE(0x80000100);
     9a6:	80 e8       	ldi	r24, 0x80	; 128
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	41 e0       	ldi	r20, 0x01	; 1
     9ac:	20 e0       	ldi	r18, 0x00	; 0
}
     9ae:	75 cd       	rjmp	.-1302   	; 0x49a <write_reg_LMK0X0XX>

000009b0 <SetLMX2531>:
#endif
}


uint8_t SetLMX2531(uint8_t tuneOnly)
{
     9b0:	2f 92       	push	r2
     9b2:	3f 92       	push	r3
     9b4:	4f 92       	push	r4
     9b6:	5f 92       	push	r5
     9b8:	6f 92       	push	r6
     9ba:	7f 92       	push	r7
     9bc:	8f 92       	push	r8
     9be:	9f 92       	push	r9
     9c0:	af 92       	push	r10
     9c2:	bf 92       	push	r11
     9c4:	cf 92       	push	r12
     9c6:	df 92       	push	r13
     9c8:	ef 92       	push	r14
     9ca:	ff 92       	push	r15
     9cc:	0f 93       	push	r16
     9ce:	1f 93       	push	r17
     9d0:	df 93       	push	r29
     9d2:	cf 93       	push	r28
     9d4:	cd b7       	in	r28, 0x3d	; 61
     9d6:	de b7       	in	r29, 0x3e	; 62
     9d8:	2d 97       	sbiw	r28, 0x0d	; 13
     9da:	0f b6       	in	r0, 0x3f	; 63
     9dc:	f8 94       	cli
     9de:	de bf       	out	0x3e, r29	; 62
     9e0:	0f be       	out	0x3f, r0	; 63
     9e2:	cd bf       	out	0x3d, r28	; 61
     9e4:	8d 83       	std	Y+5, r24	; 0x05
    uint32_t num;

    uint8_t r = 1;
    if (Fosc > 14000000ul)
     9e6:	20 90 25 01 	lds	r2, 0x0125
     9ea:	30 90 26 01 	lds	r3, 0x0126
     9ee:	40 90 27 01 	lds	r4, 0x0127
     9f2:	50 90 28 01 	lds	r5, 0x0128
     9f6:	21 e8       	ldi	r18, 0x81	; 129
     9f8:	22 16       	cp	r2, r18
     9fa:	2f e9       	ldi	r18, 0x9F	; 159
     9fc:	32 06       	cpc	r3, r18
     9fe:	25 ed       	ldi	r18, 0xD5	; 213
     a00:	42 06       	cpc	r4, r18
     a02:	20 e0       	ldi	r18, 0x00	; 0
     a04:	52 06       	cpc	r5, r18
     a06:	18 f0       	brcs	.+6      	; 0xa0e <SetLMX2531+0x5e>
     a08:	32 e0       	ldi	r19, 0x02	; 2
     a0a:	a3 2e       	mov	r10, r19
     a0c:	02 c0       	rjmp	.+4      	; 0xa12 <SetLMX2531+0x62>
     a0e:	aa 24       	eor	r10, r10
     a10:	a3 94       	inc	r10
       r = 2;

    uint16_t vco;
    //uint16_t foutmhz = Fout / 1000000;
    uint16_t foutmhz = Fout / 100000;
     a12:	c0 90 29 01 	lds	r12, 0x0129
     a16:	d0 90 2a 01 	lds	r13, 0x012A
     a1a:	e0 90 2b 01 	lds	r14, 0x012B
     a1e:	f0 90 2c 01 	lds	r15, 0x012C
     a22:	c7 01       	movw	r24, r14
     a24:	b6 01       	movw	r22, r12
     a26:	20 ea       	ldi	r18, 0xA0	; 160
     a28:	36 e8       	ldi	r19, 0x86	; 134
     a2a:	41 e0       	ldi	r20, 0x01	; 1
     a2c:	50 e0       	ldi	r21, 0x00	; 0
     a2e:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__udivmodsi4>
     a32:	89 01       	movw	r16, r18
     a34:	9a 01       	movw	r18, r20

    if (foutmhz == 0)
     a36:	01 15       	cp	r16, r1
     a38:	11 05       	cpc	r17, r1
     a3a:	09 f4       	brne	.+2      	; 0xa3e <SetLMX2531+0x8e>
     a3c:	96 c1       	rjmp	.+812    	; 0xd6a <SetLMX2531+0x3ba>

    uint16_t i;
#ifdef VCO_FIXED
    if (VCO_MAX > DIVIDER_MAX_FREQ)
    {
        i = (((uint16_t)10*(VCO_MIN + VCO_MAX) / 8) / (foutmhz)) * 4;
     a3e:	86 e6       	ldi	r24, 0x66	; 102
     a40:	94 e1       	ldi	r25, 0x14	; 20
     a42:	b8 01       	movw	r22, r16
     a44:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <__udivmodhi4>
     a48:	cb 01       	movw	r24, r22
     a4a:	88 0f       	add	r24, r24
     a4c:	99 1f       	adc	r25, r25
     a4e:	88 0f       	add	r24, r24
     a50:	99 1f       	adc	r25, r25
     a52:	9d 87       	std	Y+13, r25	; 0x0d
     a54:	8c 87       	std	Y+12, r24	; 0x0c
        vco = (i + 4) * (foutmhz);
     a56:	fc 01       	movw	r30, r24
     a58:	34 96       	adiw	r30, 0x04	; 4
     a5a:	cf 01       	movw	r24, r30
     a5c:	b8 01       	movw	r22, r16
     a5e:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <__mulhi3>
        if (vco > 10*VCO_MAX)
     a62:	a8 e5       	ldi	r26, 0x58	; 88
     a64:	85 3d       	cpi	r24, 0xD5	; 213
     a66:	9a 07       	cpc	r25, r26
     a68:	18 f4       	brcc	.+6      	; 0xa70 <SetLMX2531+0xc0>
     a6a:	fd 87       	std	Y+13, r31	; 0x0d
     a6c:	ec 87       	std	Y+12, r30	; 0x0c
     a6e:	05 c0       	rjmp	.+10     	; 0xa7a <SetLMX2531+0xca>
            vco = i * (foutmhz);
     a70:	8c 85       	ldd	r24, Y+12	; 0x0c
     a72:	9d 85       	ldd	r25, Y+13	; 0x0d
     a74:	b8 01       	movw	r22, r16
     a76:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <__mulhi3>
    else
      i += 1<<kk;

#endif

    if (vco < 10*VCO_MIN)
     a7a:	80 56       	subi	r24, 0x60	; 96
     a7c:	9a 44       	sbci	r25, 0x4A	; 74
     a7e:	08 f4       	brcc	.+2      	; 0xa82 <SetLMX2531+0xd2>
     a80:	74 c1       	rjmp	.+744    	; 0xd6a <SetLMX2531+0x3ba>
    {
        return 0;
    }


    uint16_t n = (uint32_t)(i*Fout) / (Fosc / r);
     a82:	ec 85       	ldd	r30, Y+12	; 0x0c
     a84:	fd 85       	ldd	r31, Y+13	; 0x0d
     a86:	bf 01       	movw	r22, r30
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	a7 01       	movw	r20, r14
     a8e:	96 01       	movw	r18, r12
     a90:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__mulsi3>
     a94:	7b 01       	movw	r14, r22
     a96:	8c 01       	movw	r16, r24
     a98:	6e 83       	std	Y+6, r22	; 0x06
     a9a:	ff 82       	std	Y+7, r15	; 0x07
     a9c:	08 87       	std	Y+8, r16	; 0x08
     a9e:	19 87       	std	Y+9, r17	; 0x09
     aa0:	8a 2d       	mov	r24, r10
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	89 83       	std	Y+1, r24	; 0x01
     aaa:	9a 83       	std	Y+2, r25	; 0x02
     aac:	ab 83       	std	Y+3, r26	; 0x03
     aae:	bc 83       	std	Y+4, r27	; 0x04
     ab0:	c2 01       	movw	r24, r4
     ab2:	b1 01       	movw	r22, r2
     ab4:	29 81       	ldd	r18, Y+1	; 0x01
     ab6:	3a 81       	ldd	r19, Y+2	; 0x02
     ab8:	4b 81       	ldd	r20, Y+3	; 0x03
     aba:	5c 81       	ldd	r21, Y+4	; 0x04
     abc:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__udivmodsi4>
     ac0:	59 01       	movw	r10, r18
     ac2:	4a 87       	std	Y+10, r20	; 0x0a
     ac4:	5b 87       	std	Y+11, r21	; 0x0b
    uint32_t rem_n = ((uint32_t)(i*Fout))  % (Fosc / r);
     ac6:	b7 01       	movw	r22, r14
     ac8:	c8 01       	movw	r24, r16
     aca:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__udivmodsi4>
     ace:	ac 01       	movw	r20, r24
     ad0:	cb 01       	movw	r24, r22
     ad2:	da 01       	movw	r26, r20
     ad4:	7c 01       	movw	r14, r24
     ad6:	8d 01       	movw	r16, r26
     ad8:	dd 24       	eor	r13, r13
     ada:	13 c0       	rjmp	.+38     	; 0xb02 <SetLMX2531+0x152>
            rem1 <<= 1;
            num <<= 1;
        }

        dev1 = (rem1) / ((Fosc / r));
        rem1 = (rem1) % ((Fosc / r));
     adc:	c8 01       	movw	r24, r16
     ade:	b7 01       	movw	r22, r14
     ae0:	95 01       	movw	r18, r10
     ae2:	4a 85       	ldd	r20, Y+10	; 0x0a
     ae4:	5b 85       	ldd	r21, Y+11	; 0x0b
     ae6:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__udivmodsi4>
     aea:	9b 01       	movw	r18, r22
     aec:	ac 01       	movw	r20, r24
    uint8_t t;
    for (t = 0; t <= den_bit; t++)
    {
        if (t != 0)
        {
            rem1 <<= 1;
     aee:	79 01       	movw	r14, r18
     af0:	8a 01       	movw	r16, r20
     af2:	ee 0c       	add	r14, r14
     af4:	ff 1c       	adc	r15, r15
     af6:	00 1f       	adc	r16, r16
     af8:	11 1f       	adc	r17, r17
            num <<= 1;
     afa:	66 0c       	add	r6, r6
     afc:	77 1c       	adc	r7, r7
     afe:	88 1c       	adc	r8, r8
     b00:	99 1c       	adc	r9, r9
        }

        dev1 = (rem1) / ((Fosc / r));
     b02:	c8 01       	movw	r24, r16
     b04:	b7 01       	movw	r22, r14
     b06:	95 01       	movw	r18, r10
     b08:	4a 85       	ldd	r20, Y+10	; 0x0a
     b0a:	5b 85       	ldd	r21, Y+11	; 0x0b
     b0c:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__udivmodsi4>
     b10:	c9 01       	movw	r24, r18
     b12:	da 01       	movw	r26, r20
        rem1 = (rem1) % ((Fosc / r));

        if (t == 0)
     b14:	dd 20       	and	r13, r13
     b16:	19 f4       	brne	.+6      	; 0xb1e <SetLMX2531+0x16e>
     b18:	3c 01       	movw	r6, r24
     b1a:	4d 01       	movw	r8, r26
     b1c:	0c c0       	rjmp	.+24     	; 0xb36 <SetLMX2531+0x186>
            num = dev1;
        else if (dev1 & 1)
     b1e:	81 70       	andi	r24, 0x01	; 1
     b20:	90 70       	andi	r25, 0x00	; 0
     b22:	89 2b       	or	r24, r25
     b24:	41 f0       	breq	.+16     	; 0xb36 <SetLMX2531+0x186>
            num |= 1;
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	68 2a       	or	r6, r24
     b30:	79 2a       	or	r7, r25
     b32:	8a 2a       	or	r8, r26
     b34:	9b 2a       	or	r9, r27
#else
    {
    uint32_t dev1;
    uint32_t rem1 = rem_n;
    uint8_t t;
    for (t = 0; t <= den_bit; t++)
     b36:	d3 94       	inc	r13
     b38:	96 e1       	ldi	r25, 0x16	; 22
     b3a:	d9 16       	cp	r13, r25
     b3c:	79 f6       	brne	.-98     	; 0xadc <SetLMX2531+0x12c>
#ifdef VCO_FIXED
    if (VCO_MAX > DIVIDER_MAX_FREQ)
#else
    if (kk == 2)
#endif
        i /= 2;
     b3e:	ac 85       	ldd	r26, Y+12	; 0x0c
     b40:	bd 85       	ldd	r27, Y+13	; 0x0d
     b42:	b6 95       	lsr	r27
     b44:	a7 95       	ror	r26
     b46:	bd 87       	std	Y+13, r27	; 0x0d
     b48:	ac 87       	std	Y+12, r26	; 0x0c

    if (i > 510)
     b4a:	af 5f       	subi	r26, 0xFF	; 255
     b4c:	b1 40       	sbci	r27, 0x01	; 1
     b4e:	08 f0       	brcs	.+2      	; 0xb52 <SetLMX2531+0x1a2>
     b50:	0c c1       	rjmp	.+536    	; 0xd6a <SetLMX2531+0x3ba>
        return 0;

    if (!tuneOnly)
     b52:	fd 81       	ldd	r31, Y+5	; 0x05
     b54:	ff 23       	and	r31, r31
     b56:	09 f0       	breq	.+2      	; 0xb5a <SetLMX2531+0x1aa>
     b58:	78 c0       	rjmp	.+240    	; 0xc4a <SetLMX2531+0x29a>
    {
        LMX2531_WRITE( MAKE_R8(LOCKMODE_LINEAR, Fosc/1000) );
     b5a:	20 e0       	ldi	r18, 0x00	; 0
     b5c:	22 16       	cp	r2, r18
     b5e:	2a e5       	ldi	r18, 0x5A	; 90
     b60:	32 06       	cpc	r3, r18
     b62:	22 e6       	ldi	r18, 0x62	; 98
     b64:	42 06       	cpc	r4, r18
     b66:	22 e0       	ldi	r18, 0x02	; 2
     b68:	52 06       	cpc	r5, r18
     b6a:	10 f0       	brcs	.+4      	; 0xb70 <SetLMX2531+0x1c0>
     b6c:	48 e1       	ldi	r20, 0x18	; 24
     b6e:	01 c0       	rjmp	.+2      	; 0xb72 <SetLMX2531+0x1c2>
     b70:	48 e0       	ldi	r20, 0x08	; 8
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	60 e8       	ldi	r22, 0x80	; 128
     b76:	a3 dc       	rcall	.-1722   	; 0x4be <write_reg_LMX2531>
        //LMX2531_WRITE( MAKE_R7(VCO_Kbit, Fosc/1000) );
        SetLMX2531_R7(Fosc/1000);
     b78:	60 91 25 01 	lds	r22, 0x0125
     b7c:	70 91 26 01 	lds	r23, 0x0126
     b80:	80 91 27 01 	lds	r24, 0x0127
     b84:	90 91 28 01 	lds	r25, 0x0128
     b88:	28 ee       	ldi	r18, 0xE8	; 232
     b8a:	33 e0       	ldi	r19, 0x03	; 3
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	50 e0       	ldi	r21, 0x00	; 0
     b90:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__udivmodsi4>
     b94:	69 01       	movw	r12, r18
     b96:	7a 01       	movw	r14, r20
     b98:	89 01       	movw	r16, r18

inline static void SetLMX2531_R7(uint16_t fosc)
{
#ifdef UNROLL_MACROSS_LMX2531

  uint16_t xtlman = (0x3ffc & ((((uint32_t)fosc)<<6)/(VCO_Kbit))) ;
     b9a:	b9 01       	movw	r22, r18
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	f6 e0       	ldi	r31, 0x06	; 6
     ba2:	66 0f       	add	r22, r22
     ba4:	77 1f       	adc	r23, r23
     ba6:	88 1f       	adc	r24, r24
     ba8:	99 1f       	adc	r25, r25
     baa:	fa 95       	dec	r31
     bac:	d1 f7       	brne	.-12     	; 0xba2 <SetLMX2531+0x1f2>
     bae:	24 e9       	ldi	r18, 0x94	; 148
     bb0:	31 e1       	ldi	r19, 0x11	; 17
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__udivmodsi4>
     bba:	2c 7f       	andi	r18, 0xFC	; 252
     bbc:	3f 73       	andi	r19, 0x3F	; 63
  uint8_t xdiv = ( (fosc) < 40000 ? (((fosc) / 20000)+1) : 3);
     bbe:	00 54       	subi	r16, 0x40	; 64
     bc0:	1c 49       	sbci	r17, 0x9C	; 156
     bc2:	10 f0       	brcs	.+4      	; 0xbc8 <SetLMX2531+0x218>
     bc4:	63 e0       	ldi	r22, 0x03	; 3
     bc6:	06 c0       	rjmp	.+12     	; 0xbd4 <SetLMX2531+0x224>
     bc8:	c6 01       	movw	r24, r12
     bca:	60 e2       	ldi	r22, 0x20	; 32
     bcc:	7e e4       	ldi	r23, 0x4E	; 78
     bce:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <__udivmodhi4>
     bd2:	6f 5f       	subi	r22, 0xFF	; 255


  write_reg_LMX2531(xtlman >> 8, (uint8_t)xtlman | xdiv, 7);
     bd4:	62 2b       	or	r22, r18
     bd6:	83 2f       	mov	r24, r19
     bd8:	47 e0       	ldi	r20, 0x07	; 7
     bda:	71 dc       	rcall	.-1822   	; 0x4be <write_reg_LMX2531>
    {
        LMX2531_WRITE( MAKE_R8(LOCKMODE_LINEAR, Fosc/1000) );
        //LMX2531_WRITE( MAKE_R7(VCO_Kbit, Fosc/1000) );
        SetLMX2531_R7(Fosc/1000);

        LMX2531_WRITE( MAKE_R6(XTLSEL_MANUAL, VCO_ACI_SEL_M1, 1, R_40, R_10, R_40, R_10, C3_C4_100_100) );
     bdc:	88 e4       	ldi	r24, 0x48	; 72
     bde:	66 ee       	ldi	r22, 0xE6	; 230
     be0:	46 e5       	ldi	r20, 0x56	; 86
     be2:	6d dc       	rcall	.-1830   	; 0x4be <write_reg_LMX2531>
        //LMX2531_WRITE( MAKE_R6(CALC_XTSEL(Fosc/1000000), VCO_ACI_SEL_M1, 1, R_40, R_10, R_40, R_10, C3_C4_100_100) );
        LMX2531_WRITE( MAKE_R4(ICP_1X, TOC_DISABLED) );
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	60 e0       	ldi	r22, 0x00	; 0
     be8:	44 e0       	ldi	r20, 0x04	; 4
     bea:	69 dc       	rcall	.-1838   	; 0x4be <write_reg_LMX2531>
#ifdef DEBUG_REGS
        LMX2531_WRITE(tmp_r3 = MAKE_R3((VCO_MAX > DIVIDER_MAX_FREQ), FDM_FRACTIONAL, DITHER_STRONG, FRAC_ORDER_4, FOLD_DISABLED, den >> 12) );
     bec:	83 e0       	ldi	r24, 0x03	; 3
     bee:	90 e2       	ldi	r25, 0x20	; 32
     bf0:	a0 ee       	ldi	r26, 0xE0	; 224
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	80 93 97 01 	sts	0x0197, r24
     bf8:	90 93 98 01 	sts	0x0198, r25
     bfc:	a0 93 99 01 	sts	0x0199, r26
     c00:	b0 93 9a 01 	sts	0x019A, r27
     c04:	80 ee       	ldi	r24, 0xE0	; 224
     c06:	60 e2       	ldi	r22, 0x20	; 32
     c08:	43 e0       	ldi	r20, 0x03	; 3
     c0a:	59 dc       	rcall	.-1870   	; 0x4be <write_reg_LMX2531>
        LMX2531_WRITE(tmp_r2 = MAKE_R2(den & 0xFFF, r) );
     c0c:	29 81       	ldd	r18, Y+1	; 0x01
     c0e:	3a 81       	ldd	r19, Y+2	; 0x02
     c10:	4b 81       	ldd	r20, Y+3	; 0x03
     c12:	5c 81       	ldd	r21, Y+4	; 0x04
     c14:	e4 e0       	ldi	r30, 0x04	; 4
     c16:	22 0f       	add	r18, r18
     c18:	33 1f       	adc	r19, r19
     c1a:	44 1f       	adc	r20, r20
     c1c:	55 1f       	adc	r21, r21
     c1e:	ea 95       	dec	r30
     c20:	d1 f7       	brne	.-12     	; 0xc16 <SetLMX2531+0x266>
     c22:	22 60       	ori	r18, 0x02	; 2
     c24:	40 64       	ori	r20, 0x40	; 64
     c26:	20 93 a0 01 	sts	0x01A0, r18
     c2a:	30 93 a1 01 	sts	0x01A1, r19
     c2e:	40 93 a2 01 	sts	0x01A2, r20
     c32:	50 93 a3 01 	sts	0x01A3, r21
     c36:	ca 01       	movw	r24, r20
     c38:	aa 27       	eor	r26, r26
     c3a:	bb 27       	eor	r27, r27
     c3c:	e3 2e       	mov	r14, r19
     c3e:	f4 2e       	mov	r15, r20
     c40:	05 2f       	mov	r16, r21
     c42:	11 27       	eor	r17, r17
     c44:	6e 2d       	mov	r22, r14
     c46:	42 2f       	mov	r20, r18
     c48:	3a dc       	rcall	.-1932   	; 0x4be <write_reg_LMX2531>
    {
        return 0;
    }


    uint16_t n = (uint32_t)(i*Fout) / (Fosc / r);
     c4a:	6e 81       	ldd	r22, Y+6	; 0x06
     c4c:	7f 81       	ldd	r23, Y+7	; 0x07
     c4e:	88 85       	ldd	r24, Y+8	; 0x08
     c50:	99 85       	ldd	r25, Y+9	; 0x09
     c52:	95 01       	movw	r18, r10
     c54:	4a 85       	ldd	r20, Y+10	; 0x0a
     c56:	5b 85       	ldd	r21, Y+11	; 0x0b
     c58:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__udivmodsi4>
     c5c:	59 01       	movw	r10, r18
     c5e:	6a 01       	movw	r12, r20
        LMX2531_WRITE( MAKE_R4(ICP_1X, TOC_DISABLED) );
#ifdef DEBUG_REGS
        LMX2531_WRITE(tmp_r3 = MAKE_R3((VCO_MAX > DIVIDER_MAX_FREQ), FDM_FRACTIONAL, DITHER_STRONG, FRAC_ORDER_4, FOLD_DISABLED, den >> 12) );
        LMX2531_WRITE(tmp_r2 = MAKE_R2(den & 0xFFF, r) );
    }
    LMX2531_WRITE(tmp_r1 = MAKE_R1(ICP_1X, n >> 8, num >> 12) );
     c60:	a4 01       	movw	r20, r8
     c62:	93 01       	movw	r18, r6
     c64:	9c e0       	ldi	r25, 0x0C	; 12
     c66:	56 95       	lsr	r21
     c68:	47 95       	ror	r20
     c6a:	37 95       	ror	r19
     c6c:	27 95       	ror	r18
     c6e:	9a 95       	dec	r25
     c70:	d1 f7       	brne	.-12     	; 0xc66 <SetLMX2531+0x2b6>
     c72:	8b 2d       	mov	r24, r11
     c74:	99 27       	eor	r25, r25
     c76:	80 68       	ori	r24, 0x80	; 128
     c78:	a0 e0       	ldi	r26, 0x00	; 0
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	0a e0       	ldi	r16, 0x0A	; 10
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	aa 1f       	adc	r26, r26
     c84:	bb 1f       	adc	r27, r27
     c86:	0a 95       	dec	r16
     c88:	d1 f7       	brne	.-12     	; 0xc7e <SetLMX2531+0x2ce>
     c8a:	28 2b       	or	r18, r24
     c8c:	39 2b       	or	r19, r25
     c8e:	4a 2b       	or	r20, r26
     c90:	5b 2b       	or	r21, r27
     c92:	14 e0       	ldi	r17, 0x04	; 4
     c94:	22 0f       	add	r18, r18
     c96:	33 1f       	adc	r19, r19
     c98:	44 1f       	adc	r20, r20
     c9a:	55 1f       	adc	r21, r21
     c9c:	1a 95       	dec	r17
     c9e:	d1 f7       	brne	.-12     	; 0xc94 <SetLMX2531+0x2e4>
     ca0:	21 60       	ori	r18, 0x01	; 1
     ca2:	20 93 b0 01 	sts	0x01B0, r18
     ca6:	30 93 b1 01 	sts	0x01B1, r19
     caa:	40 93 b2 01 	sts	0x01B2, r20
     cae:	50 93 b3 01 	sts	0x01B3, r21
     cb2:	ca 01       	movw	r24, r20
     cb4:	aa 27       	eor	r26, r26
     cb6:	bb 27       	eor	r27, r27
     cb8:	e3 2e       	mov	r14, r19
     cba:	f4 2e       	mov	r15, r20
     cbc:	05 2f       	mov	r16, r21
     cbe:	11 27       	eor	r17, r17
     cc0:	6e 2d       	mov	r22, r14
     cc2:	42 2f       	mov	r20, r18
     cc4:	fc db       	rcall	.-2056   	; 0x4be <write_reg_LMX2531>
    LMX2531_WRITE(tmp_r0 = MAKE_R0(n & 0xFF, num & 0xFFF) );
     cc6:	a4 01       	movw	r20, r8
     cc8:	93 01       	movw	r18, r6
     cca:	3f 70       	andi	r19, 0x0F	; 15
     ccc:	40 70       	andi	r20, 0x00	; 0
     cce:	50 70       	andi	r21, 0x00	; 0
     cd0:	c5 01       	movw	r24, r10
     cd2:	a0 e0       	ldi	r26, 0x00	; 0
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	90 70       	andi	r25, 0x00	; 0
     cd8:	a0 70       	andi	r26, 0x00	; 0
     cda:	b0 70       	andi	r27, 0x00	; 0
     cdc:	fc e0       	ldi	r31, 0x0C	; 12
     cde:	88 0f       	add	r24, r24
     ce0:	99 1f       	adc	r25, r25
     ce2:	aa 1f       	adc	r26, r26
     ce4:	bb 1f       	adc	r27, r27
     ce6:	fa 95       	dec	r31
     ce8:	d1 f7       	brne	.-12     	; 0xcde <SetLMX2531+0x32e>
     cea:	28 2b       	or	r18, r24
     cec:	39 2b       	or	r19, r25
     cee:	4a 2b       	or	r20, r26
     cf0:	5b 2b       	or	r21, r27
     cf2:	e4 e0       	ldi	r30, 0x04	; 4
     cf4:	22 0f       	add	r18, r18
     cf6:	33 1f       	adc	r19, r19
     cf8:	44 1f       	adc	r20, r20
     cfa:	55 1f       	adc	r21, r21
     cfc:	ea 95       	dec	r30
     cfe:	d1 f7       	brne	.-12     	; 0xcf4 <SetLMX2531+0x344>
     d00:	20 93 a6 01 	sts	0x01A6, r18
     d04:	30 93 a7 01 	sts	0x01A7, r19
     d08:	40 93 a8 01 	sts	0x01A8, r20
     d0c:	50 93 a9 01 	sts	0x01A9, r21
     d10:	ca 01       	movw	r24, r20
     d12:	aa 27       	eor	r26, r26
     d14:	bb 27       	eor	r27, r27
     d16:	e3 2e       	mov	r14, r19
     d18:	f4 2e       	mov	r15, r20
     d1a:	05 2f       	mov	r16, r21
     d1c:	11 27       	eor	r17, r17
     d1e:	6e 2d       	mov	r22, r14
     d20:	42 2f       	mov	r20, r18
     d22:	cd db       	rcall	.-2150   	; 0x4be <write_reg_LMX2531>
    //LMX2531_WRITE( MAKE_R0(n & 0xFF, num & 0xFFF) );

    SetLMX2531_R1_R0(num, n);
#endif

    LMK_devider = i/2;
     d24:	0c 85       	ldd	r16, Y+12	; 0x0c
     d26:	1d 85       	ldd	r17, Y+13	; 0x0d
     d28:	16 95       	lsr	r17
     d2a:	07 95       	ror	r16
     d2c:	00 93 b4 01 	sts	0x01B4, r16

#ifdef PRESENT_GPS
    GpsSync_divider = Fout / GPSSYNC_MAX_FREQ;
     d30:	60 91 29 01 	lds	r22, 0x0129
     d34:	70 91 2a 01 	lds	r23, 0x012A
     d38:	80 91 2b 01 	lds	r24, 0x012B
     d3c:	90 91 2c 01 	lds	r25, 0x012C
     d40:	20 ec       	ldi	r18, 0xC0	; 192
     d42:	36 ec       	ldi	r19, 0xC6	; 198
     d44:	4d e2       	ldi	r20, 0x2D	; 45
     d46:	50 e0       	ldi	r21, 0x00	; 0
     d48:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__udivmodsi4>
     d4c:	20 93 2e 01 	sts	0x012E, r18
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	80 2f       	mov	r24, r16
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	62 2f       	mov	r22, r18
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <__mulhi3>
     d5e:	8f 3f       	cpi	r24, 0xFF	; 255
     d60:	91 05       	cpc	r25, r1
     d62:	09 f0       	breq	.+2      	; 0xd66 <SetLMX2531+0x3b6>
     d64:	18 f4       	brcc	.+6      	; 0xd6c <SetLMX2531+0x3bc>
     d66:	31 e0       	ldi	r19, 0x01	; 1
     d68:	01 c0       	rjmp	.+2      	; 0xd6c <SetLMX2531+0x3bc>
     d6a:	30 e0       	ldi	r19, 0x00	; 0
    if (tmp > 255)
        return 0;
#endif

    return 1;
}
     d6c:	83 2f       	mov	r24, r19
     d6e:	2d 96       	adiw	r28, 0x0d	; 13
     d70:	0f b6       	in	r0, 0x3f	; 63
     d72:	f8 94       	cli
     d74:	de bf       	out	0x3e, r29	; 62
     d76:	0f be       	out	0x3f, r0	; 63
     d78:	cd bf       	out	0x3d, r28	; 61
     d7a:	cf 91       	pop	r28
     d7c:	df 91       	pop	r29
     d7e:	1f 91       	pop	r17
     d80:	0f 91       	pop	r16
     d82:	ff 90       	pop	r15
     d84:	ef 90       	pop	r14
     d86:	df 90       	pop	r13
     d88:	cf 90       	pop	r12
     d8a:	bf 90       	pop	r11
     d8c:	af 90       	pop	r10
     d8e:	9f 90       	pop	r9
     d90:	8f 90       	pop	r8
     d92:	7f 90       	pop	r7
     d94:	6f 90       	pop	r6
     d96:	5f 90       	pop	r5
     d98:	4f 90       	pop	r4
     d9a:	3f 90       	pop	r3
     d9c:	2f 90       	pop	r2
     d9e:	08 95       	ret

00000da0 <TrimClock>:
        Fosc = (uint32_t)((int32_t)Fosc + (delta*(int32_t)Fosc) / (int32_t)Fout);
    }
}

void TrimClock(void)
{
     da0:	80 91 8b 01 	lds	r24, 0x018B
     da4:	90 91 8c 01 	lds	r25, 0x018C
     da8:	a0 91 8d 01 	lds	r26, 0x018D
     dac:	b0 91 8e 01 	lds	r27, 0x018E
     db0:	20 91 9b 01 	lds	r18, 0x019B
     db4:	30 91 9c 01 	lds	r19, 0x019C
     db8:	40 91 9d 01 	lds	r20, 0x019D
     dbc:	50 91 9e 01 	lds	r21, 0x019E
     dc0:	82 1b       	sub	r24, r18
     dc2:	93 0b       	sbc	r25, r19
     dc4:	a4 0b       	sbc	r26, r20
     dc6:	b5 0b       	sbc	r27, r21
     dc8:	85 5f       	subi	r24, 0xF5	; 245
     dca:	91 40       	sbci	r25, 0x01	; 1
     dcc:	a0 40       	sbci	r26, 0x00	; 0
     dce:	b0 40       	sbci	r27, 0x00	; 0
     dd0:	08 f4       	brcc	.+2      	; 0xdd4 <TrimClock+0x34>
     dd2:	58 c0       	rjmp	.+176    	; 0xe84 <TrimClock+0xe4>
     dd4:	80 91 a4 01 	lds	r24, 0x01A4
     dd8:	90 91 a5 01 	lds	r25, 0x01A5
     ddc:	81 35       	cpi	r24, 0x51	; 81
     dde:	91 05       	cpc	r25, r1
     de0:	08 f4       	brcc	.+2      	; 0xde4 <TrimClock+0x44>
     de2:	50 c0       	rjmp	.+160    	; 0xe84 <TrimClock+0xe4>
     de4:	80 91 b5 01 	lds	r24, 0x01B5
     de8:	90 91 b6 01 	lds	r25, 0x01B6
     dec:	a0 91 b7 01 	lds	r26, 0x01B7
     df0:	b0 91 b8 01 	lds	r27, 0x01B8
     df4:	4f 97       	sbiw	r24, 0x1f	; 31
     df6:	a1 05       	cpc	r26, r1
     df8:	b1 05       	cpc	r27, r1
     dfa:	08 f0       	brcs	.+2      	; 0xdfe <TrimClock+0x5e>
     dfc:	43 c0       	rjmp	.+134    	; 0xe84 <TrimClock+0xe4>
     dfe:	80 91 af 01 	lds	r24, 0x01AF
     e02:	88 23       	and	r24, r24
     e04:	09 f0       	breq	.+2      	; 0xe08 <TrimClock+0x68>
     e06:	3e c0       	rjmp	.+124    	; 0xe84 <TrimClock+0xe4>
    // Check the mesuarements are stable
    if ((CounterHHValue - LastAutoUpd > 500) && (Count1PPS > 80) && (ddd < 31) && (PPS_skipped == 0))
    {
        int32_t delta = (int)(FilteredVal/FILTER_EXP_ALPHA) - (int)Fout ;
        uint32_t pdelta = (delta > 0) ? delta : -delta;
        if (pdelta > 2)
     e08:	80 91 93 01 	lds	r24, 0x0193
     e0c:	90 91 94 01 	lds	r25, 0x0194
     e10:	a0 91 95 01 	lds	r26, 0x0195
     e14:	b0 91 96 01 	lds	r27, 0x0196
     e18:	45 e0       	ldi	r20, 0x05	; 5
     e1a:	b6 95       	lsr	r27
     e1c:	a7 95       	ror	r26
     e1e:	97 95       	ror	r25
     e20:	87 95       	ror	r24
     e22:	4a 95       	dec	r20
     e24:	d1 f7       	brne	.-12     	; 0xe1a <TrimClock+0x7a>
     e26:	20 91 29 01 	lds	r18, 0x0129
     e2a:	30 91 2a 01 	lds	r19, 0x012A
     e2e:	82 1b       	sub	r24, r18
     e30:	93 0b       	sbc	r25, r19
     e32:	9c 01       	movw	r18, r24
     e34:	44 27       	eor	r20, r20
     e36:	37 fd       	sbrc	r19, 7
     e38:	40 95       	com	r20
     e3a:	54 2f       	mov	r21, r20
     e3c:	57 ff       	sbrs	r21, 7
     e3e:	07 c0       	rjmp	.+14     	; 0xe4e <TrimClock+0xae>
     e40:	50 95       	com	r21
     e42:	40 95       	com	r20
     e44:	30 95       	com	r19
     e46:	21 95       	neg	r18
     e48:	3f 4f       	sbci	r19, 0xFF	; 255
     e4a:	4f 4f       	sbci	r20, 0xFF	; 255
     e4c:	5f 4f       	sbci	r21, 0xFF	; 255
     e4e:	23 30       	cpi	r18, 0x03	; 3
     e50:	31 05       	cpc	r19, r1
     e52:	41 05       	cpc	r20, r1
     e54:	51 05       	cpc	r21, r1
     e56:	b0 f0       	brcs	.+44     	; 0xe84 <TrimClock+0xe4>
        {
            UpdateOSCValue();
     e58:	91 dc       	rcall	.-1758   	; 0x77c <UpdateOSCValue>

            PPS_skipped = RESET_OCP_COUNTER;
     e5a:	80 e8       	ldi	r24, 0x80	; 128
     e5c:	80 93 af 01 	sts	0x01AF, r24

            LastAutoUpd = CounterHHValue;
     e60:	80 91 8b 01 	lds	r24, 0x018B
     e64:	90 91 8c 01 	lds	r25, 0x018C
     e68:	a0 91 8d 01 	lds	r26, 0x018D
     e6c:	b0 91 8e 01 	lds	r27, 0x018E
     e70:	80 93 9b 01 	sts	0x019B, r24
     e74:	90 93 9c 01 	sts	0x019C, r25
     e78:	a0 93 9d 01 	sts	0x019D, r26
     e7c:	b0 93 9e 01 	sts	0x019E, r27

            SetLMX2531(1);
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	96 cd       	rjmp	.-1236   	; 0x9b0 <SetLMX2531>
     e84:	08 95       	ret

00000e86 <TamerControlAux>:
//	}
	
}

void TamerControlAux(void)
{
     e86:	80 91 9f 01 	lds	r24, 0x019F
     e8a:	88 23       	and	r24, r24
     e8c:	09 f0       	breq	.+2      	; 0xe90 <TamerControlAux+0xa>
#ifdef PRESENT_GPS
    if (AutoUpdateGps)
        TrimClock();
     e8e:	88 cf       	rjmp	.-240    	; 0xda0 <TrimClock>
     e90:	08 95       	ret

00000e92 <InitLMX2531>:
#endif
}

void InitLMX2531(void)
{
     e92:	5d 9a       	sbi	0x0b, 5	; 11
     e94:	84 ef       	ldi	r24, 0xF4	; 244
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	28 ec       	ldi	r18, 0xC8	; 200
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	f9 01       	movw	r30, r18
     e9e:	31 97       	sbiw	r30, 0x01	; 1
     ea0:	f1 f7       	brne	.-4      	; 0xe9e <InitLMX2531+0xc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ea4:	d9 f7       	brne	.-10     	; 0xe9c <InitLMX2531+0xa>
    // Enable LMX2531
    LmxCeSet();

    _delay_ms(50);

    LMX2531_WRITE(LMX2531_R5_INIT1);
     ea6:	84 e8       	ldi	r24, 0x84	; 132
     ea8:	60 e0       	ldi	r22, 0x00	; 0
     eaa:	45 e0       	ldi	r20, 0x05	; 5
     eac:	08 db       	rcall	.-2544   	; 0x4be <write_reg_LMX2531>
    LMX2531_WRITE(LMX2531_R5_INIT2);
     eae:	80 e8       	ldi	r24, 0x80	; 128
     eb0:	60 e0       	ldi	r22, 0x00	; 0
     eb2:	45 e0       	ldi	r20, 0x05	; 5
     eb4:	04 db       	rcall	.-2552   	; 0x4be <write_reg_LMX2531>
    LMX2531_WRITE(LMX2531_R5_INIT3);
     eb6:	80 e8       	ldi	r24, 0x80	; 128
     eb8:	67 e0       	ldi	r22, 0x07	; 7
     eba:	45 ef       	ldi	r20, 0xF5	; 245
     ebc:	00 db       	rcall	.-2560   	; 0x4be <write_reg_LMX2531>
     ebe:	80 e2       	ldi	r24, 0x20	; 32
     ec0:	9e e4       	ldi	r25, 0x4E	; 78
     ec2:	01 97       	sbiw	r24, 0x01	; 1
     ec4:	f1 f7       	brne	.-4      	; 0xec2 <InitLMX2531+0x30>

    _delay_ms(10);

    LMX2531_WRITE(LMX2531_R12_INIT);
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	64 e0       	ldi	r22, 0x04	; 4
     eca:	4c e8       	ldi	r20, 0x8C	; 140
     ecc:	f8 da       	rcall	.-2576   	; 0x4be <write_reg_LMX2531>
    LMX2531_WRITE(LMX2531_R9_INIT);
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	6b e0       	ldi	r22, 0x0B	; 11
     ed2:	49 ea       	ldi	r20, 0xA9	; 169
}
     ed4:	f4 ca       	rjmp	.-2584   	; 0x4be <write_reg_LMX2531>

00000ed6 <FillHead>:
        Buffer_StoreElement(&USARTtoUSB_Buffer, byte);
    }
}

static void FillHead(uint8_t* res, uint8_t idx)
{
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	fc 01       	movw	r30, r24
    uint8_t byte;
    uint8_t i;

    if (idx > 0xf0)
     edc:	61 3f       	cpi	r22, 0xF1	; 241
     ede:	20 f0       	brcs	.+8      	; 0xee8 <FillHead+0x12>
    {
        Buffer_StoreElement(&USARTtoUSB_Buffer, '?');
     ee0:	81 e3       	ldi	r24, 0x31	; 49
     ee2:	91 e0       	ldi	r25, 0x01	; 1
     ee4:	6f e3       	ldi	r22, 0x3F	; 63
     ee6:	18 c0       	rjmp	.+48     	; 0xf18 <FillHead+0x42>
    }
    else
    {
        res = res + 3*idx;
     ee8:	86 2f       	mov	r24, r22
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	63 e0       	ldi	r22, 0x03	; 3
     eee:	70 e0       	ldi	r23, 0x00	; 0
     ef0:	b0 d7       	rcall	.+3936   	; 0x1e52 <__mulhi3>
     ef2:	e8 0f       	add	r30, r24
     ef4:	f9 1f       	adc	r31, r25
        for (i = 0; i < 3; i++)
        {
            byte = pgm_read_byte(res++);
     ef6:	ef 01       	movw	r28, r30
     ef8:	21 96       	adiw	r28, 0x01	; 1
     efa:	e4 91       	lpm	r30, Z+
            Buffer_StoreElement(&USARTtoUSB_Buffer, byte);
     efc:	81 e3       	ldi	r24, 0x31	; 49
     efe:	91 e0       	ldi	r25, 0x01	; 1
     f00:	6e 2f       	mov	r22, r30
     f02:	e8 d4       	rcall	.+2512   	; 0x18d4 <Buffer_StoreElement>
    else
    {
        res = res + 3*idx;
        for (i = 0; i < 3; i++)
        {
            byte = pgm_read_byte(res++);
     f04:	fe 01       	movw	r30, r28
     f06:	64 91       	lpm	r22, Z+
            Buffer_StoreElement(&USARTtoUSB_Buffer, byte);
     f08:	81 e3       	ldi	r24, 0x31	; 49
     f0a:	91 e0       	ldi	r25, 0x01	; 1
     f0c:	e3 d4       	rcall	.+2502   	; 0x18d4 <Buffer_StoreElement>
    else
    {
        res = res + 3*idx;
        for (i = 0; i < 3; i++)
        {
            byte = pgm_read_byte(res++);
     f0e:	21 96       	adiw	r28, 0x01	; 1
     f10:	fe 01       	movw	r30, r28
     f12:	64 91       	lpm	r22, Z+
            Buffer_StoreElement(&USARTtoUSB_Buffer, byte);
     f14:	81 e3       	ldi	r24, 0x31	; 49
     f16:	91 e0       	ldi	r25, 0x01	; 1
     f18:	dd d4       	rcall	.+2490   	; 0x18d4 <Buffer_StoreElement>
        }
    }
}
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	08 95       	ret

00000f20 <FillCmd>:
extern uint8_t pCmd[];
extern uint8_t pTrg[];
extern uint8_t pDet[];

static void FillCmd(void)
{
     f20:	60 91 b9 01 	lds	r22, 0x01B9
     f24:	66 23       	and	r22, r22
     f26:	21 f0       	breq	.+8      	; 0xf30 <FillCmd+0x10>
    if (command.cmd > 0)
        FillHead(pCmd, command.cmd - 1);
     f28:	61 50       	subi	r22, 0x01	; 1
     f2a:	8a ee       	ldi	r24, 0xEA	; 234
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	d3 df       	rcall	.-90     	; 0xed6 <FillHead>
    Buffer_StoreElement(&USARTtoUSB_Buffer, ',');
     f30:	81 e3       	ldi	r24, 0x31	; 49
     f32:	91 e0       	ldi	r25, 0x01	; 1
     f34:	6c e2       	ldi	r22, 0x2C	; 44
     f36:	ce d4       	rcall	.+2460   	; 0x18d4 <Buffer_StoreElement>
    if (command.type > 0)
     f38:	60 91 ba 01 	lds	r22, 0x01BA
     f3c:	66 23       	and	r22, r22
     f3e:	21 f0       	breq	.+8      	; 0xf48 <FillCmd+0x28>
        FillHead(pTrg, command.type - 1);
     f40:	61 50       	subi	r22, 0x01	; 1
     f42:	8c e0       	ldi	r24, 0x0C	; 12
     f44:	91 e0       	ldi	r25, 0x01	; 1
     f46:	c7 df       	rcall	.-114    	; 0xed6 <FillHead>
    Buffer_StoreElement(&USARTtoUSB_Buffer, ',');
     f48:	81 e3       	ldi	r24, 0x31	; 49
     f4a:	91 e0       	ldi	r25, 0x01	; 1
     f4c:	6c e2       	ldi	r22, 0x2C	; 44
     f4e:	c2 d4       	rcall	.+2436   	; 0x18d4 <Buffer_StoreElement>
    if (command.details > 0)
     f50:	60 91 bb 01 	lds	r22, 0x01BB
     f54:	66 23       	and	r22, r22
     f56:	21 f0       	breq	.+8      	; 0xf60 <FillCmd+0x40>
        FillHead(pDet, command.details - 1);
     f58:	61 50       	subi	r22, 0x01	; 1
     f5a:	8f e1       	ldi	r24, 0x1F	; 31
     f5c:	91 e0       	ldi	r25, 0x01	; 1
     f5e:	bb df       	rcall	.-138    	; 0xed6 <FillHead>
    Buffer_StoreElement(&USARTtoUSB_Buffer, ',');
     f60:	81 e3       	ldi	r24, 0x31	; 49
     f62:	91 e0       	ldi	r25, 0x01	; 1
     f64:	6c e2       	ldi	r22, 0x2C	; 44
}
     f66:	b6 c4       	rjmp	.+2412   	; 0x18d4 <Buffer_StoreElement>

00000f68 <FillUint32>:

static void FillUint32(uint32_t val)
{
     f68:	6f 92       	push	r6
     f6a:	7f 92       	push	r7
     f6c:	8f 92       	push	r8
     f6e:	9f 92       	push	r9
     f70:	af 92       	push	r10
     f72:	bf 92       	push	r11
     f74:	cf 92       	push	r12
     f76:	df 92       	push	r13
     f78:	ef 92       	push	r14
     f7a:	ff 92       	push	r15
     f7c:	0f 93       	push	r16
     f7e:	1f 93       	push	r17
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
     f84:	3b 01       	movw	r6, r22
     f86:	4c 01       	movw	r8, r24
     f88:	a1 2c       	mov	r10, r1
     f8a:	5a ec       	ldi	r21, 0xCA	; 202
     f8c:	b5 2e       	mov	r11, r21
     f8e:	5a e9       	ldi	r21, 0x9A	; 154
     f90:	c5 2e       	mov	r12, r21
     f92:	5b e3       	ldi	r21, 0x3B	; 59
     f94:	d5 2e       	mov	r13, r21
     f96:	c0 e0       	ldi	r28, 0x00	; 0
     f98:	d0 e0       	ldi	r29, 0x00	; 0
    uint32_t stv = 1000000000;
    uint8_t f = 0;

    for (;stv > 0; stv/=10)
    {
        uint8_t v = val / stv;
     f9a:	c4 01       	movw	r24, r8
     f9c:	b3 01       	movw	r22, r6
     f9e:	a6 01       	movw	r20, r12
     fa0:	95 01       	movw	r18, r10
     fa2:	96 d7       	rcall	.+3884   	; 0x1ed0 <__udivmodsi4>
     fa4:	e2 2e       	mov	r14, r18
       // if ((f) || (v > 0))
        {
            f = 1;
            Buffer_StoreElement(&USARTtoUSB_Buffer, '0' + v);
     fa6:	62 2f       	mov	r22, r18
     fa8:	60 5d       	subi	r22, 0xD0	; 208
     faa:	81 e3       	ldi	r24, 0x31	; 49
     fac:	91 e0       	ldi	r25, 0x01	; 1
     fae:	92 d4       	rcall	.+2340   	; 0x18d4 <Buffer_StoreElement>
        }
        val -= v*stv;
     fb0:	ff 24       	eor	r15, r15
     fb2:	00 e0       	ldi	r16, 0x00	; 0
     fb4:	10 e0       	ldi	r17, 0x00	; 0
     fb6:	c8 01       	movw	r24, r16
     fb8:	b7 01       	movw	r22, r14
     fba:	a6 01       	movw	r20, r12
     fbc:	95 01       	movw	r18, r10
     fbe:	5b d7       	rcall	.+3766   	; 0x1e76 <__mulsi3>
     fc0:	66 1a       	sub	r6, r22
     fc2:	77 0a       	sbc	r7, r23
     fc4:	88 0a       	sbc	r8, r24
     fc6:	99 0a       	sbc	r9, r25
static void FillUint32(uint32_t val)
{
    uint32_t stv = 1000000000;
    uint8_t f = 0;

    for (;stv > 0; stv/=10)
     fc8:	c6 01       	movw	r24, r12
     fca:	b5 01       	movw	r22, r10
     fcc:	2a e0       	ldi	r18, 0x0A	; 10
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	40 e0       	ldi	r20, 0x00	; 0
     fd2:	50 e0       	ldi	r21, 0x00	; 0
     fd4:	7d d7       	rcall	.+3834   	; 0x1ed0 <__udivmodsi4>
     fd6:	c9 01       	movw	r24, r18
     fd8:	da 01       	movw	r26, r20
     fda:	5c 01       	movw	r10, r24
     fdc:	6d 01       	movw	r12, r26
     fde:	21 96       	adiw	r28, 0x01	; 1
     fe0:	ca 30       	cpi	r28, 0x0A	; 10
     fe2:	d1 05       	cpc	r29, r1
     fe4:	d1 f6       	brne	.-76     	; 0xf9a <FillUint32+0x32>
        }
        val -= v*stv;
    }
    if (f == 0)
        Buffer_StoreElement(&USARTtoUSB_Buffer, '0');
}
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	1f 91       	pop	r17
     fec:	0f 91       	pop	r16
     fee:	ff 90       	pop	r15
     ff0:	ef 90       	pop	r14
     ff2:	df 90       	pop	r13
     ff4:	cf 90       	pop	r12
     ff6:	bf 90       	pop	r11
     ff8:	af 90       	pop	r10
     ffa:	9f 90       	pop	r9
     ffc:	8f 90       	pop	r8
     ffe:	7f 90       	pop	r7
    1000:	6f 90       	pop	r6
    1002:	08 95       	ret

00001004 <FillResultNoNewLinePM>:
    FillResultNoNewLinePM(res);
    FillResultNoNewLinePM(newLine);
}

void FillResultNoNewLinePM(uint8_t* res)
{
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	ec 01       	movw	r28, r24
    100a:	03 c0       	rjmp	.+6      	; 0x1012 <FillResultNoNewLinePM+0xe>
    uint8_t byte;
    while ((byte = pgm_read_byte(res++)))
    {
        Buffer_StoreElement(&USARTtoUSB_Buffer, byte);
    100c:	81 e3       	ldi	r24, 0x31	; 49
    100e:	91 e0       	ldi	r25, 0x01	; 1
    1010:	61 d4       	rcall	.+2242   	; 0x18d4 <Buffer_StoreElement>
    1012:	fe 01       	movw	r30, r28
}

void FillResultNoNewLinePM(uint8_t* res)
{
    uint8_t byte;
    while ((byte = pgm_read_byte(res++)))
    1014:	21 96       	adiw	r28, 0x01	; 1
    1016:	64 91       	lpm	r22, Z+
    1018:	66 23       	and	r22, r22
    101a:	c1 f7       	brne	.-16     	; 0x100c <FillResultNoNewLinePM+0x8>
    {
        Buffer_StoreElement(&USARTtoUSB_Buffer, byte);
    }
}
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	08 95       	ret

00001022 <FillResultPM>:


void FillResultNoNewLinePM(uint8_t* res);

void FillResultPM(uint8_t* res)
{
    1022:	f0 df       	rcall	.-32     	; 0x1004 <FillResultNoNewLinePM>
    FillResultNoNewLinePM(res);
    FillResultNoNewLinePM(newLine);
    1024:	8b eb       	ldi	r24, 0xBB	; 187
    1026:	90 e0       	ldi	r25, 0x00	; 0
}
    1028:	ed cf       	rjmp	.-38     	; 0x1004 <FillResultNoNewLinePM>

0000102a <LoadEEPROM>:
uint8_t  eeAutoGPSSync  EEMEM = 1;

uint8_t  eeEnableOscillator  EEMEM = 1;

static void LoadEEPROM(void)
{
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	6c e6       	ldi	r22, 0x6C	; 108
    1030:	72 e0       	ldi	r23, 0x02	; 2
    1032:	fd d8       	rcall	.-3590   	; 0x22e <__eerd_dword>
    Fosc = eeprom_read_dword(&eeFosc);
    1034:	60 93 25 01 	sts	0x0125, r22
    1038:	70 93 26 01 	sts	0x0126, r23
    103c:	80 93 27 01 	sts	0x0127, r24
    1040:	90 93 28 01 	sts	0x0128, r25
    Read one 32-bit double word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__
uint32_t eeprom_read_dword (const uint32_t *__p)
{
    return __eerd_dword (__p, eeprom_read_byte);
    1044:	84 e0       	ldi	r24, 0x04	; 4
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	6c e6       	ldi	r22, 0x6C	; 108
    104a:	72 e0       	ldi	r23, 0x02	; 2
    104c:	f0 d8       	rcall	.-3616   	; 0x22e <__eerd_dword>
    Fout = eeprom_read_dword(&eeFout);
    104e:	60 93 29 01 	sts	0x0129, r22
    1052:	70 93 2a 01 	sts	0x012A, r23
    1056:	80 93 2b 01 	sts	0x012B, r24
    105a:	90 93 2c 01 	sts	0x012C, r25
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    105e:	f9 99       	sbic	0x1f, 1	; 31
    1060:	fe cf       	rjmp	.-4      	; 0x105e <LoadEEPROM+0x34>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1062:	8e e0       	ldi	r24, 0x0E	; 14
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	92 bd       	out	0x22, r25	; 34
    1068:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
    106a:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    106c:	80 b5       	in	r24, 0x20	; 32
    VCO_MIN = eeprom_read_word(&eeVCO_MIN);
    VCO_MAX = eeprom_read_word(&eeVCO_MAX);
    VCO_Kbit = eeprom_read_word(&eeVCO_Kbit);
#endif

    LMK_OutMask = eeprom_read_byte(&eeLMK_OutMask);
    106e:	80 93 2d 01 	sts	0x012D, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1072:	f9 99       	sbic	0x1f, 1	; 31
    1074:	fe cf       	rjmp	.-4      	; 0x1072 <LoadEEPROM+0x48>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1076:	8f e0       	ldi	r24, 0x0F	; 15
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	92 bd       	out	0x22, r25	; 34
    107c:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
    107e:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    1080:	80 b5       	in	r24, 0x20	; 32
    AutoFreq = eeprom_read_byte(&eeAutoFreq);
    1082:	80 93 aa 01 	sts	0x01AA, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1086:	f9 99       	sbic	0x1f, 1	; 31
    1088:	fe cf       	rjmp	.-4      	; 0x1086 <LoadEEPROM+0x5c>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    108a:	82 e1       	ldi	r24, 0x12	; 18
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	92 bd       	out	0x22, r25	; 34
    1090:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
    1092:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    1094:	80 b5       	in	r24, 0x20	; 32
#ifdef PRESENT_DAC12
    DacValue = eeprom_read_word(&eeDacValue);
#endif

#ifdef PRESENT_GPS
    AutoUpdateGps = eeprom_read_byte(&eeAutoGPSSync);
    1096:	80 93 9f 01 	sts	0x019F, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    109a:	f9 99       	sbic	0x1f, 1	; 31
    109c:	fe cf       	rjmp	.-4      	; 0x109a <LoadEEPROM+0x70>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    109e:	83 e1       	ldi	r24, 0x13	; 19
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	92 bd       	out	0x22, r25	; 34
    10a4:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
    10a6:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    10a8:	80 b5       	in	r24, 0x20	; 32
#endif

#if TAMER_VER >= 12
    EnableOscillator = eeprom_read_byte(&eeEnableOscillator);
    10aa:	80 93 2f 01 	sts	0x012F, r24
#endif
}
    10ae:	08 95       	ret

000010b0 <AutoStartControl>:
}

#endif

void AutoStartControl(void)
{
    10b0:	28 da       	rcall	.-2992   	; 0x502 <InitCounters>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    10b2:	f9 99       	sbic	0x1f, 1	; 31
    10b4:	fe cf       	rjmp	.-4      	; 0x10b2 <AutoStartControl+0x2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    10b6:	8f e0       	ldi	r24, 0x0F	; 15
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	92 bd       	out	0x22, r25	; 34
    10bc:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
    10be:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    10c0:	80 b5       	in	r24, 0x20	; 32
    InitCounters();
#endif



    AutoFreq = eeprom_read_byte(&eeAutoFreq);
    10c2:	80 93 aa 01 	sts	0x01AA, r24
    if (AutoFreq)
    10c6:	88 23       	and	r24, r24
    10c8:	91 f0       	breq	.+36     	; 0x10ee <AutoStartControl+0x3e>
    {
        LoadEEPROM();
    10ca:	af df       	rcall	.-162    	; 0x102a <LoadEEPROM>

#if TAMER_VER >= 12
        SetOscillator();
    10cc:	f8 db       	rcall	.-2064   	; 0x8be <SetOscillator>
#endif

        InitLMX2531();
    10ce:	e1 de       	rcall	.-574    	; 0xe92 <InitLMX2531>

        InitLMK();
    10d0:	60 dc       	rcall	.-1856   	; 0x992 <InitLMK>
    10d2:	84 ef       	ldi	r24, 0xF4	; 244
    10d4:	91 e0       	ldi	r25, 0x01	; 1
    10d6:	28 ec       	ldi	r18, 0xC8	; 200
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	f9 01       	movw	r30, r18
    10dc:	31 97       	sbiw	r30, 0x01	; 1
    10de:	f1 f7       	brne	.-4      	; 0x10dc <AutoStartControl+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e2:	d9 f7       	brne	.-10     	; 0x10da <AutoStartControl+0x2a>

        _delay_ms(50);

        if (SetLMX2531(0))
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	64 dc       	rcall	.-1848   	; 0x9b0 <SetLMX2531>
    10e8:	88 23       	and	r24, r24
    10ea:	11 f0       	breq	.+4      	; 0x10f0 <AutoStartControl+0x40>
        {
            SetLMK();
    10ec:	eb cb       	rjmp	.-2090   	; 0x8c4 <SetLMK>
        }
    }
#if TAMER_VER >= 12
    else
        SetOscillator();
    10ee:	e7 cb       	rjmp	.-2098   	; 0x8be <SetOscillator>
    10f0:	08 95       	ret

000010f2 <ProcessCommand>:
    return 0;
}
#endif

uint8_t ProcessCommand(void)
{
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    switch(command.cmd)
    10f6:	80 91 b9 01 	lds	r24, 0x01B9
    10fa:	86 30       	cpi	r24, 0x06	; 6
    10fc:	09 f4       	brne	.+2      	; 0x1100 <ProcessCommand+0xe>
    10fe:	dc c0       	rjmp	.+440    	; 0x12b8 <ProcessCommand+0x1c6>
    1100:	87 30       	cpi	r24, 0x07	; 7
    1102:	58 f4       	brcc	.+22     	; 0x111a <ProcessCommand+0x28>
    1104:	81 30       	cpi	r24, 0x01	; 1
    1106:	e1 f0       	breq	.+56     	; 0x1140 <ProcessCommand+0x4e>
    1108:	81 30       	cpi	r24, 0x01	; 1
    110a:	08 f4       	brcc	.+2      	; 0x110e <ProcessCommand+0x1c>
    110c:	d0 c1       	rjmp	.+928    	; 0x14ae <ProcessCommand+0x3bc>
    110e:	82 30       	cpi	r24, 0x02	; 2
    1110:	89 f1       	breq	.+98     	; 0x1174 <ProcessCommand+0x82>
    1112:	83 30       	cpi	r24, 0x03	; 3
    1114:	09 f0       	breq	.+2      	; 0x1118 <ProcessCommand+0x26>
    1116:	57 c2       	rjmp	.+1198   	; 0x15c6 <ProcessCommand+0x4d4>
    1118:	6e c0       	rjmp	.+220    	; 0x11f6 <ProcessCommand+0x104>
    111a:	89 30       	cpi	r24, 0x09	; 9
    111c:	09 f4       	brne	.+2      	; 0x1120 <ProcessCommand+0x2e>
    111e:	dc c1       	rjmp	.+952    	; 0x14d8 <ProcessCommand+0x3e6>
    1120:	8a 30       	cpi	r24, 0x0A	; 10
    1122:	38 f4       	brcc	.+14     	; 0x1132 <ProcessCommand+0x40>
    1124:	87 30       	cpi	r24, 0x07	; 7
    1126:	09 f4       	brne	.+2      	; 0x112a <ProcessCommand+0x38>
    1128:	ed c1       	rjmp	.+986    	; 0x1504 <ProcessCommand+0x412>
    112a:	88 30       	cpi	r24, 0x08	; 8
    112c:	09 f0       	breq	.+2      	; 0x1130 <ProcessCommand+0x3e>
    112e:	4b c2       	rjmp	.+1174   	; 0x15c6 <ProcessCommand+0x4d4>
    1130:	d6 c1       	rjmp	.+940    	; 0x14de <ProcessCommand+0x3ec>
    1132:	8a 30       	cpi	r24, 0x0A	; 10
    1134:	09 f4       	brne	.+2      	; 0x1138 <ProcessCommand+0x46>
    1136:	e9 c1       	rjmp	.+978    	; 0x150a <ProcessCommand+0x418>
    1138:	8b 30       	cpi	r24, 0x0B	; 11
    113a:	09 f0       	breq	.+2      	; 0x113e <ProcessCommand+0x4c>
    113c:	44 c2       	rjmp	.+1160   	; 0x15c6 <ProcessCommand+0x4d4>
    113e:	e7 c1       	rjmp	.+974    	; 0x150e <ProcessCommand+0x41c>

#ifndef NO_CMDREG
        case cmdREGISTER:
        {

            switch (command.type)
    1140:	80 91 ba 01 	lds	r24, 0x01BA
    1144:	81 30       	cpi	r24, 0x01	; 1
    1146:	21 f0       	breq	.+8      	; 0x1150 <ProcessCommand+0x5e>
    1148:	82 30       	cpi	r24, 0x02	; 2
    114a:	09 f0       	breq	.+2      	; 0x114e <ProcessCommand+0x5c>
    114c:	3c c2       	rjmp	.+1144   	; 0x15c6 <ProcessCommand+0x4d4>
    114e:	0a c0       	rjmp	.+20     	; 0x1164 <ProcessCommand+0x72>
            {
                case trgLMK:
                    write_reg_LMK0X0XX(command.data[3], command.data[2], command.data[1], command.data[0]);
    1150:	80 91 bf 01 	lds	r24, 0x01BF
    1154:	60 91 be 01 	lds	r22, 0x01BE
    1158:	40 91 bd 01 	lds	r20, 0x01BD
    115c:	20 91 bc 01 	lds	r18, 0x01BC
    1160:	9c d9       	rcall	.-3272   	; 0x49a <write_reg_LMK0X0XX>
    1162:	2d c2       	rjmp	.+1114   	; 0x15be <ProcessCommand+0x4cc>
                    FillResultPM(resOk);
                    return 1;

                case trgLMX:
                    write_reg_LMX2531(command.data[2], command.data[1], command.data[0]);
    1164:	80 91 be 01 	lds	r24, 0x01BE
    1168:	60 91 bd 01 	lds	r22, 0x01BD
    116c:	40 91 bc 01 	lds	r20, 0x01BC
    1170:	a6 d9       	rcall	.-3252   	; 0x4be <write_reg_LMX2531>
    1172:	25 c2       	rjmp	.+1098   	; 0x15be <ProcessCommand+0x4cc>
        }
#endif
#ifndef NO_CMDPIN
        case cmdPIN:
        {
            switch (command.type)
    1174:	80 91 ba 01 	lds	r24, 0x01BA
    1178:	81 30       	cpi	r24, 0x01	; 1
    117a:	c9 f0       	breq	.+50     	; 0x11ae <ProcessCommand+0xbc>
    117c:	81 30       	cpi	r24, 0x01	; 1
    117e:	30 f0       	brcs	.+12     	; 0x118c <ProcessCommand+0x9a>
    1180:	82 30       	cpi	r24, 0x02	; 2
    1182:	21 f1       	breq	.+72     	; 0x11cc <ProcessCommand+0xda>
    1184:	84 30       	cpi	r24, 0x04	; 4
    1186:	09 f0       	breq	.+2      	; 0x118a <ProcessCommand+0x98>
    1188:	1e c2       	rjmp	.+1084   	; 0x15c6 <ProcessCommand+0x4d4>
    118a:	2d c0       	rjmp	.+90     	; 0x11e6 <ProcessCommand+0xf4>
            {
#if TAMER_VER >= 12
                case trgNONE:
                {
                    if (command.details == detOSC)
    118c:	80 91 bb 01 	lds	r24, 0x01BB
    1190:	84 30       	cpi	r24, 0x04	; 4
    1192:	09 f0       	breq	.+2      	; 0x1196 <ProcessCommand+0xa4>
    1194:	18 c2       	rjmp	.+1072   	; 0x15c6 <ProcessCommand+0x4d4>
                    {
                        if (command.data[0])
    1196:	80 91 bc 01 	lds	r24, 0x01BC
    119a:	88 23       	and	r24, r24
    119c:	21 f0       	breq	.+8      	; 0x11a6 <ProcessCommand+0xb4>
                            EnableOscillator = 1;
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	80 93 2f 01 	sts	0x012F, r24
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <ProcessCommand+0xb8>
                        else
                            EnableOscillator = 0;
    11a6:	10 92 2f 01 	sts	0x012F, r1

                        SetOscillator();
    11aa:	89 db       	rcall	.-2286   	; 0x8be <SetOscillator>
    11ac:	08 c2       	rjmp	.+1040   	; 0x15be <ProcessCommand+0x4cc>
                    return 0;
                }
#endif
                case trgLMK:
                {
                    switch (command.details)
    11ae:	80 91 bb 01 	lds	r24, 0x01BB
    11b2:	82 30       	cpi	r24, 0x02	; 2
    11b4:	19 f0       	breq	.+6      	; 0x11bc <ProcessCommand+0xca>
    11b6:	83 30       	cpi	r24, 0x03	; 3
    11b8:	09 f0       	breq	.+2      	; 0x11bc <ProcessCommand+0xca>
    11ba:	05 c2       	rjmp	.+1034   	; 0x15c6 <ProcessCommand+0x4d4>
                                LmkGoeSet();
                            else
                                LmkGoeClear();
                            break;
                        case detSYN:
                            if (command.data[0])
    11bc:	80 91 bc 01 	lds	r24, 0x01BC
    11c0:	88 23       	and	r24, r24
    11c2:	11 f0       	breq	.+4      	; 0x11c8 <ProcessCommand+0xd6>
                                LmkGoeSet();
    11c4:	46 9a       	sbi	0x08, 6	; 8
    11c6:	fb c1       	rjmp	.+1014   	; 0x15be <ProcessCommand+0x4cc>
                            else
                                LmkGoeClear();
    11c8:	46 98       	cbi	0x08, 6	; 8
    11ca:	f9 c1       	rjmp	.+1010   	; 0x15be <ProcessCommand+0x4cc>
                    FillResultPM(resOk);
                    return 1;
                }
                case trgLMX:
                {
                    switch (command.details)
    11cc:	80 91 bb 01 	lds	r24, 0x01BB
    11d0:	81 30       	cpi	r24, 0x01	; 1
    11d2:	09 f0       	breq	.+2      	; 0x11d6 <ProcessCommand+0xe4>
    11d4:	f8 c1       	rjmp	.+1008   	; 0x15c6 <ProcessCommand+0x4d4>
                    {
                        case detEN:
                            if (command.data[0])
    11d6:	80 91 bc 01 	lds	r24, 0x01BC
    11da:	88 23       	and	r24, r24
    11dc:	11 f0       	breq	.+4      	; 0x11e2 <ProcessCommand+0xf0>
                                LmxCeSet();
    11de:	5d 9a       	sbi	0x0b, 5	; 11
    11e0:	ee c1       	rjmp	.+988    	; 0x15be <ProcessCommand+0x4cc>
                            else
                                LmxCeClear();
    11e2:	5d 98       	cbi	0x0b, 5	; 11
    11e4:	ec c1       	rjmp	.+984    	; 0x15be <ProcessCommand+0x4cc>
                    return 1;
                }

                case trgLED:
                {
                    if (command.data[0])
    11e6:	80 91 bc 01 	lds	r24, 0x01BC
    11ea:	88 23       	and	r24, r24
    11ec:	11 f0       	breq	.+4      	; 0x11f2 <ProcessCommand+0x100>
                        LedSet();
    11ee:	2d 9a       	sbi	0x05, 5	; 5
    11f0:	e6 c1       	rjmp	.+972    	; 0x15be <ProcessCommand+0x4cc>
                    else
                        LedClear();
    11f2:	2d 98       	cbi	0x05, 5	; 5
    11f4:	e4 c1       	rjmp	.+968    	; 0x15be <ProcessCommand+0x4cc>
        }
#endif

        case cmdSET:
        {
            switch (command.type)
    11f6:	80 91 ba 01 	lds	r24, 0x01BA
    11fa:	81 30       	cpi	r24, 0x01	; 1
    11fc:	09 f4       	brne	.+2      	; 0x1200 <ProcessCommand+0x10e>
    11fe:	42 c0       	rjmp	.+132    	; 0x1284 <ProcessCommand+0x192>
    1200:	81 30       	cpi	r24, 0x01	; 1
    1202:	20 f0       	brcs	.+8      	; 0x120c <ProcessCommand+0x11a>
    1204:	86 30       	cpi	r24, 0x06	; 6
    1206:	09 f0       	breq	.+2      	; 0x120a <ProcessCommand+0x118>
    1208:	de c1       	rjmp	.+956    	; 0x15c6 <ProcessCommand+0x4d4>
    120a:	47 c0       	rjmp	.+142    	; 0x129a <ProcessCommand+0x1a8>
            {
                case trgNONE:
                    switch (command.details)
    120c:	80 91 bb 01 	lds	r24, 0x01BB
    1210:	84 30       	cpi	r24, 0x04	; 4
    1212:	e1 f0       	breq	.+56     	; 0x124c <ProcessCommand+0x15a>
    1214:	85 30       	cpi	r24, 0x05	; 5
    1216:	18 f4       	brcc	.+6      	; 0x121e <ProcessCommand+0x12c>
    1218:	88 23       	and	r24, r24
    121a:	69 f1       	breq	.+90     	; 0x1276 <ProcessCommand+0x184>
    121c:	d4 c1       	rjmp	.+936    	; 0x15c6 <ProcessCommand+0x4d4>
    121e:	85 30       	cpi	r24, 0x05	; 5
    1220:	21 f0       	breq	.+8      	; 0x122a <ProcessCommand+0x138>
    1222:	8b 30       	cpi	r24, 0x0B	; 11
    1224:	09 f0       	breq	.+2      	; 0x1228 <ProcessCommand+0x136>
    1226:	cf c1       	rjmp	.+926    	; 0x15c6 <ProcessCommand+0x4d4>
    1228:	22 c0       	rjmp	.+68     	; 0x126e <ProcessCommand+0x17c>
                    {
                        case trgNONE:
                            break;
                        case detOUT:
                            Fout = command.u32data;
    122a:	80 91 bc 01 	lds	r24, 0x01BC
    122e:	90 91 bd 01 	lds	r25, 0x01BD
    1232:	a0 91 be 01 	lds	r26, 0x01BE
    1236:	b0 91 bf 01 	lds	r27, 0x01BF
    123a:	80 93 29 01 	sts	0x0129, r24
    123e:	90 93 2a 01 	sts	0x012A, r25
    1242:	a0 93 2b 01 	sts	0x012B, r26
    1246:	b0 93 2c 01 	sts	0x012C, r27
    124a:	15 c0       	rjmp	.+42     	; 0x1276 <ProcessCommand+0x184>
                            break;
                        case detOSC:
                            Fosc = command.u32data;
    124c:	80 91 bc 01 	lds	r24, 0x01BC
    1250:	90 91 bd 01 	lds	r25, 0x01BD
    1254:	a0 91 be 01 	lds	r26, 0x01BE
    1258:	b0 91 bf 01 	lds	r27, 0x01BF
    125c:	80 93 25 01 	sts	0x0125, r24
    1260:	90 93 26 01 	sts	0x0126, r25
    1264:	a0 93 27 01 	sts	0x0127, r26
    1268:	b0 93 28 01 	sts	0x0128, r27
    126c:	04 c0       	rjmp	.+8      	; 0x1276 <ProcessCommand+0x184>
                            break;
                        case detAUTO:
                            AutoFreq = command.data[0];
    126e:	80 91 bc 01 	lds	r24, 0x01BC
    1272:	80 93 aa 01 	sts	0x01AA, r24
                            break;
                        default:
                            return 0;
                    }

                    uint8_t r = SetLMX2531(0);
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	9b db       	rcall	.-2250   	; 0x9b0 <SetLMX2531>
                    if (r)
    127a:	88 23       	and	r24, r24
    127c:	61 f4       	brne	.+24     	; 0x1296 <ProcessCommand+0x1a4>
                        SetLMK();
                        FillResultPM(resOk);
                    }
                    else
                    {
                        FillResultPM(resBadRange);
    127e:	89 ed       	ldi	r24, 0xD9	; 217
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	9f c1       	rjmp	.+830    	; 0x15c2 <ProcessCommand+0x4d0>

                    FillResultPM(resOk);
                    return 1;

                case trgLMK:
                    switch (command.details)
    1284:	80 91 bb 01 	lds	r24, 0x01BB
    1288:	86 30       	cpi	r24, 0x06	; 6
    128a:	09 f0       	breq	.+2      	; 0x128e <ProcessCommand+0x19c>
    128c:	9c c1       	rjmp	.+824    	; 0x15c6 <ProcessCommand+0x4d4>
                    {
                        case detPORTS:
                            LMK_OutMask = command.data[0];
    128e:	80 91 bc 01 	lds	r24, 0x01BC
    1292:	80 93 2d 01 	sts	0x012D, r24

                        default:
                            return 0;
                    }

                    SetLMK();
    1296:	16 db       	rcall	.-2516   	; 0x8c4 <SetLMK>
    1298:	92 c1       	rjmp	.+804    	; 0x15be <ProcessCommand+0x4cc>
#endif

#ifdef PRESENT_GPS
                case trgGPS:
                {
                    switch (command.details)
    129a:	80 91 bb 01 	lds	r24, 0x01BB
    129e:	83 30       	cpi	r24, 0x03	; 3
    12a0:	21 f0       	breq	.+8      	; 0x12aa <ProcessCommand+0x1b8>
    12a2:	8b 30       	cpi	r24, 0x0B	; 11
    12a4:	09 f0       	breq	.+2      	; 0x12a8 <ProcessCommand+0x1b6>
    12a6:	8f c1       	rjmp	.+798    	; 0x15c6 <ProcessCommand+0x4d4>
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <ProcessCommand+0x1bc>
                    {
                        case detSYN:    UpdateOSCValue(); break;
    12aa:	68 da       	rcall	.-2864   	; 0x77c <UpdateOSCValue>
    12ac:	88 c1       	rjmp	.+784    	; 0x15be <ProcessCommand+0x4cc>
                        case detAUTO:   AutoUpdateGps = command.data[0]; break;
    12ae:	80 91 bc 01 	lds	r24, 0x01BC
    12b2:	80 93 9f 01 	sts	0x019F, r24
    12b6:	83 c1       	rjmp	.+774    	; 0x15be <ProcessCommand+0x4cc>
            return 0;
        }
#ifndef NO_CMDINFO
        case cmdINFO:
        {
            switch (command.type)
    12b8:	80 91 ba 01 	lds	r24, 0x01BA
    12bc:	81 30       	cpi	r24, 0x01	; 1
    12be:	09 f4       	brne	.+2      	; 0x12c2 <ProcessCommand+0x1d0>
    12c0:	f8 c0       	rjmp	.+496    	; 0x14b2 <ProcessCommand+0x3c0>
    12c2:	81 30       	cpi	r24, 0x01	; 1
    12c4:	08 f4       	brcc	.+2      	; 0x12c8 <ProcessCommand+0x1d6>
    12c6:	6e c0       	rjmp	.+220    	; 0x13a4 <ProcessCommand+0x2b2>
    12c8:	85 30       	cpi	r24, 0x05	; 5
    12ca:	09 f4       	brne	.+2      	; 0x12ce <ProcessCommand+0x1dc>
    12cc:	8d c0       	rjmp	.+282    	; 0x13e8 <ProcessCommand+0x2f6>
    12ce:	86 30       	cpi	r24, 0x06	; 6
    12d0:	09 f0       	breq	.+2      	; 0x12d4 <ProcessCommand+0x1e2>
    12d2:	79 c1       	rjmp	.+754    	; 0x15c6 <ProcessCommand+0x4d4>
            {
#ifdef PRESENT_GPS
                case trgGPS:
                {
                    switch (command.details)
    12d4:	80 91 bb 01 	lds	r24, 0x01BB
    12d8:	8b 30       	cpi	r24, 0x0B	; 11
    12da:	09 f4       	brne	.+2      	; 0x12de <ProcessCommand+0x1ec>
    12dc:	55 c0       	rjmp	.+170    	; 0x1388 <ProcessCommand+0x296>
    12de:	8c 30       	cpi	r24, 0x0C	; 12
    12e0:	78 f4       	brcc	.+30     	; 0x1300 <ProcessCommand+0x20e>
    12e2:	88 30       	cpi	r24, 0x08	; 8
    12e4:	09 f4       	brne	.+2      	; 0x12e8 <ProcessCommand+0x1f6>
    12e6:	46 c0       	rjmp	.+140    	; 0x1374 <ProcessCommand+0x282>
    12e8:	89 30       	cpi	r24, 0x09	; 9
    12ea:	20 f4       	brcc	.+8      	; 0x12f4 <ProcessCommand+0x202>
    12ec:	87 30       	cpi	r24, 0x07	; 7
    12ee:	09 f0       	breq	.+2      	; 0x12f2 <ProcessCommand+0x200>
    12f0:	6a c1       	rjmp	.+724    	; 0x15c6 <ProcessCommand+0x4d4>
    12f2:	4e c0       	rjmp	.+156    	; 0x1390 <ProcessCommand+0x29e>
    12f4:	89 30       	cpi	r24, 0x09	; 9
    12f6:	b1 f0       	breq	.+44     	; 0x1324 <ProcessCommand+0x232>
    12f8:	8a 30       	cpi	r24, 0x0A	; 10
    12fa:	09 f0       	breq	.+2      	; 0x12fe <ProcessCommand+0x20c>
    12fc:	64 c1       	rjmp	.+712    	; 0x15c6 <ProcessCommand+0x4d4>
    12fe:	0e c0       	rjmp	.+28     	; 0x131c <ProcessCommand+0x22a>
    1300:	8e 30       	cpi	r24, 0x0E	; 14
    1302:	f1 f0       	breq	.+60     	; 0x1340 <ProcessCommand+0x24e>
    1304:	8f 30       	cpi	r24, 0x0F	; 15
    1306:	20 f4       	brcc	.+8      	; 0x1310 <ProcessCommand+0x21e>
    1308:	8d 30       	cpi	r24, 0x0D	; 13
    130a:	09 f0       	breq	.+2      	; 0x130e <ProcessCommand+0x21c>
    130c:	5c c1       	rjmp	.+696    	; 0x15c6 <ProcessCommand+0x4d4>
    130e:	0e c0       	rjmp	.+28     	; 0x132c <ProcessCommand+0x23a>
    1310:	8f 30       	cpi	r24, 0x0F	; 15
    1312:	e1 f0       	breq	.+56     	; 0x134c <ProcessCommand+0x25a>
    1314:	80 31       	cpi	r24, 0x10	; 16
    1316:	09 f0       	breq	.+2      	; 0x131a <ProcessCommand+0x228>
    1318:	56 c1       	rjmp	.+684    	; 0x15c6 <ProcessCommand+0x4d4>
    131a:	22 c0       	rjmp	.+68     	; 0x1360 <ProcessCommand+0x26e>
                    {
                        case detDIVIDERS: FillCmd();  FillUint16(GpsSync_divider);  FillResultNoNewLinePM(newLine); break;
    131c:	01 de       	rcall	.-1022   	; 0xf20 <FillCmd>
    131e:	60 91 2e 01 	lds	r22, 0x012E
    1322:	d6 c0       	rjmp	.+428    	; 0x14d0 <ProcessCommand+0x3de>
                        case detKBIT:     FillCmd();  FillUint16(PPS_skipped);      FillResultNoNewLinePM(newLine); break;
    1324:	fd dd       	rcall	.-1030   	; 0xf20 <FillCmd>
    1326:	60 91 af 01 	lds	r22, 0x01AF
    132a:	d2 c0       	rjmp	.+420    	; 0x14d0 <ProcessCommand+0x3de>
                        case detR00:      FillCmd();  FillUint32(CounterHHValue);   FillResultNoNewLinePM(newLine); break;
    132c:	f9 dd       	rcall	.-1038   	; 0xf20 <FillCmd>
    132e:	60 91 8b 01 	lds	r22, 0x018B
    1332:	70 91 8c 01 	lds	r23, 0x018C
    1336:	80 91 8d 01 	lds	r24, 0x018D
    133a:	90 91 8e 01 	lds	r25, 0x018E
    133e:	b3 c0       	rjmp	.+358    	; 0x14a6 <ProcessCommand+0x3b4>
                        case detR01:      FillCmd();  FillUint16(Count1PPS);        FillResultNoNewLinePM(newLine); break;
    1340:	ef dd       	rcall	.-1058   	; 0xf20 <FillCmd>
    1342:	60 91 a4 01 	lds	r22, 0x01A4
    1346:	70 91 a5 01 	lds	r23, 0x01A5
    134a:	c3 c0       	rjmp	.+390    	; 0x14d2 <ProcessCommand+0x3e0>
                        case detR02:      FillCmd();  FillUint32(LastOCPVal);       FillResultNoNewLinePM(newLine); break;
    134c:	e9 dd       	rcall	.-1070   	; 0xf20 <FillCmd>
    134e:	60 91 ab 01 	lds	r22, 0x01AB
    1352:	70 91 ac 01 	lds	r23, 0x01AC
    1356:	80 91 ad 01 	lds	r24, 0x01AD
    135a:	90 91 ae 01 	lds	r25, 0x01AE
    135e:	a3 c0       	rjmp	.+326    	; 0x14a6 <ProcessCommand+0x3b4>
                        case detR03:      FillCmd();  FillUint32(FilteredVal);      FillResultNoNewLinePM(newLine); break;
    1360:	df dd       	rcall	.-1090   	; 0xf20 <FillCmd>
    1362:	60 91 93 01 	lds	r22, 0x0193
    1366:	70 91 94 01 	lds	r23, 0x0194
    136a:	80 91 95 01 	lds	r24, 0x0195
    136e:	90 91 96 01 	lds	r25, 0x0196
    1372:	99 c0       	rjmp	.+306    	; 0x14a6 <ProcessCommand+0x3b4>
                        case detMAX:      FillCmd();  FillUint32(ddd);              FillResultNoNewLinePM(newLine); break;
    1374:	d5 dd       	rcall	.-1110   	; 0xf20 <FillCmd>
    1376:	60 91 b5 01 	lds	r22, 0x01B5
    137a:	70 91 b6 01 	lds	r23, 0x01B6
    137e:	80 91 b7 01 	lds	r24, 0x01B7
    1382:	90 91 b8 01 	lds	r25, 0x01B8
    1386:	8f c0       	rjmp	.+286    	; 0x14a6 <ProcessCommand+0x3b4>
                        case detAUTO:     FillCmd();  FillUint16(AutoUpdateGps);    FillResultNoNewLinePM(newLine); break;
    1388:	cb dd       	rcall	.-1130   	; 0xf20 <FillCmd>
    138a:	60 91 9f 01 	lds	r22, 0x019F
    138e:	a0 c0       	rjmp	.+320    	; 0x14d0 <ProcessCommand+0x3de>
                        case detMIN:      FillCmd();  FillUint32(LastAutoUpd);      FillResultNoNewLinePM(newLine); break;
    1390:	c7 dd       	rcall	.-1138   	; 0xf20 <FillCmd>
    1392:	60 91 9b 01 	lds	r22, 0x019B
    1396:	70 91 9c 01 	lds	r23, 0x019C
    139a:	80 91 9d 01 	lds	r24, 0x019D
    139e:	90 91 9e 01 	lds	r25, 0x019E
    13a2:	81 c0       	rjmp	.+258    	; 0x14a6 <ProcessCommand+0x3b4>
                    return 1;
                }
#endif
                case trgNONE:
                {
                    switch (command.details)
    13a4:	80 91 bb 01 	lds	r24, 0x01BB
    13a8:	85 30       	cpi	r24, 0x05	; 5
    13aa:	31 f0       	breq	.+12     	; 0x13b8 <ProcessCommand+0x2c6>
    13ac:	8b 30       	cpi	r24, 0x0B	; 11
    13ae:	c1 f0       	breq	.+48     	; 0x13e0 <ProcessCommand+0x2ee>
    13b0:	84 30       	cpi	r24, 0x04	; 4
    13b2:	09 f0       	breq	.+2      	; 0x13b6 <ProcessCommand+0x2c4>
    13b4:	08 c1       	rjmp	.+528    	; 0x15c6 <ProcessCommand+0x4d4>
    13b6:	0a c0       	rjmp	.+20     	; 0x13cc <ProcessCommand+0x2da>
                    {
                        case detOUT:   FillCmd();  FillUint32(Fout);      FillResultNoNewLinePM(newLine); break;
    13b8:	b3 dd       	rcall	.-1178   	; 0xf20 <FillCmd>
    13ba:	60 91 29 01 	lds	r22, 0x0129
    13be:	70 91 2a 01 	lds	r23, 0x012A
    13c2:	80 91 2b 01 	lds	r24, 0x012B
    13c6:	90 91 2c 01 	lds	r25, 0x012C
    13ca:	6d c0       	rjmp	.+218    	; 0x14a6 <ProcessCommand+0x3b4>
                        case detOSC:   FillCmd();  FillUint32(Fosc);      FillResultNoNewLinePM(newLine); break;
    13cc:	a9 dd       	rcall	.-1198   	; 0xf20 <FillCmd>
    13ce:	60 91 25 01 	lds	r22, 0x0125
    13d2:	70 91 26 01 	lds	r23, 0x0126
    13d6:	80 91 27 01 	lds	r24, 0x0127
    13da:	90 91 28 01 	lds	r25, 0x0128
    13de:	63 c0       	rjmp	.+198    	; 0x14a6 <ProcessCommand+0x3b4>
                        case detAUTO:  FillCmd();  FillUint16(AutoFreq);  FillResultNoNewLinePM(newLine); break;
    13e0:	9f dd       	rcall	.-1218   	; 0xf20 <FillCmd>
    13e2:	60 91 aa 01 	lds	r22, 0x01AA
    13e6:	74 c0       	rjmp	.+232    	; 0x14d0 <ProcessCommand+0x3de>
                    return 1;
                }

                case trgVCO:
                {
                    switch (command.details)
    13e8:	80 91 bb 01 	lds	r24, 0x01BB
    13ec:	89 30       	cpi	r24, 0x09	; 9
    13ee:	21 f1       	breq	.+72     	; 0x1438 <ProcessCommand+0x346>
    13f0:	8a 30       	cpi	r24, 0x0A	; 10
    13f2:	40 f4       	brcc	.+16     	; 0x1404 <ProcessCommand+0x312>
    13f4:	87 30       	cpi	r24, 0x07	; 7
    13f6:	a1 f0       	breq	.+40     	; 0x1420 <ProcessCommand+0x32e>
    13f8:	88 30       	cpi	r24, 0x08	; 8
    13fa:	c0 f4       	brcc	.+48     	; 0x142c <ProcessCommand+0x33a>
    13fc:	81 30       	cpi	r24, 0x01	; 1
    13fe:	09 f0       	breq	.+2      	; 0x1402 <ProcessCommand+0x310>
    1400:	e2 c0       	rjmp	.+452    	; 0x15c6 <ProcessCommand+0x4d4>
    1402:	48 c0       	rjmp	.+144    	; 0x1494 <ProcessCommand+0x3a2>
    1404:	8e 30       	cpi	r24, 0x0E	; 14
    1406:	41 f1       	breq	.+80     	; 0x1458 <ProcessCommand+0x366>
    1408:	8f 30       	cpi	r24, 0x0F	; 15
    140a:	20 f4       	brcc	.+8      	; 0x1414 <ProcessCommand+0x322>
    140c:	8d 30       	cpi	r24, 0x0D	; 13
    140e:	09 f0       	breq	.+2      	; 0x1412 <ProcessCommand+0x320>
    1410:	da c0       	rjmp	.+436    	; 0x15c6 <ProcessCommand+0x4d4>
    1412:	18 c0       	rjmp	.+48     	; 0x1444 <ProcessCommand+0x352>
    1414:	8f 30       	cpi	r24, 0x0F	; 15
    1416:	51 f1       	breq	.+84     	; 0x146c <ProcessCommand+0x37a>
    1418:	80 31       	cpi	r24, 0x10	; 16
    141a:	09 f0       	breq	.+2      	; 0x141e <ProcessCommand+0x32c>
    141c:	d4 c0       	rjmp	.+424    	; 0x15c6 <ProcessCommand+0x4d4>
    141e:	30 c0       	rjmp	.+96     	; 0x1480 <ProcessCommand+0x38e>
                    {
                        case detMIN:   FillCmd();  FillUint16(VCO_MIN);   FillResultNoNewLinePM(newLine); break;
    1420:	7f dd       	rcall	.-1282   	; 0xf20 <FillCmd>
    1422:	60 e7       	ldi	r22, 0x70	; 112
    1424:	77 e0       	ldi	r23, 0x07	; 7
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	3d c0       	rjmp	.+122    	; 0x14a6 <ProcessCommand+0x3b4>
                        case detMAX:   FillCmd();  FillUint16(VCO_MAX);   FillResultNoNewLinePM(newLine); break;
    142c:	79 dd       	rcall	.-1294   	; 0xf20 <FillCmd>
    142e:	62 ee       	ldi	r22, 0xE2	; 226
    1430:	78 e0       	ldi	r23, 0x08	; 8
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	37 c0       	rjmp	.+110    	; 0x14a6 <ProcessCommand+0x3b4>
                        case detKBIT:  FillCmd();  FillUint16(VCO_Kbit);  FillResultNoNewLinePM(newLine); break;
    1438:	73 dd       	rcall	.-1306   	; 0xf20 <FillCmd>
    143a:	64 e9       	ldi	r22, 0x94	; 148
    143c:	71 e1       	ldi	r23, 0x11	; 17
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	31 c0       	rjmp	.+98     	; 0x14a6 <ProcessCommand+0x3b4>
#ifdef DEBUG_REGS
                        case detR00:   FillCmd();  FillUint32(tmp_r0);      FillResultNoNewLinePM(newLine); break;
    1444:	6d dd       	rcall	.-1318   	; 0xf20 <FillCmd>
    1446:	60 91 a6 01 	lds	r22, 0x01A6
    144a:	70 91 a7 01 	lds	r23, 0x01A7
    144e:	80 91 a8 01 	lds	r24, 0x01A8
    1452:	90 91 a9 01 	lds	r25, 0x01A9
    1456:	27 c0       	rjmp	.+78     	; 0x14a6 <ProcessCommand+0x3b4>
                        case detR01:   FillCmd();  FillUint32(tmp_r1);      FillResultNoNewLinePM(newLine); break;
    1458:	63 dd       	rcall	.-1338   	; 0xf20 <FillCmd>
    145a:	60 91 b0 01 	lds	r22, 0x01B0
    145e:	70 91 b1 01 	lds	r23, 0x01B1
    1462:	80 91 b2 01 	lds	r24, 0x01B2
    1466:	90 91 b3 01 	lds	r25, 0x01B3
    146a:	1d c0       	rjmp	.+58     	; 0x14a6 <ProcessCommand+0x3b4>
                        case detR02:   FillCmd();  FillUint32(tmp_r2);      FillResultNoNewLinePM(newLine); break;
    146c:	59 dd       	rcall	.-1358   	; 0xf20 <FillCmd>
    146e:	60 91 a0 01 	lds	r22, 0x01A0
    1472:	70 91 a1 01 	lds	r23, 0x01A1
    1476:	80 91 a2 01 	lds	r24, 0x01A2
    147a:	90 91 a3 01 	lds	r25, 0x01A3
    147e:	13 c0       	rjmp	.+38     	; 0x14a6 <ProcessCommand+0x3b4>
                        case detR03:   FillCmd();  FillUint32(tmp_r3);      FillResultNoNewLinePM(newLine); break;
    1480:	4f dd       	rcall	.-1378   	; 0xf20 <FillCmd>
    1482:	60 91 97 01 	lds	r22, 0x0197
    1486:	70 91 98 01 	lds	r23, 0x0198
    148a:	80 91 99 01 	lds	r24, 0x0199
    148e:	90 91 9a 01 	lds	r25, 0x019A
    1492:	09 c0       	rjmp	.+18     	; 0x14a6 <ProcessCommand+0x3b4>
                        case detEN:    FillCmd();  FillUint32(tmp_lmk);     FillResultNoNewLinePM(newLine); break;
    1494:	45 dd       	rcall	.-1398   	; 0xf20 <FillCmd>
    1496:	60 91 8f 01 	lds	r22, 0x018F
    149a:	70 91 90 01 	lds	r23, 0x0190
    149e:	80 91 91 01 	lds	r24, 0x0191
    14a2:	90 91 92 01 	lds	r25, 0x0192
    14a6:	60 dd       	rcall	.-1344   	; 0xf68 <FillUint32>
    14a8:	8b eb       	ldi	r24, 0xBB	; 187
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	ab dd       	rcall	.-1194   	; 0x1004 <FillResultNoNewLinePM>
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	8b c0       	rjmp	.+278    	; 0x15c8 <ProcessCommand+0x4d6>
                    return 1;
                }

                case trgLMK:
                {
                    switch (command.details)
    14b2:	80 91 bb 01 	lds	r24, 0x01BB
    14b6:	86 30       	cpi	r24, 0x06	; 6
    14b8:	21 f0       	breq	.+8      	; 0x14c2 <ProcessCommand+0x3d0>
    14ba:	8a 30       	cpi	r24, 0x0A	; 10
    14bc:	09 f0       	breq	.+2      	; 0x14c0 <ProcessCommand+0x3ce>
    14be:	83 c0       	rjmp	.+262    	; 0x15c6 <ProcessCommand+0x4d4>
    14c0:	04 c0       	rjmp	.+8      	; 0x14ca <ProcessCommand+0x3d8>
                    {
                        case detPORTS:    FillCmd();  FillUint16(LMK_OutMask);  FillResultNoNewLinePM(newLine); break;
    14c2:	2e dd       	rcall	.-1444   	; 0xf20 <FillCmd>
    14c4:	60 91 2d 01 	lds	r22, 0x012D
    14c8:	03 c0       	rjmp	.+6      	; 0x14d0 <ProcessCommand+0x3de>
                        case detDIVIDERS: FillCmd();  FillUint16(LMK_devider);  FillResultNoNewLinePM(newLine); break;
    14ca:	2a dd       	rcall	.-1452   	; 0xf20 <FillCmd>
    14cc:	60 91 b4 01 	lds	r22, 0x01B4
    14d0:	70 e0       	ldi	r23, 0x00	; 0
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	e7 cf       	rjmp	.-50     	; 0x14a6 <ProcessCommand+0x3b4>
            return 0;
        }
#endif
        case cmdRESET:
        {
            InitLMX2531();
    14d8:	dc dc       	rcall	.-1608   	; 0xe92 <InitLMX2531>
            InitLMK();
    14da:	5b da       	rcall	.-2890   	; 0x992 <InitLMK>
    14dc:	70 c0       	rjmp	.+224    	; 0x15be <ProcessCommand+0x4cc>
            FillResultPM(resOk);
            return 1;
    14de:	cb e9       	ldi	r28, 0x9B	; 155
    14e0:	d1 e0       	ldi	r29, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    14e2:	f9 99       	sbic	0x1f, 1	; 31
    14e4:	fe cf       	rjmp	.-4      	; 0x14e2 <ProcessCommand+0x3f0>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    14e6:	d2 bd       	out	0x22, r29	; 34
    14e8:	c1 bd       	out	0x21, r28	; 33
#endif
    EECR |= (1 << EERE);
    14ea:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    14ec:	60 b5       	in	r22, 0x20	; 32
{
    int i;
    for (i=0; i<HWI_LEN; i++)
    {
        char c = eeprom_read_byte(&eeHWInfo[i]);
        if (c == 0)
    14ee:	66 23       	and	r22, r22
    14f0:	d9 f2       	breq	.-74     	; 0x14a8 <ProcessCommand+0x3b6>
            break;
        Buffer_StoreElement(&USARTtoUSB_Buffer, c);
    14f2:	81 e3       	ldi	r24, 0x31	; 49
    14f4:	91 e0       	ldi	r25, 0x01	; 1
    14f6:	ee d1       	rcall	.+988    	; 0x18d4 <Buffer_StoreElement>
    14f8:	21 96       	adiw	r28, 0x01	; 1
}

static void LoadHwInfo(void)
{
    int i;
    for (i=0; i<HWI_LEN; i++)
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	cf 3f       	cpi	r28, 0xFF	; 255
    14fe:	d8 07       	cpc	r29, r24
    1500:	81 f7       	brne	.-32     	; 0x14e2 <ProcessCommand+0x3f0>
    1502:	d2 cf       	rjmp	.-92     	; 0x14a8 <ProcessCommand+0x3b6>
            return 1;
#endif

#ifndef NO_VERSION
        case cmdVERSION:
            FillResultPM(resVersion);
    1504:	81 ec       	ldi	r24, 0xC1	; 193
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	5c c0       	rjmp	.+184    	; 0x15c2 <ProcessCommand+0x4d0>
            return 1;
#endif

#ifndef NO_CMDEELOAD
        case cmdLOAD_EEPROM:
            LoadEEPROM();
    150a:	8f dd       	rcall	.-1250   	; 0x102a <LoadEEPROM>
    150c:	58 c0       	rjmp	.+176    	; 0x15be <ProcessCommand+0x4cc>
/** \ingroup avr_eeprom
    Write a 32-bit double word \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_dword (uint32_t *__p, uint32_t __value)
{
    __eewr_dword (__p, __value, eeprom_write_byte);
    150e:	40 91 25 01 	lds	r20, 0x0125
    1512:	50 91 26 01 	lds	r21, 0x0126
    1516:	60 91 27 01 	lds	r22, 0x0127
    151a:	70 91 28 01 	lds	r23, 0x0128
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	24 e7       	ldi	r18, 0x74	; 116
    1524:	32 e0       	ldi	r19, 0x02	; 2
    1526:	0e 94 3d 01 	call	0x27a	; 0x27a <__eewr_dword>
#ifndef VCO_FIXED
    eeprom_write_word(&eeVCO_MIN, VCO_MIN);
    eeprom_write_word(&eeVCO_MAX, VCO_MAX);
    eeprom_write_word(&eeVCO_Kbit, VCO_Kbit);
#endif
    eeprom_write_byte(&eeLMK_OutMask, LMK_OutMask);
    152a:	40 91 29 01 	lds	r20, 0x0129
    152e:	50 91 2a 01 	lds	r21, 0x012A
    1532:	60 91 2b 01 	lds	r22, 0x012B
    1536:	70 91 2c 01 	lds	r23, 0x012C
    153a:	84 e0       	ldi	r24, 0x04	; 4
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	24 e7       	ldi	r18, 0x74	; 116
    1540:	32 e0       	ldi	r19, 0x02	; 2
    1542:	0e 94 3d 01 	call	0x27a	; 0x27a <__eewr_dword>
    1546:	20 91 2d 01 	lds	r18, 0x012D
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    154a:	f9 99       	sbic	0x1f, 1	; 31
    154c:	fe cf       	rjmp	.-4      	; 0x154a <ProcessCommand+0x458>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    154e:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1550:	8e e0       	ldi	r24, 0x0E	; 14
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	92 bd       	out	0x22, r25	; 34
    1556:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    1558:	20 bd       	out	0x20, r18	; 32

    __asm__ __volatile__ (
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	fa 9a       	sbi	0x1f, 2	; 31
    1560:	f9 9a       	sbi	0x1f, 1	; 31
    1562:	0f be       	out	0x3f, r0	; 63
    eeprom_write_byte(&eeAutoFreq, AutoFreq);
    1564:	20 91 aa 01 	lds	r18, 0x01AA
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    1568:	f9 99       	sbic	0x1f, 1	; 31
    156a:	fe cf       	rjmp	.-4      	; 0x1568 <ProcessCommand+0x476>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    156c:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    156e:	8f e0       	ldi	r24, 0x0F	; 15
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	92 bd       	out	0x22, r25	; 34
    1574:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    1576:	20 bd       	out	0x20, r18	; 32

    __asm__ __volatile__ (
    1578:	0f b6       	in	r0, 0x3f	; 63
    157a:	f8 94       	cli
    157c:	fa 9a       	sbi	0x1f, 2	; 31
    157e:	f9 9a       	sbi	0x1f, 1	; 31
    1580:	0f be       	out	0x3f, r0	; 63
#ifdef PRESENT_DAC12
    eeprom_write_byte(&eeDacValue, DacValue);
#endif

#ifdef PRESENT_GPS
    eeprom_write_byte(&eeAutoGPSSync, AutoUpdateGps);
    1582:	20 91 9f 01 	lds	r18, 0x019F
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    1586:	f9 99       	sbic	0x1f, 1	; 31
    1588:	fe cf       	rjmp	.-4      	; 0x1586 <ProcessCommand+0x494>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    158a:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    158c:	82 e1       	ldi	r24, 0x12	; 18
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	92 bd       	out	0x22, r25	; 34
    1592:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    1594:	20 bd       	out	0x20, r18	; 32

    __asm__ __volatile__ (
    1596:	0f b6       	in	r0, 0x3f	; 63
    1598:	f8 94       	cli
    159a:	fa 9a       	sbi	0x1f, 2	; 31
    159c:	f9 9a       	sbi	0x1f, 1	; 31
    159e:	0f be       	out	0x3f, r0	; 63
#endif

#if TAMER_VER >= 12
    eeprom_write_byte(&eeEnableOscillator, EnableOscillator);
    15a0:	20 91 2f 01 	lds	r18, 0x012F
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    15a4:	f9 99       	sbic	0x1f, 1	; 31
    15a6:	fe cf       	rjmp	.-4      	; 0x15a4 <ProcessCommand+0x4b2>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    15a8:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    15aa:	83 e1       	ldi	r24, 0x13	; 19
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	92 bd       	out	0x22, r25	; 34
    15b0:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    15b2:	20 bd       	out	0x20, r18	; 32

    __asm__ __volatile__ (
    15b4:	0f b6       	in	r0, 0x3f	; 63
    15b6:	f8 94       	cli
    15b8:	fa 9a       	sbi	0x1f, 2	; 31
    15ba:	f9 9a       	sbi	0x1f, 1	; 31
    15bc:	0f be       	out	0x3f, r0	; 63
            return 1;
#endif

        case cmdSTORE_EEPROM:
            StoreEEPROM();
            FillResultPM(resOk);
    15be:	8e eb       	ldi	r24, 0xBE	; 190
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	2f dd       	rcall	.-1442   	; 0x1022 <FillResultPM>
    15c4:	74 cf       	rjmp	.-280    	; 0x14ae <ProcessCommand+0x3bc>
            return 1;
    15c6:	80 e0       	ldi	r24, 0x00	; 0
        default:
            return 0;

    }
	return 0;
}
    15c8:	df 91       	pop	r29
    15ca:	cf 91       	pop	r28
    15cc:	08 95       	ret

000015ce <__vector_22>:
extern uint8_t commands;
extern RingBuff_t USBtoUSART_Buffer;
extern RingBuff_t USARTtoUSB_Buffer;

ISR(SPI_STC_vect, ISR_BLOCK)
{
    15ce:	1f 92       	push	r1
    15d0:	0f 92       	push	r0
    15d2:	0f b6       	in	r0, 0x3f	; 63
    15d4:	0f 92       	push	r0
    15d6:	11 24       	eor	r1, r1
    15d8:	2f 93       	push	r18
    15da:	3f 93       	push	r19
    15dc:	4f 93       	push	r20
    15de:	5f 93       	push	r21
    15e0:	6f 93       	push	r22
    15e2:	7f 93       	push	r23
    15e4:	8f 93       	push	r24
    15e6:	9f 93       	push	r25
    15e8:	af 93       	push	r26
    15ea:	bf 93       	push	r27
    15ec:	ef 93       	push	r30
    15ee:	ff 93       	push	r31
//	if (USB_DeviceState != DEVICE_STATE_Configured)
//	{
		if (USARTtoUSB_Buffer.Elements)
    15f0:	80 91 5d 01 	lds	r24, 0x015D
    15f4:	88 23       	and	r24, r24
    15f6:	21 f0       	breq	.+8      	; 0x1600 <__vector_22+0x32>
			SPDR = Buffer_GetElement(&USARTtoUSB_Buffer);
    15f8:	81 e3       	ldi	r24, 0x31	; 49
    15fa:	91 e0       	ldi	r25, 0x01	; 1
    15fc:	b4 d1       	rcall	.+872    	; 0x1966 <Buffer_GetElement>
    15fe:	01 c0       	rjmp	.+2      	; 0x1602 <__vector_22+0x34>
		else
			SPDR = 0xff;
    1600:	8f ef       	ldi	r24, 0xFF	; 255
    1602:	8e bd       	out	0x2e, r24	; 46


	   	uint8_t byte = SPDR;
    1604:	6e b5       	in	r22, 0x2e	; 46
  	  	if (byte == '\n' || byte == '\r')
    1606:	6a 30       	cpi	r22, 0x0A	; 10
    1608:	11 f0       	breq	.+4      	; 0x160e <__vector_22+0x40>
    160a:	6d 30       	cpi	r22, 0x0D	; 13
    160c:	29 f4       	brne	.+10     	; 0x1618 <__vector_22+0x4a>
   		 	commands++;
    160e:	80 91 30 01 	lds	r24, 0x0130
    1612:	8f 5f       	subi	r24, 0xFF	; 255
    1614:	80 93 30 01 	sts	0x0130, r24

		if ((byte != 0) && (byte != 0xff))
    1618:	86 2f       	mov	r24, r22
    161a:	81 50       	subi	r24, 0x01	; 1
    161c:	8e 3f       	cpi	r24, 0xFE	; 254
    161e:	18 f4       	brcc	.+6      	; 0x1626 <__vector_22+0x58>
			Buffer_StoreElement(&USBtoUSART_Buffer, byte);
    1620:	8e e5       	ldi	r24, 0x5E	; 94
    1622:	91 e0       	ldi	r25, 0x01	; 1
    1624:	57 d1       	rcall	.+686    	; 0x18d4 <Buffer_StoreElement>
//	else
//	{
//		SPDR = 0xff;
//	}
	
}
    1626:	ff 91       	pop	r31
    1628:	ef 91       	pop	r30
    162a:	bf 91       	pop	r27
    162c:	af 91       	pop	r26
    162e:	9f 91       	pop	r25
    1630:	8f 91       	pop	r24
    1632:	7f 91       	pop	r23
    1634:	6f 91       	pop	r22
    1636:	5f 91       	pop	r21
    1638:	4f 91       	pop	r20
    163a:	3f 91       	pop	r19
    163c:	2f 91       	pop	r18
    163e:	0f 90       	pop	r0
    1640:	0f be       	out	0x3f, r0	; 63
    1642:	0f 90       	pop	r0
    1644:	1f 90       	pop	r1
    1646:	18 95       	reti

00001648 <ParseValueD>:
            return i;
    }
}

static uint8_t ParseValueD(uint8_t w1)
{
    1648:	80 53       	subi	r24, 0x30	; 48
    164a:	8a 30       	cpi	r24, 0x0A	; 10
    164c:	08 f0       	brcs	.+2      	; 0x1650 <ParseValueD+0x8>
    164e:	80 e1       	ldi	r24, 0x10	; 16
    if (w1 >= '0' && w1 <= '9')
        return w1 - '0';

    return 0x10;
}
    1650:	08 95       	ret

00001652 <IsCommandSeparator>:
    return 0x10;
}
#endif

uint8_t IsCommandSeparator(uint8_t byte)
{
    1652:	98 2f       	mov	r25, r24
	if (byte == 0 || byte == '\r' || byte == '\n')
    1654:	88 23       	and	r24, r24
    1656:	39 f0       	breq	.+14     	; 0x1666 <IsCommandSeparator+0x14>
    1658:	8d 30       	cpi	r24, 0x0D	; 13
    165a:	29 f0       	breq	.+10     	; 0x1666 <IsCommandSeparator+0x14>
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	9a 30       	cpi	r25, 0x0A	; 10
    1660:	19 f4       	brne	.+6      	; 0x1668 <IsCommandSeparator+0x16>
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	08 95       	ret
    1666:	81 e0       	ldi	r24, 0x01	; 1
    	return 1;

	return 0;
}
    1668:	08 95       	ret

0000166a <ParseCommand>:

uint8_t ParseCommand(void)
{
    166a:	df 92       	push	r13
    166c:	ef 92       	push	r14
    166e:	ff 92       	push	r15
    1670:	0f 93       	push	r16
    1672:	1f 93       	push	r17
    1674:	cf 93       	push	r28
    1676:	df 93       	push	r29

    uint8_t step = 0;
    uint8_t val = 0;


    command.cmd = 0;
    1678:	10 92 b9 01 	sts	0x01B9, r1
    command.type = 0;
    167c:	10 92 ba 01 	sts	0x01BA, r1
    command.details = 0;
    1680:	10 92 bb 01 	sts	0x01BB, r1
    command.u32data = 0;
    1684:	10 92 bc 01 	sts	0x01BC, r1
    1688:	10 92 bd 01 	sts	0x01BD, r1
    168c:	10 92 be 01 	sts	0x01BE, r1
    1690:	10 92 bf 01 	sts	0x01BF, r1
    1694:	00 e0       	ldi	r16, 0x00	; 0
    for (; step < 4; )
    {
        // Skip white spaces
        do
        {
            byte = getbyte();
    1696:	8e e5       	ldi	r24, 0x5E	; 94
    1698:	91 e0       	ldi	r25, 0x01	; 1
    169a:	65 d1       	rcall	.+714    	; 0x1966 <Buffer_GetElement>
    169c:	18 2f       	mov	r17, r24
        } while (byte == ' ');
    169e:	80 32       	cpi	r24, 0x20	; 32
    16a0:	d1 f3       	breq	.-12     	; 0x1696 <ParseCommand+0x2c>

        if (byte == ',')
    16a2:	8c 32       	cpi	r24, 0x2C	; 44
    16a4:	11 f4       	brne	.+4      	; 0x16aa <ParseCommand+0x40>
        {
            step++;
    16a6:	0f 5f       	subi	r16, 0xFF	; 255
    16a8:	d1 c0       	rjmp	.+418    	; 0x184c <ParseCommand+0x1e2>
            val = 0;
            continue;
        }

        if (IsCommandSeparator(byte))
    16aa:	d3 df       	rcall	.-90     	; 0x1652 <IsCommandSeparator>
    16ac:	88 23       	and	r24, r24
    16ae:	09 f0       	breq	.+2      	; 0x16b2 <ParseCommand+0x48>
    16b0:	cb c0       	rjmp	.+406    	; 0x1848 <ParseCommand+0x1de>
            return 1;


        if (step < 3)
    16b2:	03 30       	cpi	r16, 0x03	; 3
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <ParseCommand+0x4e>
    16b6:	49 c0       	rjmp	.+146    	; 0x174a <ParseCommand+0xe0>
        {
            byte2 = getbyte();
    16b8:	8e e5       	ldi	r24, 0x5E	; 94
    16ba:	91 e0       	ldi	r25, 0x01	; 1
    16bc:	54 d1       	rcall	.+680    	; 0x1966 <Buffer_GetElement>
    16be:	d8 2e       	mov	r13, r24
            byte3 = getbyte();
    16c0:	8e e5       	ldi	r24, 0x5E	; 94
    16c2:	91 e0       	ldi	r25, 0x01	; 1
    16c4:	50 d1       	rcall	.+672    	; 0x1966 <Buffer_GetElement>
    16c6:	e8 2e       	mov	r14, r24

			if (IsCommandSeparator(byte2) || IsCommandSeparator(byte3))
    16c8:	8d 2d       	mov	r24, r13
    16ca:	c3 df       	rcall	.-122    	; 0x1652 <IsCommandSeparator>
    16cc:	88 23       	and	r24, r24
    16ce:	09 f0       	breq	.+2      	; 0x16d2 <ParseCommand+0x68>
    16d0:	c0 c0       	rjmp	.+384    	; 0x1852 <ParseCommand+0x1e8>
    16d2:	8e 2d       	mov	r24, r14
    16d4:	be df       	rcall	.-132    	; 0x1652 <IsCommandSeparator>
    16d6:	88 23       	and	r24, r24
    16d8:	09 f0       	breq	.+2      	; 0x16dc <ParseCommand+0x72>
    16da:	bb c0       	rjmp	.+374    	; 0x1852 <ParseCommand+0x1e8>
				return 0; 

            uint8_t* mem;
            switch (step)
    16dc:	01 30       	cpi	r16, 0x01	; 1
    16de:	41 f0       	breq	.+16     	; 0x16f0 <ParseCommand+0x86>
    16e0:	01 30       	cpi	r16, 0x01	; 1
    16e2:	18 f0       	brcs	.+6      	; 0x16ea <ParseCommand+0x80>
    16e4:	02 30       	cpi	r16, 0x02	; 2
    16e6:	49 f4       	brne	.+18     	; 0x16fa <ParseCommand+0x90>
    16e8:	06 c0       	rjmp	.+12     	; 0x16f6 <ParseCommand+0x8c>
    16ea:	ca ee       	ldi	r28, 0xEA	; 234
    16ec:	d0 e0       	ldi	r29, 0x00	; 0
    16ee:	05 c0       	rjmp	.+10     	; 0x16fa <ParseCommand+0x90>
    16f0:	cc e0       	ldi	r28, 0x0C	; 12
    16f2:	d1 e0       	ldi	r29, 0x01	; 1
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <ParseCommand+0x90>
            {
                case 0: mem = pCmd; break;
                case 1: mem = pTrg; break;
    16f6:	cf e1       	ldi	r28, 0x1F	; 31
    16f8:	d1 e0       	ldi	r29, 0x01	; 1
    16fa:	ce 01       	movw	r24, r28
    16fc:	21 e0       	ldi	r18, 0x01	; 1
{
    uint8_t i = 1;

    for (;;i++)
    {
        uint8_t o1 = pgm_read_byte(table++);
    16fe:	fc 01       	movw	r30, r24
    1700:	34 91       	lpm	r19, Z+
        uint8_t o2 = pgm_read_byte(table++);
    1702:	01 96       	adiw	r24, 0x01	; 1
    1704:	fc 01       	movw	r30, r24
    1706:	54 91       	lpm	r21, Z+
    1708:	01 97       	sbiw	r24, 0x01	; 1
    170a:	fc 01       	movw	r30, r24
    170c:	32 96       	adiw	r30, 0x02	; 2
    170e:	03 96       	adiw	r24, 0x03	; 3
        uint8_t o3 = pgm_read_byte(table++);
    1710:	44 91       	lpm	r20, Z+

        if ((o1 == 0) /*|| (o2 == 0) || (o3 == 0)*/)
    1712:	33 23       	and	r19, r19
    1714:	41 f0       	breq	.+16     	; 0x1726 <ParseCommand+0xbc>
            return 0xff;

        if ((o1 == w1) && (o2 == w2) && (o3 == w3))
    1716:	31 17       	cp	r19, r17
    1718:	21 f4       	brne	.+8      	; 0x1722 <ParseCommand+0xb8>
    171a:	5d 15       	cp	r21, r13
    171c:	11 f4       	brne	.+4      	; 0x1722 <ParseCommand+0xb8>
    171e:	4e 15       	cp	r20, r14
    1720:	19 f0       	breq	.+6      	; 0x1728 <ParseCommand+0xbe>

static inline uint8_t ParseParam(uint8_t w1, uint8_t w2, uint8_t w3, uint8_t* table)
{
    uint8_t i = 1;

    for (;;i++)
    1722:	2f 5f       	subi	r18, 0xFF	; 255
    1724:	ec cf       	rjmp	.-40     	; 0x16fe <ParseCommand+0x94>
    1726:	2f ef       	ldi	r18, 0xFF	; 255
                case 0: mem = pCmd; break;
                case 1: mem = pTrg; break;
                case 2: mem = pDet; break;
            }
            val = ParseParam(byte, byte2, byte3, mem);
            switch (step)
    1728:	01 30       	cpi	r16, 0x01	; 1
    172a:	49 f0       	breq	.+18     	; 0x173e <ParseCommand+0xd4>
    172c:	01 30       	cpi	r16, 0x01	; 1
    172e:	20 f0       	brcs	.+8      	; 0x1738 <ParseCommand+0xce>
    1730:	02 30       	cpi	r16, 0x02	; 2
    1732:	09 f0       	breq	.+2      	; 0x1736 <ParseCommand+0xcc>
    1734:	8b c0       	rjmp	.+278    	; 0x184c <ParseCommand+0x1e2>
    1736:	06 c0       	rjmp	.+12     	; 0x1744 <ParseCommand+0xda>
            {
                case 0: command.cmd = val;     break;
    1738:	20 93 b9 01 	sts	0x01B9, r18
    173c:	ac cf       	rjmp	.-168    	; 0x1696 <ParseCommand+0x2c>
                case 1: command.type = val;    break;
    173e:	20 93 ba 01 	sts	0x01BA, r18
    1742:	a9 cf       	rjmp	.-174    	; 0x1696 <ParseCommand+0x2c>
                case 2: command.details = val; break;
    1744:	20 93 bb 01 	sts	0x01BB, r18
    1748:	a6 cf       	rjmp	.-180    	; 0x1696 <ParseCommand+0x2c>
        {
            uint8_t b1;
            uint8_t j;

#ifndef NO_HEXVALUES
            if ((byte == 'x') || (byte == 'X'))
    174a:	18 37       	cpi	r17, 0x78	; 120
    174c:	11 f0       	breq	.+4      	; 0x1752 <ParseCommand+0xe8>
    174e:	18 35       	cpi	r17, 0x58	; 88
    1750:	d1 f5       	brne	.+116    	; 0x17c6 <ParseCommand+0x15c>
    1752:	00 e0       	ldi	r16, 0x00	; 0
            {

              for (j = 0; j < 8; j++)
              {
                b1 = ParseValue((byte = getbyte()));
    1754:	8e e5       	ldi	r24, 0x5E	; 94
    1756:	91 e0       	ldi	r25, 0x01	; 1
    1758:	06 d1       	rcall	.+524    	; 0x1966 <Buffer_GetElement>
    175a:	18 2f       	mov	r17, r24
}

#ifndef NO_HEXVALUES
static uint8_t ParseValue(uint8_t w1)
{
    if (w1 >= '0' && w1 <= '9')
    175c:	28 2f       	mov	r18, r24
    175e:	20 53       	subi	r18, 0x30	; 48
    1760:	2a 30       	cpi	r18, 0x0A	; 10
    1762:	78 f0       	brcs	.+30     	; 0x1782 <ParseCommand+0x118>
        return w1 - '0';
    if (w1 >= 'a' && w1 <= 'f')
    1764:	81 56       	subi	r24, 0x61	; 97
    1766:	86 30       	cpi	r24, 0x06	; 6
    1768:	10 f4       	brcc	.+4      	; 0x176e <ParseCommand+0x104>
        return 10 + w1 - 'a';
    176a:	27 52       	subi	r18, 0x27	; 39
    176c:	07 c0       	rjmp	.+14     	; 0x177c <ParseCommand+0x112>
    if (w1 >= 'A' && w1 <= 'F')
    176e:	81 2f       	mov	r24, r17
    1770:	81 54       	subi	r24, 0x41	; 65
    1772:	86 30       	cpi	r24, 0x06	; 6
    1774:	08 f0       	brcs	.+2      	; 0x1778 <ParseCommand+0x10e>
    1776:	64 c0       	rjmp	.+200    	; 0x1840 <ParseCommand+0x1d6>
        return 10 + w1 - 'A';
    1778:	21 2f       	mov	r18, r17
    177a:	27 53       	subi	r18, 0x37	; 55
            {

              for (j = 0; j < 8; j++)
              {
                b1 = ParseValue((byte = getbyte()));
                if (b1 == 0x10)
    177c:	20 31       	cpi	r18, 0x10	; 16
    177e:	09 f4       	brne	.+2      	; 0x1782 <ParseCommand+0x118>
    1780:	5f c0       	rjmp	.+190    	; 0x1840 <ParseCommand+0x1d6>
                    goto skip;

                command.u32data = (command.u32data << 4) | b1;
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	40 e0       	ldi	r20, 0x00	; 0
    1786:	50 e0       	ldi	r21, 0x00	; 0
    1788:	80 91 bc 01 	lds	r24, 0x01BC
    178c:	90 91 bd 01 	lds	r25, 0x01BD
    1790:	a0 91 be 01 	lds	r26, 0x01BE
    1794:	b0 91 bf 01 	lds	r27, 0x01BF
    1798:	64 e0       	ldi	r22, 0x04	; 4
    179a:	88 0f       	add	r24, r24
    179c:	99 1f       	adc	r25, r25
    179e:	aa 1f       	adc	r26, r26
    17a0:	bb 1f       	adc	r27, r27
    17a2:	6a 95       	dec	r22
    17a4:	d1 f7       	brne	.-12     	; 0x179a <ParseCommand+0x130>
    17a6:	28 2b       	or	r18, r24
    17a8:	39 2b       	or	r19, r25
    17aa:	4a 2b       	or	r20, r26
    17ac:	5b 2b       	or	r21, r27
    17ae:	20 93 bc 01 	sts	0x01BC, r18
    17b2:	30 93 bd 01 	sts	0x01BD, r19
    17b6:	40 93 be 01 	sts	0x01BE, r20
    17ba:	50 93 bf 01 	sts	0x01BF, r21

#ifndef NO_HEXVALUES
            if ((byte == 'x') || (byte == 'X'))
            {

              for (j = 0; j < 8; j++)
    17be:	0f 5f       	subi	r16, 0xFF	; 255
    17c0:	08 30       	cpi	r16, 0x08	; 8
    17c2:	41 f6       	brne	.-112    	; 0x1754 <ParseCommand+0xea>
    17c4:	39 c0       	rjmp	.+114    	; 0x1838 <ParseCommand+0x1ce>
              }
            }
            else
#endif
            {
              b1 = ParseValueD(byte);
    17c6:	81 2f       	mov	r24, r17
    17c8:	3f df       	rcall	.-386    	; 0x1648 <ParseValueD>
              if (b1 == 0x10)
    17ca:	80 31       	cpi	r24, 0x10	; 16
    17cc:	c9 f1       	breq	.+114    	; 0x1840 <ParseCommand+0x1d6>
                    goto skip;
              command.u32data = b1;
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	a0 e0       	ldi	r26, 0x00	; 0
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	80 93 bc 01 	sts	0x01BC, r24
    17d8:	90 93 bd 01 	sts	0x01BD, r25
    17dc:	a0 93 be 01 	sts	0x01BE, r26
    17e0:	b0 93 bf 01 	sts	0x01BF, r27
    17e4:	dd 24       	eor	r13, r13
    17e6:	d3 94       	inc	r13

              for (j = 1; j < 10; j++)
              {
                b1 = ParseValueD((byte = getbyte()));
    17e8:	8e e5       	ldi	r24, 0x5E	; 94
    17ea:	91 e0       	ldi	r25, 0x01	; 1
    17ec:	bc d0       	rcall	.+376    	; 0x1966 <Buffer_GetElement>
    17ee:	18 2f       	mov	r17, r24
    17f0:	2b df       	rcall	.-426    	; 0x1648 <ParseValueD>
                if (b1 == 0x10)
    17f2:	80 31       	cpi	r24, 0x10	; 16
    17f4:	29 f1       	breq	.+74     	; 0x1840 <ParseCommand+0x1d6>
                    goto skip;

                command.u32data = (command.u32data * 10u) + b1;
    17f6:	e8 2e       	mov	r14, r24
    17f8:	ff 24       	eor	r15, r15
    17fa:	00 e0       	ldi	r16, 0x00	; 0
    17fc:	10 e0       	ldi	r17, 0x00	; 0
    17fe:	60 91 bc 01 	lds	r22, 0x01BC
    1802:	70 91 bd 01 	lds	r23, 0x01BD
    1806:	80 91 be 01 	lds	r24, 0x01BE
    180a:	90 91 bf 01 	lds	r25, 0x01BF
    180e:	2a e0       	ldi	r18, 0x0A	; 10
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	40 e0       	ldi	r20, 0x00	; 0
    1814:	50 e0       	ldi	r21, 0x00	; 0
    1816:	2f d3       	rcall	.+1630   	; 0x1e76 <__mulsi3>
    1818:	e6 0e       	add	r14, r22
    181a:	f7 1e       	adc	r15, r23
    181c:	08 1f       	adc	r16, r24
    181e:	19 1f       	adc	r17, r25
    1820:	e0 92 bc 01 	sts	0x01BC, r14
    1824:	f0 92 bd 01 	sts	0x01BD, r15
    1828:	00 93 be 01 	sts	0x01BE, r16
    182c:	10 93 bf 01 	sts	0x01BF, r17
              b1 = ParseValueD(byte);
              if (b1 == 0x10)
                    goto skip;
              command.u32data = b1;

              for (j = 1; j < 10; j++)
    1830:	d3 94       	inc	r13
    1832:	fa e0       	ldi	r31, 0x0A	; 10
    1834:	df 16       	cp	r13, r31
    1836:	c1 f6       	brne	.-80     	; 0x17e8 <ParseCommand+0x17e>
                    goto skip;

                command.u32data = (command.u32data * 10u) + b1;
              }
            }
            byte = getbyte();
    1838:	8e e5       	ldi	r24, 0x5E	; 94
    183a:	91 e0       	ldi	r25, 0x01	; 1
    183c:	94 d0       	rcall	.+296    	; 0x1966 <Buffer_GetElement>
    183e:	18 2f       	mov	r17, r24
        skip:
            if (IsCommandSeparator(byte))
    1840:	81 2f       	mov	r24, r17
    1842:	07 df       	rcall	.-498    	; 0x1652 <IsCommandSeparator>
    1844:	88 23       	and	r24, r24
    1846:	31 f0       	breq	.+12     	; 0x1854 <ParseCommand+0x1ea>
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	04 c0       	rjmp	.+8      	; 0x1854 <ParseCommand+0x1ea>
    command.cmd = 0;
    command.type = 0;
    command.details = 0;
    command.u32data = 0;

    for (; step < 4; )
    184c:	04 30       	cpi	r16, 0x04	; 4
    184e:	08 f4       	brcc	.+2      	; 0x1852 <ParseCommand+0x1e8>
    1850:	22 cf       	rjmp	.-444    	; 0x1696 <ParseCommand+0x2c>
    1852:	80 e0       	ldi	r24, 0x00	; 0
            return 0;
         }
    }

    return 0;
}
    1854:	df 91       	pop	r29
    1856:	cf 91       	pop	r28
    1858:	1f 91       	pop	r17
    185a:	0f 91       	pop	r16
    185c:	ff 90       	pop	r15
    185e:	ef 90       	pop	r14
    1860:	df 90       	pop	r13
    1862:	08 95       	ret

00001864 <CALLBACK_NONDFU_USB_GetDescriptor>:

uint16_t CALLBACK_NONDFU_USB_GetDescriptor(const uint16_t wValue, const uint8_t wIndex, void** const DescriptorAddress)

//uint16_t TRAP_NAME(1) (const uint16_t wValue, const uint8_t wIndex, void** const DescriptorAddress);
//uint16_t TRAP_NAME(1) (const uint16_t wValue, const uint8_t wIndex, void** const DescriptorAddress)
{
    1864:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;

        switch (DescriptorType)
    1866:	92 30       	cpi	r25, 0x02	; 2
    1868:	49 f0       	breq	.+18     	; 0x187c <CALLBACK_NONDFU_USB_GetDescriptor+0x18>
    186a:	93 30       	cpi	r25, 0x03	; 3
    186c:	61 f0       	breq	.+24     	; 0x1886 <CALLBACK_NONDFU_USB_GetDescriptor+0x22>
    186e:	91 30       	cpi	r25, 0x01	; 1
    1870:	f9 f4       	brne	.+62     	; 0x18b0 <CALLBACK_NONDFU_USB_GetDescriptor+0x4c>
    1872:	e0 e5       	ldi	r30, 0x50	; 80
    1874:	f1 e0       	ldi	r31, 0x01	; 1
    1876:	22 e1       	ldi	r18, 0x12	; 18
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	1e c0       	rjmp	.+60     	; 0x18b8 <CALLBACK_NONDFU_USB_GetDescriptor+0x54>
    187c:	e2 e6       	ldi	r30, 0x62	; 98
    187e:	f1 e0       	ldi	r31, 0x01	; 1
    1880:	23 e4       	ldi	r18, 0x43	; 67
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	19 c0       	rjmp	.+50     	; 0x18b8 <CALLBACK_NONDFU_USB_GetDescriptor+0x54>
            case DTYPE_Configuration:
                Address = (void*)&ConfigurationDescriptor;
                Size    = sizeof(USB_Descriptor_Configuration_t);
                break;
            case DTYPE_String:
                switch (DescriptorNumber)
    1886:	81 30       	cpi	r24, 0x01	; 1
    1888:	49 f0       	breq	.+18     	; 0x189c <CALLBACK_NONDFU_USB_GetDescriptor+0x38>
    188a:	81 30       	cpi	r24, 0x01	; 1
    188c:	18 f0       	brcs	.+6      	; 0x1894 <CALLBACK_NONDFU_USB_GetDescriptor+0x30>
    188e:	82 30       	cpi	r24, 0x02	; 2
    1890:	79 f4       	brne	.+30     	; 0x18b0 <CALLBACK_NONDFU_USB_GetDescriptor+0x4c>
    1892:	08 c0       	rjmp	.+16     	; 0x18a4 <CALLBACK_NONDFU_USB_GetDescriptor+0x40>
                {
                    case 0x00:
                        Address = (void*)&LanguageString;
                        Size    = pgm_read_byte(&LanguageString.Header.Size);
    1894:	e5 eb       	ldi	r30, 0xB5	; 181
    1896:	fe e3       	ldi	r31, 0x3E	; 62
    1898:	84 91       	lpm	r24, Z+
    189a:	07 c0       	rjmp	.+14     	; 0x18aa <CALLBACK_NONDFU_USB_GetDescriptor+0x46>
                        break;
                    case 0x01:
                        Address = (void*)&ManufacturerString;
                        Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    189c:	e5 ea       	ldi	r30, 0xA5	; 165
    189e:	f1 e0       	ldi	r31, 0x01	; 1
    18a0:	84 91       	lpm	r24, Z+
    18a2:	03 c0       	rjmp	.+6      	; 0x18aa <CALLBACK_NONDFU_USB_GetDescriptor+0x46>
                        break;
                    case 0x02:
                        Address = (void*)&ProductString;
                        Size    = pgm_read_byte(&ProductString.Header.Size);
    18a4:	ef eb       	ldi	r30, 0xBF	; 191
    18a6:	f1 e0       	ldi	r31, 0x01	; 1
    18a8:	84 91       	lpm	r24, Z+
    18aa:	28 2f       	mov	r18, r24
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	04 c0       	rjmp	.+8      	; 0x18b8 <CALLBACK_NONDFU_USB_GetDescriptor+0x54>
    18b0:	e0 e0       	ldi	r30, 0x00	; 0
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	20 e0       	ldi	r18, 0x00	; 0
    18b6:	30 e0       	ldi	r19, 0x00	; 0
                }

                break;
        }
	
	*DescriptorAddress = Address;
    18b8:	ed 93       	st	X+, r30
    18ba:	fc 93       	st	X, r31
	return Size;
}
    18bc:	c9 01       	movw	r24, r18
    18be:	08 95       	ret

000018c0 <Buffer_Initialize>:
#include <stdint.h>
#endif
#include "RingBuff.h"

void Buffer_Initialize(RingBuff_t* Buffer)
{
    18c0:	fc 01       	movw	r30, r24
	BUFF_ATOMIC_BLOCK
    18c2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    18c4:	f8 94       	cli
	{
		Buffer->InPtr    = (RingBuff_Data_t*)&Buffer->Buffer;
    18c6:	f1 a7       	std	Z+41, r31	; 0x29
    18c8:	e0 a7       	std	Z+40, r30	; 0x28
		Buffer->OutPtr   = (RingBuff_Data_t*)&Buffer->Buffer;
    18ca:	f3 a7       	std	Z+43, r31	; 0x2b
    18cc:	e2 a7       	std	Z+42, r30	; 0x2a
		Buffer->Elements = 0;
    18ce:	14 a6       	std	Z+44, r1	; 0x2c
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    18d0:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    18d2:	08 95       	ret

000018d4 <Buffer_StoreElement>:
	}
}

void Buffer_StoreElement(RingBuff_t* Buffer, RingBuff_Data_t Data)
{
    18d4:	dc 01       	movw	r26, r24
	BUFF_ATOMIC_BLOCK
    18d6:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    18d8:	f8 94       	cli
	{
	#if defined(BUFF_DROPOLD)
		if (Buffer->Elements == BUFF_LENGTH)
    18da:	9c 96       	adiw	r26, 0x2c	; 44
    18dc:	8c 91       	ld	r24, X
    18de:	9c 97       	sbiw	r26, 0x2c	; 44
    18e0:	88 32       	cpi	r24, 0x28	; 40
    18e2:	d1 f4       	brne	.+52     	; 0x1918 <Buffer_StoreElement+0x44>
		{
			Buffer->OutPtr++;
    18e4:	9a 96       	adiw	r26, 0x2a	; 42
    18e6:	8d 91       	ld	r24, X+
    18e8:	9c 91       	ld	r25, X
    18ea:	9b 97       	sbiw	r26, 0x2b	; 43
    18ec:	01 96       	adiw	r24, 0x01	; 1
    18ee:	9b 96       	adiw	r26, 0x2b	; 43
    18f0:	9c 93       	st	X, r25
    18f2:	8e 93       	st	-X, r24
    18f4:	9a 97       	sbiw	r26, 0x2a	; 42
	
			if (Buffer->OutPtr == &Buffer->Buffer[BUFF_LENGTH])
    18f6:	9a 96       	adiw	r26, 0x2a	; 42
    18f8:	2d 91       	ld	r18, X+
    18fa:	3c 91       	ld	r19, X
    18fc:	9b 97       	sbiw	r26, 0x2b	; 43
    18fe:	cd 01       	movw	r24, r26
    1900:	88 96       	adiw	r24, 0x28	; 40
    1902:	28 17       	cp	r18, r24
    1904:	39 07       	cpc	r19, r25
    1906:	79 f4       	brne	.+30     	; 0x1926 <Buffer_StoreElement+0x52>
			  Buffer->OutPtr = (RingBuff_Data_t*)&Buffer->Buffer;
    1908:	0a 2e       	mov	r0, r26
    190a:	1b 2e       	mov	r1, r27
    190c:	9b 96       	adiw	r26, 0x2b	; 43
    190e:	1c 92       	st	X, r1
    1910:	0e 92       	st	-X, r0
    1912:	11 24       	eor	r1, r1
    1914:	9a 97       	sbiw	r26, 0x2a	; 42
    1916:	07 c0       	rjmp	.+14     	; 0x1926 <Buffer_StoreElement+0x52>
		}
		else
		{
			Buffer->Elements++;
    1918:	9c 96       	adiw	r26, 0x2c	; 44
    191a:	8c 91       	ld	r24, X
    191c:	9c 97       	sbiw	r26, 0x2c	; 44
    191e:	8f 5f       	subi	r24, 0xFF	; 255
    1920:	9c 96       	adiw	r26, 0x2c	; 44
    1922:	8c 93       	st	X, r24
    1924:	9c 97       	sbiw	r26, 0x2c	; 44
		  Buffer->Elements++;
	#elif defined(BUFF_NODROPCHECK)
		  Buffer->Elements++;
	#endif
	
		*(Buffer->InPtr) = Data;
    1926:	98 96       	adiw	r26, 0x28	; 40
    1928:	ed 91       	ld	r30, X+
    192a:	fc 91       	ld	r31, X
    192c:	99 97       	sbiw	r26, 0x29	; 41
    192e:	60 83       	st	Z, r22
		Buffer->InPtr++;
    1930:	98 96       	adiw	r26, 0x28	; 40
    1932:	8d 91       	ld	r24, X+
    1934:	9c 91       	ld	r25, X
    1936:	99 97       	sbiw	r26, 0x29	; 41
    1938:	01 96       	adiw	r24, 0x01	; 1
    193a:	99 96       	adiw	r26, 0x29	; 41
    193c:	9c 93       	st	X, r25
    193e:	8e 93       	st	-X, r24
    1940:	98 97       	sbiw	r26, 0x28	; 40
	
		if (Buffer->InPtr == &Buffer->Buffer[BUFF_LENGTH])
    1942:	98 96       	adiw	r26, 0x28	; 40
    1944:	2d 91       	ld	r18, X+
    1946:	3c 91       	ld	r19, X
    1948:	99 97       	sbiw	r26, 0x29	; 41
    194a:	cd 01       	movw	r24, r26
    194c:	88 96       	adiw	r24, 0x28	; 40
    194e:	28 17       	cp	r18, r24
    1950:	39 07       	cpc	r19, r25
    1952:	39 f4       	brne	.+14     	; 0x1962 <Buffer_StoreElement+0x8e>
		  Buffer->InPtr = (RingBuff_Data_t*)&Buffer->Buffer;
    1954:	0a 2e       	mov	r0, r26
    1956:	1b 2e       	mov	r1, r27
    1958:	99 96       	adiw	r26, 0x29	; 41
    195a:	1c 92       	st	X, r1
    195c:	0e 92       	st	-X, r0
    195e:	11 24       	eor	r1, r1
    1960:	98 97       	sbiw	r26, 0x28	; 40
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1962:	4f bf       	out	0x3f, r20	; 63
    __asm__ volatile ("" ::: "memory");
    1964:	08 95       	ret

00001966 <Buffer_GetElement>:
	}
}

RingBuff_Data_t Buffer_GetElement(RingBuff_t* Buffer)
{
    1966:	dc 01       	movw	r26, r24
	RingBuff_Data_t BuffData;
	
	BUFF_ATOMIC_BLOCK
    1968:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    196a:	f8 94       	cli
	{
#if defined(BUFF_EMPTYRETURNSZERO)
		if (!(Buffer->Elements))
    196c:	9c 96       	adiw	r26, 0x2c	; 44
    196e:	8c 91       	ld	r24, X
    1970:	9c 97       	sbiw	r26, 0x2c	; 44
    1972:	88 23       	and	r24, r24
    1974:	19 f4       	brne	.+6      	; 0x197c <Buffer_GetElement+0x16>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1976:	4f bf       	out	0x3f, r20	; 63
    __asm__ volatile ("" ::: "memory");
    1978:	e0 e0       	ldi	r30, 0x00	; 0
    197a:	26 c0       	rjmp	.+76     	; 0x19c8 <Buffer_GetElement+0x62>
		  return 0;
#elif !defined(BUFF_NOEMPTYCHECK)
	#error No empty buffer check behavior specified.
#endif

		BuffData = *(Buffer->OutPtr);
    197c:	9a 96       	adiw	r26, 0x2a	; 42
    197e:	ed 91       	ld	r30, X+
    1980:	fc 91       	ld	r31, X
    1982:	9b 97       	sbiw	r26, 0x2b	; 43
    1984:	e0 81       	ld	r30, Z
	
		Buffer->OutPtr++;
    1986:	9a 96       	adiw	r26, 0x2a	; 42
    1988:	8d 91       	ld	r24, X+
    198a:	9c 91       	ld	r25, X
    198c:	9b 97       	sbiw	r26, 0x2b	; 43
    198e:	01 96       	adiw	r24, 0x01	; 1
    1990:	9b 96       	adiw	r26, 0x2b	; 43
    1992:	9c 93       	st	X, r25
    1994:	8e 93       	st	-X, r24
    1996:	9a 97       	sbiw	r26, 0x2a	; 42
		Buffer->Elements--;
    1998:	9c 96       	adiw	r26, 0x2c	; 44
    199a:	8c 91       	ld	r24, X
    199c:	9c 97       	sbiw	r26, 0x2c	; 44
    199e:	81 50       	subi	r24, 0x01	; 1
    19a0:	9c 96       	adiw	r26, 0x2c	; 44
    19a2:	8c 93       	st	X, r24
    19a4:	9c 97       	sbiw	r26, 0x2c	; 44
	
		if (Buffer->OutPtr == &Buffer->Buffer[BUFF_LENGTH])
    19a6:	9a 96       	adiw	r26, 0x2a	; 42
    19a8:	2d 91       	ld	r18, X+
    19aa:	3c 91       	ld	r19, X
    19ac:	9b 97       	sbiw	r26, 0x2b	; 43
    19ae:	cd 01       	movw	r24, r26
    19b0:	88 96       	adiw	r24, 0x28	; 40
    19b2:	28 17       	cp	r18, r24
    19b4:	39 07       	cpc	r19, r25
    19b6:	39 f4       	brne	.+14     	; 0x19c6 <Buffer_GetElement+0x60>
		  Buffer->OutPtr = (RingBuff_Data_t*)&Buffer->Buffer;
    19b8:	0a 2e       	mov	r0, r26
    19ba:	1b 2e       	mov	r1, r27
    19bc:	9b 96       	adiw	r26, 0x2b	; 43
    19be:	1c 92       	st	X, r1
    19c0:	0e 92       	st	-X, r0
    19c2:	11 24       	eor	r1, r1
    19c4:	9a 97       	sbiw	r26, 0x2a	; 42
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    19c6:	4f bf       	out	0x3f, r20	; 63
    __asm__ volatile ("" ::: "memory");
    19c8:	8e 2f       	mov	r24, r30
    19ca:	08 95       	ret

000019cc <CDC_Device_Event_Stub>:

#define  INCLUDE_FROM_CDC_CLASS_DEVICE_C
#include "CDC.h"

void CDC_Device_Event_Stub(void)
{
    19cc:	08 95       	ret

000019ce <CDC_Device_BytesReceived>:
	
	return ENDPOINT_READYWAIT_NoError;
}

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    19ce:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    19d0:	80 91 0e 01 	lds	r24, 0x010E
    19d4:	84 30       	cpi	r24, 0x04	; 4
    19d6:	09 f5       	brne	.+66     	; 0x1a1a <CDC_Device_BytesReceived+0x4c>
    19d8:	87 85       	ldd	r24, Z+15	; 0x0f
    19da:	90 89       	ldd	r25, Z+16	; 0x10
    19dc:	a1 89       	ldd	r26, Z+17	; 0x11
    19de:	b2 89       	ldd	r27, Z+18	; 0x12
    19e0:	00 97       	sbiw	r24, 0x00	; 0
    19e2:	a1 05       	cpc	r26, r1
    19e4:	b1 05       	cpc	r27, r1
    19e6:	c9 f0       	breq	.+50     	; 0x1a1a <CDC_Device_BytesReceived+0x4c>
	  return 0;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
    19e8:	85 81       	ldd	r24, Z+5	; 0x05
    19ea:	80 93 e9 00 	sts	0x00E9, r24

	if (Endpoint_IsOUTReceived() && !(Endpoint_BytesInEndpoint()))
    19ee:	80 91 e8 00 	lds	r24, 0x00E8
    19f2:	82 ff       	sbrs	r24, 2
    19f4:	0d c0       	rjmp	.+26     	; 0x1a10 <CDC_Device_BytesReceived+0x42>
    19f6:	80 91 f2 00 	lds	r24, 0x00F2
    19fa:	88 23       	and	r24, r24
    19fc:	49 f4       	brne	.+18     	; 0x1a10 <CDC_Device_BytesReceived+0x42>
	  Endpoint_ClearOUT();
    19fe:	80 91 e8 00 	lds	r24, 0x00E8
    1a02:	98 2f       	mov	r25, r24
    1a04:	9b 7f       	andi	r25, 0xFB	; 251
    1a06:	90 93 e8 00 	sts	0x00E8, r25
    1a0a:	8f 77       	andi	r24, 0x7F	; 127
    1a0c:	80 93 e8 00 	sts	0x00E8, r24

	return Endpoint_BytesInEndpoint();
    1a10:	80 91 f2 00 	lds	r24, 0x00F2
    1a14:	28 2f       	mov	r18, r24
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	02 c0       	rjmp	.+4      	; 0x1a1e <CDC_Device_BytesReceived+0x50>
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
}
    1a1e:	c9 01       	movw	r24, r18
    1a20:	08 95       	ret

00001a22 <CDC_Device_ReceiveByte>:

uint8_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* CDCInterfaceInfo)
{
    1a22:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1a24:	80 91 0e 01 	lds	r24, 0x010E
    1a28:	84 30       	cpi	r24, 0x04	; 4
    1a2a:	d9 f4       	brne	.+54     	; 0x1a62 <CDC_Device_ReceiveByte+0x40>
    1a2c:	87 85       	ldd	r24, Z+15	; 0x0f
    1a2e:	90 89       	ldd	r25, Z+16	; 0x10
    1a30:	a1 89       	ldd	r26, Z+17	; 0x11
    1a32:	b2 89       	ldd	r27, Z+18	; 0x12
    1a34:	00 97       	sbiw	r24, 0x00	; 0
    1a36:	a1 05       	cpc	r26, r1
    1a38:	b1 05       	cpc	r27, r1
    1a3a:	99 f0       	breq	.+38     	; 0x1a62 <CDC_Device_ReceiveByte+0x40>
	  return 0;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
    1a3c:	85 81       	ldd	r24, Z+5	; 0x05
    1a3e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Next byte in the currently selected endpoint's FIFO buffer
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    1a42:	20 91 f1 00 	lds	r18, 0x00F1
	
	uint8_t DataByte = Endpoint_Read_Byte();
	
	if (!(Endpoint_BytesInEndpoint()))
    1a46:	80 91 f2 00 	lds	r24, 0x00F2
    1a4a:	88 23       	and	r24, r24
    1a4c:	59 f4       	brne	.+22     	; 0x1a64 <CDC_Device_ReceiveByte+0x42>
	  Endpoint_ClearOUT();
    1a4e:	80 91 e8 00 	lds	r24, 0x00E8
    1a52:	98 2f       	mov	r25, r24
    1a54:	9b 7f       	andi	r25, 0xFB	; 251
    1a56:	90 93 e8 00 	sts	0x00E8, r25
    1a5a:	8f 77       	andi	r24, 0x7F	; 127
    1a5c:	80 93 e8 00 	sts	0x00E8, r24
    1a60:	01 c0       	rjmp	.+2      	; 0x1a64 <CDC_Device_ReceiveByte+0x42>
    1a62:	20 e0       	ldi	r18, 0x00	; 0
	  
	return DataByte;
}
    1a64:	82 2f       	mov	r24, r18
    1a66:	08 95       	ret

00001a68 <CDC_Device_Flush>:
	Endpoint_Write_Byte(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1a68:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1a6a:	80 91 0e 01 	lds	r24, 0x010E
    1a6e:	84 30       	cpi	r24, 0x04	; 4
    1a70:	51 f5       	brne	.+84     	; 0x1ac6 <CDC_Device_Flush+0x5e>
    1a72:	87 85       	ldd	r24, Z+15	; 0x0f
    1a74:	90 89       	ldd	r25, Z+16	; 0x10
    1a76:	a1 89       	ldd	r26, Z+17	; 0x11
    1a78:	b2 89       	ldd	r27, Z+18	; 0x12
    1a7a:	00 97       	sbiw	r24, 0x00	; 0
    1a7c:	a1 05       	cpc	r26, r1
    1a7e:	b1 05       	cpc	r27, r1
    1a80:	11 f1       	breq	.+68     	; 0x1ac6 <CDC_Device_Flush+0x5e>
	  return ENDPOINT_READYWAIT_NoError;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
    1a82:	81 81       	ldd	r24, Z+1	; 0x01
    1a84:	80 93 e9 00 	sts	0x00E9, r24

	if (!(Endpoint_BytesInEndpoint()))
    1a88:	80 91 f2 00 	lds	r24, 0x00F2
    1a8c:	88 23       	and	r24, r24
    1a8e:	d9 f0       	breq	.+54     	; 0x1ac6 <CDC_Device_Flush+0x5e>
	  return ENDPOINT_READYWAIT_NoError;
	
	bool BankFull = !(Endpoint_IsReadWriteAllowed());
    1a90:	80 91 e8 00 	lds	r24, 0x00E8
	
	Endpoint_ClearIN();
    1a94:	90 91 e8 00 	lds	r25, 0x00E8
    1a98:	29 2f       	mov	r18, r25
    1a9a:	2e 7f       	andi	r18, 0xFE	; 254
    1a9c:	20 93 e8 00 	sts	0x00E8, r18
    1aa0:	9f 77       	andi	r25, 0x7F	; 127
    1aa2:	90 93 e8 00 	sts	0x00E8, r25
	
	if (BankFull)
    1aa6:	85 fd       	sbrc	r24, 5
    1aa8:	0e c0       	rjmp	.+28     	; 0x1ac6 <CDC_Device_Flush+0x5e>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    1aaa:	09 d1       	rcall	.+530    	; 0x1cbe <Endpoint_WaitUntilReady>
    1aac:	28 2f       	mov	r18, r24
    1aae:	88 23       	and	r24, r24
    1ab0:	59 f4       	brne	.+22     	; 0x1ac8 <CDC_Device_Flush+0x60>
		  return ErrorCode;

		Endpoint_ClearIN();
    1ab2:	80 91 e8 00 	lds	r24, 0x00E8
    1ab6:	98 2f       	mov	r25, r24
    1ab8:	9e 7f       	andi	r25, 0xFE	; 254
    1aba:	90 93 e8 00 	sts	0x00E8, r25
    1abe:	8f 77       	andi	r24, 0x7F	; 127
    1ac0:	80 93 e8 00 	sts	0x00E8, r24
    1ac4:	01 c0       	rjmp	.+2      	; 0x1ac8 <CDC_Device_Flush+0x60>
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
	}
	
	return ENDPOINT_READYWAIT_NoError;
}
    1ac8:	82 2f       	mov	r24, r18
    1aca:	08 95       	ret

00001acc <CDC_Device_USBTask>:

	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* CDCInterfaceInfo)
{
    1acc:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1ace:	80 91 0e 01 	lds	r24, 0x010E
    1ad2:	84 30       	cpi	r24, 0x04	; 4
    1ad4:	f1 f4       	brne	.+60     	; 0x1b12 <CDC_Device_USBTask+0x46>
    1ad6:	87 85       	ldd	r24, Z+15	; 0x0f
    1ad8:	90 89       	ldd	r25, Z+16	; 0x10
    1ada:	a1 89       	ldd	r26, Z+17	; 0x11
    1adc:	b2 89       	ldd	r27, Z+18	; 0x12
    1ade:	00 97       	sbiw	r24, 0x00	; 0
    1ae0:	a1 05       	cpc	r26, r1
    1ae2:	b1 05       	cpc	r27, r1
    1ae4:	b1 f0       	breq	.+44     	; 0x1b12 <CDC_Device_USBTask+0x46>
	  return;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
    1ae6:	85 81       	ldd	r24, Z+5	; 0x05
    1ae8:	80 93 e9 00 	sts	0x00E9, r24

	if (Endpoint_IsOUTReceived() && !(Endpoint_BytesInEndpoint()))
    1aec:	80 91 e8 00 	lds	r24, 0x00E8
    1af0:	82 ff       	sbrs	r24, 2
    1af2:	0d c0       	rjmp	.+26     	; 0x1b0e <CDC_Device_USBTask+0x42>
    1af4:	80 91 f2 00 	lds	r24, 0x00F2
    1af8:	88 23       	and	r24, r24
    1afa:	49 f4       	brne	.+18     	; 0x1b0e <CDC_Device_USBTask+0x42>
	  Endpoint_ClearOUT();
    1afc:	80 91 e8 00 	lds	r24, 0x00E8
    1b00:	98 2f       	mov	r25, r24
    1b02:	9b 7f       	andi	r25, 0xFB	; 251
    1b04:	90 93 e8 00 	sts	0x00E8, r25
    1b08:	8f 77       	andi	r24, 0x7F	; 127
    1b0a:	80 93 e8 00 	sts	0x00E8, r24
	  
	CDC_Device_Flush(CDCInterfaceInfo);
    1b0e:	cf 01       	movw	r24, r30
    1b10:	ab cf       	rjmp	.-170    	; 0x1a68 <CDC_Device_Flush>
    1b12:	08 95       	ret

00001b14 <CDC_Device_SendByte>:
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
	return Endpoint_Write_Stream_LE(Data, Length, NO_STREAM_CALLBACK);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo, const uint8_t Data)
{
    1b14:	1f 93       	push	r17
    1b16:	fc 01       	movw	r30, r24
    1b18:	16 2f       	mov	r17, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1b1a:	80 91 0e 01 	lds	r24, 0x010E
    1b1e:	84 30       	cpi	r24, 0x04	; 4
    1b20:	e9 f4       	brne	.+58     	; 0x1b5c <CDC_Device_SendByte+0x48>
    1b22:	87 85       	ldd	r24, Z+15	; 0x0f
    1b24:	90 89       	ldd	r25, Z+16	; 0x10
    1b26:	a1 89       	ldd	r26, Z+17	; 0x11
    1b28:	b2 89       	ldd	r27, Z+18	; 0x12
    1b2a:	00 97       	sbiw	r24, 0x00	; 0
    1b2c:	a1 05       	cpc	r26, r1
    1b2e:	b1 05       	cpc	r27, r1
    1b30:	a9 f0       	breq	.+42     	; 0x1b5c <CDC_Device_SendByte+0x48>
	  return ENDPOINT_READYWAIT_NoError;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
    1b32:	81 81       	ldd	r24, Z+1	; 0x01
    1b34:	80 93 e9 00 	sts	0x00E9, r24

	if (!(Endpoint_IsReadWriteAllowed()))
    1b38:	80 91 e8 00 	lds	r24, 0x00E8
    1b3c:	85 fd       	sbrc	r24, 5
    1b3e:	0c c0       	rjmp	.+24     	; 0x1b58 <CDC_Device_SendByte+0x44>
	{	
		Endpoint_ClearIN();
    1b40:	80 91 e8 00 	lds	r24, 0x00E8
    1b44:	98 2f       	mov	r25, r24
    1b46:	9e 7f       	andi	r25, 0xFE	; 254
    1b48:	90 93 e8 00 	sts	0x00E8, r25
    1b4c:	8f 77       	andi	r24, 0x7F	; 127
    1b4e:	80 93 e8 00 	sts	0x00E8, r24

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    1b52:	b5 d0       	rcall	.+362    	; 0x1cbe <Endpoint_WaitUntilReady>
    1b54:	88 23       	and	r24, r24
    1b56:	19 f4       	brne	.+6      	; 0x1b5e <CDC_Device_SendByte+0x4a>
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    1b58:	10 93 f1 00 	sts	0x00F1, r17
		  return ErrorCode;
	}

	Endpoint_Write_Byte(Data);
	return ENDPOINT_READYWAIT_NoError;
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
}
    1b5e:	1f 91       	pop	r17
    1b60:	08 95       	ret

00001b62 <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* CDCInterfaceInfo)
{
    1b62:	0f 93       	push	r16
    1b64:	1f 93       	push	r17
    1b66:	cf 93       	push	r28
    1b68:	df 93       	push	r29
    1b6a:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    1b6c:	0d 96       	adiw	r24, 0x0d	; 13
    1b6e:	fc 01       	movw	r30, r24
    1b70:	89 e0       	ldi	r24, 0x09	; 9
    1b72:	df 01       	movw	r26, r30
    1b74:	1d 92       	st	X+, r1
    1b76:	8a 95       	dec	r24
    1b78:	e9 f7       	brne	.-6      	; 0x1b74 <CDC_Device_ConfigureEndpoints+0x12>

	if (!(Endpoint_ConfigureEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber, EP_TYPE_BULK,
    1b7a:	09 81       	ldd	r16, Y+1	; 0x01
    1b7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b7e:	88 23       	and	r24, r24
    1b80:	11 f4       	brne	.+4      	; 0x1b86 <CDC_Device_ConfigureEndpoints+0x24>
    1b82:	12 e0       	ldi	r17, 0x02	; 2
    1b84:	01 c0       	rjmp	.+2      	; 0x1b88 <CDC_Device_ConfigureEndpoints+0x26>
    1b86:	16 e0       	ldi	r17, 0x06	; 6
    1b88:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b8c:	0e 94 4f 18 	call	0x309e	; 0x309e <Endpoint_BytesToEPSizeMaskDynamic>
    1b90:	18 2b       	or	r17, r24
    1b92:	80 2f       	mov	r24, r16
    1b94:	61 e8       	ldi	r22, 0x81	; 129
    1b96:	41 2f       	mov	r20, r17
    1b98:	0e 94 5d 18 	call	0x30ba	; 0x30ba <Endpoint_ConfigureEndpoint_Prv>
    1b9c:	88 23       	and	r24, r24
    1b9e:	41 f1       	breq	.+80     	; 0x1bf0 <CDC_Device_ConfigureEndpoints+0x8e>
							         CDCInterfaceInfo->Config.DataINEndpointDoubleBank ? ENDPOINT_BANK_DOUBLE : ENDPOINT_BANK_SINGLE)))
	{
		return false;
	}

	if (!(Endpoint_ConfigureEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber, EP_TYPE_BULK,
    1ba0:	0d 81       	ldd	r16, Y+5	; 0x05
    1ba2:	88 85       	ldd	r24, Y+8	; 0x08
    1ba4:	88 23       	and	r24, r24
    1ba6:	11 f4       	brne	.+4      	; 0x1bac <CDC_Device_ConfigureEndpoints+0x4a>
    1ba8:	12 e0       	ldi	r17, 0x02	; 2
    1baa:	01 c0       	rjmp	.+2      	; 0x1bae <CDC_Device_ConfigureEndpoints+0x4c>
    1bac:	16 e0       	ldi	r17, 0x06	; 6
    1bae:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb0:	9f 81       	ldd	r25, Y+7	; 0x07
    1bb2:	0e 94 4f 18 	call	0x309e	; 0x309e <Endpoint_BytesToEPSizeMaskDynamic>
    1bb6:	18 2b       	or	r17, r24
    1bb8:	80 2f       	mov	r24, r16
    1bba:	60 e8       	ldi	r22, 0x80	; 128
    1bbc:	41 2f       	mov	r20, r17
    1bbe:	0e 94 5d 18 	call	0x30ba	; 0x30ba <Endpoint_ConfigureEndpoint_Prv>
    1bc2:	88 23       	and	r24, r24
    1bc4:	a9 f0       	breq	.+42     	; 0x1bf0 <CDC_Device_ConfigureEndpoints+0x8e>
	                                 CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank ? ENDPOINT_BANK_DOUBLE : ENDPOINT_BANK_SINGLE)))
	{
		return false;
	}

	if (!(Endpoint_ConfigureEndpoint(CDCInterfaceInfo->Config.NotificationEndpointNumber, EP_TYPE_INTERRUPT,
    1bc6:	09 85       	ldd	r16, Y+9	; 0x09
    1bc8:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bca:	88 23       	and	r24, r24
    1bcc:	11 f4       	brne	.+4      	; 0x1bd2 <CDC_Device_ConfigureEndpoints+0x70>
    1bce:	12 e0       	ldi	r17, 0x02	; 2
    1bd0:	01 c0       	rjmp	.+2      	; 0x1bd4 <CDC_Device_ConfigureEndpoints+0x72>
    1bd2:	16 e0       	ldi	r17, 0x06	; 6
    1bd4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bd6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bd8:	0e 94 4f 18 	call	0x309e	; 0x309e <Endpoint_BytesToEPSizeMaskDynamic>
    1bdc:	18 2b       	or	r17, r24
    1bde:	80 2f       	mov	r24, r16
    1be0:	61 ec       	ldi	r22, 0xC1	; 193
    1be2:	41 2f       	mov	r20, r17
    1be4:	0e 94 5d 18 	call	0x30ba	; 0x30ba <Endpoint_ConfigureEndpoint_Prv>
    1be8:	88 23       	and	r24, r24
    1bea:	19 f0       	breq	.+6      	; 0x1bf2 <CDC_Device_ConfigureEndpoints+0x90>
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	01 c0       	rjmp	.+2      	; 0x1bf2 <CDC_Device_ConfigureEndpoints+0x90>
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
	{
		return false;
	}

	return true;
}
    1bf2:	df 91       	pop	r29
    1bf4:	cf 91       	pop	r28
    1bf6:	1f 91       	pop	r17
    1bf8:	0f 91       	pop	r16
    1bfa:	08 95       	ret

00001bfc <CDC_Device_ProcessControlRequest>:
{

}

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* CDCInterfaceInfo)
{
    1bfc:	cf 93       	push	r28
    1bfe:	df 93       	push	r29
    1c00:	ec 01       	movw	r28, r24
	if (!(Endpoint_IsSETUPReceived()))
    1c02:	80 91 e8 00 	lds	r24, 0x00E8
    1c06:	83 ff       	sbrs	r24, 3
    1c08:	57 c0       	rjmp	.+174    	; 0x1cb8 <CDC_Device_ProcessControlRequest+0xbc>
	  return;
	  
	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    1c0a:	88 81       	ld	r24, Y
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	20 91 0a 01 	lds	r18, 0x010A
    1c12:	30 91 0b 01 	lds	r19, 0x010B
    1c16:	28 17       	cp	r18, r24
    1c18:	39 07       	cpc	r19, r25
    1c1a:	09 f0       	breq	.+2      	; 0x1c1e <CDC_Device_ProcessControlRequest+0x22>
    1c1c:	4d c0       	rjmp	.+154    	; 0x1cb8 <CDC_Device_ProcessControlRequest+0xbc>
	  return;

	switch (USB_ControlRequest.bRequest)
    1c1e:	80 91 07 01 	lds	r24, 0x0107
    1c22:	81 32       	cpi	r24, 0x21	; 33
    1c24:	31 f0       	breq	.+12     	; 0x1c32 <CDC_Device_ProcessControlRequest+0x36>
    1c26:	82 32       	cpi	r24, 0x22	; 34
    1c28:	b9 f1       	breq	.+110    	; 0x1c98 <CDC_Device_ProcessControlRequest+0x9c>
    1c2a:	80 32       	cpi	r24, 0x20	; 32
    1c2c:	09 f0       	breq	.+2      	; 0x1c30 <CDC_Device_ProcessControlRequest+0x34>
    1c2e:	44 c0       	rjmp	.+136    	; 0x1cb8 <CDC_Device_ProcessControlRequest+0xbc>
    1c30:	19 c0       	rjmp	.+50     	; 0x1c64 <CDC_Device_ProcessControlRequest+0x68>
	{
		case REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1c32:	80 91 06 01 	lds	r24, 0x0106
    1c36:	81 3a       	cpi	r24, 0xA1	; 161
    1c38:	09 f0       	breq	.+2      	; 0x1c3c <CDC_Device_ProcessControlRequest+0x40>
    1c3a:	3e c0       	rjmp	.+124    	; 0x1cb8 <CDC_Device_ProcessControlRequest+0xbc>
			{
				Endpoint_ClearSETUP();
    1c3c:	80 91 e8 00 	lds	r24, 0x00E8
    1c40:	87 7f       	andi	r24, 0xF7	; 247
    1c42:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_Write_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
    1c46:	ce 01       	movw	r24, r28
    1c48:	0f 96       	adiw	r24, 0x0f	; 15
    1c4a:	67 e0       	ldi	r22, 0x07	; 7
    1c4c:	70 e0       	ldi	r23, 0x00	; 0
    1c4e:	62 d0       	rcall	.+196    	; 0x1d14 <Endpoint_Write_Control_Stream_LE>
				Endpoint_ClearOUT();
    1c50:	80 91 e8 00 	lds	r24, 0x00E8
    1c54:	98 2f       	mov	r25, r24
    1c56:	9b 7f       	andi	r25, 0xFB	; 251
    1c58:	90 93 e8 00 	sts	0x00E8, r25
    1c5c:	8f 77       	andi	r24, 0x7F	; 127
    1c5e:	80 93 e8 00 	sts	0x00E8, r24
    1c62:	2a c0       	rjmp	.+84     	; 0x1cb8 <CDC_Device_ProcessControlRequest+0xbc>
			}
			
			break;
		case REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1c64:	80 91 06 01 	lds	r24, 0x0106
    1c68:	81 32       	cpi	r24, 0x21	; 33
    1c6a:	31 f5       	brne	.+76     	; 0x1cb8 <CDC_Device_ProcessControlRequest+0xbc>
			{
				Endpoint_ClearSETUP();
    1c6c:	80 91 e8 00 	lds	r24, 0x00E8
    1c70:	87 7f       	andi	r24, 0xF7	; 247
    1c72:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_Read_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
    1c76:	ce 01       	movw	r24, r28
    1c78:	0f 96       	adiw	r24, 0x0f	; 15
    1c7a:	67 e0       	ldi	r22, 0x07	; 7
    1c7c:	70 e0       	ldi	r23, 0x00	; 0
    1c7e:	a8 d0       	rcall	.+336    	; 0x1dd0 <Endpoint_Read_Control_Stream_LE>
				Endpoint_ClearIN();
    1c80:	80 91 e8 00 	lds	r24, 0x00E8
    1c84:	98 2f       	mov	r25, r24
    1c86:	9e 7f       	andi	r25, 0xFE	; 254
    1c88:	90 93 e8 00 	sts	0x00E8, r25
    1c8c:	8f 77       	andi	r24, 0x7F	; 127
    1c8e:	80 93 e8 00 	sts	0x00E8, r24

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    1c92:	ce 01       	movw	r24, r28
    1c94:	9b de       	rcall	.-714    	; 0x19cc <CDC_Device_Event_Stub>
    1c96:	10 c0       	rjmp	.+32     	; 0x1cb8 <CDC_Device_ProcessControlRequest+0xbc>
			}
	
			break;
		case REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1c98:	80 91 06 01 	lds	r24, 0x0106
    1c9c:	81 32       	cpi	r24, 0x21	; 33
    1c9e:	61 f4       	brne	.+24     	; 0x1cb8 <CDC_Device_ProcessControlRequest+0xbc>
			{				
				Endpoint_ClearSETUP();
    1ca0:	80 91 e8 00 	lds	r24, 0x00E8
    1ca4:	87 7f       	andi	r24, 0xF7	; 247
    1ca6:	80 93 e8 00 	sts	0x00E8, r24
				
				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    1caa:	80 91 08 01 	lds	r24, 0x0108
    1cae:	8d 87       	std	Y+13, r24	; 0x0d
				
				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    1cb0:	ce 01       	movw	r24, r28
    1cb2:	8c de       	rcall	.-744    	; 0x19cc <CDC_Device_Event_Stub>

				Endpoint_ClearStatusStage();
    1cb4:	0e 94 87 18 	call	0x310e	; 0x310e <Endpoint_ClearStatusStage>
			}
	
			break;
	}
}
    1cb8:	df 91       	pop	r29
    1cba:	cf 91       	pop	r28
    1cbc:	08 95       	ret

00001cbe <Endpoint_WaitUntilReady>:
}
#endif

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
    1cbe:	94 e6       	ldi	r25, 0x64	; 100
	uint16_t TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
	#endif

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
    1cc0:	80 91 ec 00 	lds	r24, 0x00EC
    1cc4:	80 ff       	sbrs	r24, 0
    1cc6:	05 c0       	rjmp	.+10     	; 0x1cd2 <Endpoint_WaitUntilReady+0x14>
		{
			if (Endpoint_IsINReady())
    1cc8:	80 91 e8 00 	lds	r24, 0x00E8
    1ccc:	80 ff       	sbrs	r24, 0
    1cce:	05 c0       	rjmp	.+10     	; 0x1cda <Endpoint_WaitUntilReady+0x1c>
    1cd0:	1f c0       	rjmp	.+62     	; 0x1d10 <Endpoint_WaitUntilReady+0x52>
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1cd2:	80 91 e8 00 	lds	r24, 0x00E8
    1cd6:	82 fd       	sbrc	r24, 2
    1cd8:	1b c0       	rjmp	.+54     	; 0x1d10 <Endpoint_WaitUntilReady+0x52>
			  return ENDPOINT_READYWAIT_NoError;		
		}
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
    1cda:	80 91 0e 01 	lds	r24, 0x010E
    1cde:	88 23       	and	r24, r24
    1ce0:	11 f4       	brne	.+4      	; 0x1ce6 <Endpoint_WaitUntilReady+0x28>
    1ce2:	82 e0       	ldi	r24, 0x02	; 2
    1ce4:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (Endpoint_IsStalled())
    1ce6:	80 91 eb 00 	lds	r24, 0x00EB
    1cea:	85 ff       	sbrs	r24, 5
    1cec:	02 c0       	rjmp	.+4      	; 0x1cf2 <Endpoint_WaitUntilReady+0x34>
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
			  
		if (USB_INT_HasOccurred(USB_INT_SOFI))
    1cf2:	80 91 e1 00 	lds	r24, 0x00E1
    1cf6:	82 ff       	sbrs	r24, 2
    1cf8:	e3 cf       	rjmp	.-58     	; 0x1cc0 <Endpoint_WaitUntilReady+0x2>
		{
			USB_INT_Clear(USB_INT_SOFI);
    1cfa:	80 91 e1 00 	lds	r24, 0x00E1
    1cfe:	8b 7f       	andi	r24, 0xFB	; 251
    1d00:	80 93 e1 00 	sts	0x00E1, r24

			if (!(TimeoutMSRem--))
    1d04:	99 23       	and	r25, r25
    1d06:	11 f4       	brne	.+4      	; 0x1d0c <Endpoint_WaitUntilReady+0x4e>
    1d08:	83 e0       	ldi	r24, 0x03	; 3
    1d0a:	08 95       	ret
    1d0c:	91 50       	subi	r25, 0x01	; 1
    1d0e:	d8 cf       	rjmp	.-80     	; 0x1cc0 <Endpoint_WaitUntilReady+0x2>
    1d10:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1d12:	08 95       	ret

00001d14 <Endpoint_Write_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer, uint16_t Length)
{
    1d14:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;
	
	if (Length > USB_ControlRequest.wLength)
    1d16:	40 91 0c 01 	lds	r20, 0x010C
    1d1a:	50 91 0d 01 	lds	r21, 0x010D
    1d1e:	46 17       	cp	r20, r22
    1d20:	57 07       	cpc	r21, r23
    1d22:	28 f4       	brcc	.+10     	; 0x1d2e <Endpoint_Write_Control_Stream_LE+0x1a>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer, uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1d24:	f9 01       	movw	r30, r18
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
			}
			
			LastPacketFull = (Endpoint_BytesInEndpoint() == USB_ControlEndpointSize);
    1d26:	30 91 00 01 	lds	r19, 0x0100
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	3f c0       	rjmp	.+126    	; 0x1dac <Endpoint_Write_Control_Stream_LE+0x98>
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;
	
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1d2e:	61 15       	cp	r22, r1
    1d30:	71 05       	cpc	r23, r1
    1d32:	11 f0       	breq	.+4      	; 0x1d38 <Endpoint_Write_Control_Stream_LE+0x24>
    1d34:	ab 01       	movw	r20, r22
    1d36:	f6 cf       	rjmp	.-20     	; 0x1d24 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();
    1d38:	80 91 e8 00 	lds	r24, 0x00E8
    1d3c:	98 2f       	mov	r25, r24
    1d3e:	9e 7f       	andi	r25, 0xFE	; 254
    1d40:	90 93 e8 00 	sts	0x00E8, r25
    1d44:	8f 77       	andi	r24, 0x7F	; 127
    1d46:	80 93 e8 00 	sts	0x00E8, r24
    1d4a:	40 e0       	ldi	r20, 0x00	; 0
    1d4c:	50 e0       	ldi	r21, 0x00	; 0
    1d4e:	ea cf       	rjmp	.-44     	; 0x1d24 <Endpoint_Write_Control_Stream_LE+0x10>

	while (Length || LastPacketFull)
	{
		if (Endpoint_IsSETUPReceived())
    1d50:	80 91 e8 00 	lds	r24, 0x00E8
    1d54:	83 ff       	sbrs	r24, 3
    1d56:	02 c0       	rjmp	.+4      	; 0x1d5c <Endpoint_Write_Control_Stream_LE+0x48>
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    1d5c:	80 91 e8 00 	lds	r24, 0x00E8
    1d60:	82 fd       	sbrc	r24, 2
    1d62:	2e c0       	rjmp	.+92     	; 0x1dc0 <Endpoint_Write_Control_Stream_LE+0xac>
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
    1d64:	80 91 0e 01 	lds	r24, 0x010E
    1d68:	88 23       	and	r24, r24
    1d6a:	81 f1       	breq	.+96     	; 0x1dcc <Endpoint_Write_Control_Stream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		  
		if (Endpoint_IsINReady())
    1d6c:	80 91 e8 00 	lds	r24, 0x00E8
    1d70:	80 ff       	sbrs	r24, 0
    1d72:	1c c0       	rjmp	.+56     	; 0x1dac <Endpoint_Write_Control_Stream_LE+0x98>
    1d74:	05 c0       	rjmp	.+10     	; 0x1d80 <Endpoint_Write_Control_Stream_LE+0x6c>
		{
			while (Length && (Endpoint_BytesInEndpoint() < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1d76:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    1d78:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
    1d7c:	41 50       	subi	r20, 0x01	; 1
    1d7e:	50 40       	sbci	r21, 0x00	; 0
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		  
		if (Endpoint_IsINReady())
		{
			while (Length && (Endpoint_BytesInEndpoint() < USB_ControlEndpointSize))
    1d80:	41 15       	cp	r20, r1
    1d82:	51 05       	cpc	r21, r1
    1d84:	21 f0       	breq	.+8      	; 0x1d8e <Endpoint_Write_Control_Stream_LE+0x7a>
    1d86:	80 91 f2 00 	lds	r24, 0x00F2
    1d8a:	83 17       	cp	r24, r19
    1d8c:	a0 f3       	brcs	.-24     	; 0x1d76 <Endpoint_Write_Control_Stream_LE+0x62>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
			}
			
			LastPacketFull = (Endpoint_BytesInEndpoint() == USB_ControlEndpointSize);
    1d8e:	80 91 f2 00 	lds	r24, 0x00F2
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	83 17       	cp	r24, r19
    1d96:	09 f4       	brne	.+2      	; 0x1d9a <Endpoint_Write_Control_Stream_LE+0x86>
    1d98:	21 e0       	ldi	r18, 0x01	; 1
			Endpoint_ClearIN();
    1d9a:	80 91 e8 00 	lds	r24, 0x00E8
    1d9e:	98 2f       	mov	r25, r24
    1da0:	9e 7f       	andi	r25, 0xFE	; 254
    1da2:	90 93 e8 00 	sts	0x00E8, r25
    1da6:	8f 77       	andi	r24, 0x7F	; 127
    1da8:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1dac:	41 15       	cp	r20, r1
    1dae:	51 05       	cpc	r21, r1
    1db0:	79 f6       	brne	.-98     	; 0x1d50 <Endpoint_Write_Control_Stream_LE+0x3c>
    1db2:	22 23       	and	r18, r18
    1db4:	69 f6       	brne	.-102    	; 0x1d50 <Endpoint_Write_Control_Stream_LE+0x3c>
    1db6:	04 c0       	rjmp	.+8      	; 0x1dc0 <Endpoint_Write_Control_Stream_LE+0xac>
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
    1db8:	80 91 0e 01 	lds	r24, 0x010E
    1dbc:	88 23       	and	r24, r24
    1dbe:	31 f0       	breq	.+12     	; 0x1dcc <Endpoint_Write_Control_Stream_LE+0xb8>
			LastPacketFull = (Endpoint_BytesInEndpoint() == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
    1dc0:	80 91 e8 00 	lds	r24, 0x00E8
    1dc4:	82 ff       	sbrs	r24, 2
    1dc6:	f8 cf       	rjmp	.-16     	; 0x1db8 <Endpoint_Write_Control_Stream_LE+0xa4>
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	08 95       	ret
    1dcc:	82 e0       	ldi	r24, 0x02	; 2
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;	
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1dce:	08 95       	ret

00001dd0 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* Buffer, uint16_t Length)
{
    1dd0:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	
	if (!(Length))
    1dd2:	61 15       	cp	r22, r1
    1dd4:	71 05       	cpc	r23, r1
    1dd6:	49 f4       	brne	.+18     	; 0x1dea <Endpoint_Read_Control_Stream_LE+0x1a>
	  Endpoint_ClearOUT();
    1dd8:	80 91 e8 00 	lds	r24, 0x00E8
    1ddc:	98 2f       	mov	r25, r24
    1dde:	9b 7f       	andi	r25, 0xFB	; 251
    1de0:	90 93 e8 00 	sts	0x00E8, r25
    1de4:	8f 77       	andi	r24, 0x7F	; 127
    1de6:	80 93 e8 00 	sts	0x00E8, r24
uint8_t TEMPLATE_FUNC_NAME (void* Buffer, uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1dea:	f9 01       	movw	r30, r18
    1dec:	22 c0       	rjmp	.+68     	; 0x1e32 <Endpoint_Read_Control_Stream_LE+0x62>
	if (!(Length))
	  Endpoint_ClearOUT();
	
	while (Length)
	{
		if (Endpoint_IsSETUPReceived())
    1dee:	80 91 e8 00 	lds	r24, 0x00E8
    1df2:	83 ff       	sbrs	r24, 3
    1df4:	02 c0       	rjmp	.+4      	; 0x1dfa <Endpoint_Read_Control_Stream_LE+0x2a>
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (USB_DeviceState == DEVICE_STATE_Unattached)
    1dfa:	80 91 0e 01 	lds	r24, 0x010E
    1dfe:	88 23       	and	r24, r24
    1e00:	31 f1       	breq	.+76     	; 0x1e4e <Endpoint_Read_Control_Stream_LE+0x7e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		  
		if (Endpoint_IsOUTReceived())
    1e02:	80 91 e8 00 	lds	r24, 0x00E8
    1e06:	82 ff       	sbrs	r24, 2
    1e08:	f2 cf       	rjmp	.-28     	; 0x1dee <Endpoint_Read_Control_Stream_LE+0x1e>
    1e0a:	06 c0       	rjmp	.+12     	; 0x1e18 <Endpoint_Read_Control_Stream_LE+0x48>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    1e0c:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1e10:	81 93       	st	Z+, r24
				Length--;
    1e12:	61 50       	subi	r22, 0x01	; 1
    1e14:	70 40       	sbci	r23, 0x00	; 0
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		  
		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    1e16:	21 f0       	breq	.+8      	; 0x1e20 <Endpoint_Read_Control_Stream_LE+0x50>
    1e18:	80 91 f2 00 	lds	r24, 0x00F2
    1e1c:	88 23       	and	r24, r24
    1e1e:	b1 f7       	brne	.-20     	; 0x1e0c <Endpoint_Read_Control_Stream_LE+0x3c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
			}
			
			Endpoint_ClearOUT();
    1e20:	80 91 e8 00 	lds	r24, 0x00E8
    1e24:	98 2f       	mov	r25, r24
    1e26:	9b 7f       	andi	r25, 0xFB	; 251
    1e28:	90 93 e8 00 	sts	0x00E8, r25
    1e2c:	8f 77       	andi	r24, 0x7F	; 127
    1e2e:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	
	if (!(Length))
	  Endpoint_ClearOUT();
	
	while (Length)
    1e32:	61 15       	cp	r22, r1
    1e34:	71 05       	cpc	r23, r1
    1e36:	d9 f6       	brne	.-74     	; 0x1dee <Endpoint_Read_Control_Stream_LE+0x1e>
    1e38:	04 c0       	rjmp	.+8      	; 0x1e42 <Endpoint_Read_Control_Stream_LE+0x72>
		}		  
	}
	
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
    1e3a:	80 91 0e 01 	lds	r24, 0x010E
    1e3e:	88 23       	and	r24, r24
    1e40:	31 f0       	breq	.+12     	; 0x1e4e <Endpoint_Read_Control_Stream_LE+0x7e>
			
			Endpoint_ClearOUT();
		}		  
	}
	
	while (!(Endpoint_IsINReady()))
    1e42:	80 91 e8 00 	lds	r24, 0x00E8
    1e46:	80 ff       	sbrs	r24, 0
    1e48:	f8 cf       	rjmp	.-16     	; 0x1e3a <Endpoint_Read_Control_Stream_LE+0x6a>
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	08 95       	ret
    1e4e:	82 e0       	ldi	r24, 0x02	; 2
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
	}
	
	return ENDPOINT_RWCSTREAM_NoError;
}
    1e50:	08 95       	ret

00001e52 <__mulhi3>:
    1e52:	55 27       	eor	r21, r21
    1e54:	00 24       	eor	r0, r0

00001e56 <__mulhi3_loop>:
    1e56:	80 ff       	sbrs	r24, 0
    1e58:	02 c0       	rjmp	.+4      	; 0x1e5e <__mulhi3_skip1>
    1e5a:	06 0e       	add	r0, r22
    1e5c:	57 1f       	adc	r21, r23

00001e5e <__mulhi3_skip1>:
    1e5e:	66 0f       	add	r22, r22
    1e60:	77 1f       	adc	r23, r23
    1e62:	61 15       	cp	r22, r1
    1e64:	71 05       	cpc	r23, r1
    1e66:	21 f0       	breq	.+8      	; 0x1e70 <__mulhi3_exit>
    1e68:	96 95       	lsr	r25
    1e6a:	87 95       	ror	r24
    1e6c:	00 97       	sbiw	r24, 0x00	; 0
    1e6e:	99 f7       	brne	.-26     	; 0x1e56 <__mulhi3_loop>

00001e70 <__mulhi3_exit>:
    1e70:	95 2f       	mov	r25, r21
    1e72:	80 2d       	mov	r24, r0
    1e74:	08 95       	ret

00001e76 <__mulsi3>:
    1e76:	ff 27       	eor	r31, r31
    1e78:	ee 27       	eor	r30, r30
    1e7a:	bb 27       	eor	r27, r27
    1e7c:	aa 27       	eor	r26, r26

00001e7e <__mulsi3_loop>:
    1e7e:	60 ff       	sbrs	r22, 0
    1e80:	04 c0       	rjmp	.+8      	; 0x1e8a <__mulsi3_skip1>
    1e82:	a2 0f       	add	r26, r18
    1e84:	b3 1f       	adc	r27, r19
    1e86:	e4 1f       	adc	r30, r20
    1e88:	f5 1f       	adc	r31, r21

00001e8a <__mulsi3_skip1>:
    1e8a:	22 0f       	add	r18, r18
    1e8c:	33 1f       	adc	r19, r19
    1e8e:	44 1f       	adc	r20, r20
    1e90:	55 1f       	adc	r21, r21
    1e92:	96 95       	lsr	r25
    1e94:	87 95       	ror	r24
    1e96:	77 95       	ror	r23
    1e98:	67 95       	ror	r22
    1e9a:	89 f7       	brne	.-30     	; 0x1e7e <__mulsi3_loop>
    1e9c:	00 97       	sbiw	r24, 0x00	; 0
    1e9e:	76 07       	cpc	r23, r22
    1ea0:	71 f7       	brne	.-36     	; 0x1e7e <__mulsi3_loop>

00001ea2 <__mulsi3_exit>:
    1ea2:	cf 01       	movw	r24, r30
    1ea4:	bd 01       	movw	r22, r26
    1ea6:	08 95       	ret

00001ea8 <__udivmodhi4>:
    1ea8:	aa 1b       	sub	r26, r26
    1eaa:	bb 1b       	sub	r27, r27
    1eac:	51 e1       	ldi	r21, 0x11	; 17
    1eae:	07 c0       	rjmp	.+14     	; 0x1ebe <__udivmodhi4_ep>

00001eb0 <__udivmodhi4_loop>:
    1eb0:	aa 1f       	adc	r26, r26
    1eb2:	bb 1f       	adc	r27, r27
    1eb4:	a6 17       	cp	r26, r22
    1eb6:	b7 07       	cpc	r27, r23
    1eb8:	10 f0       	brcs	.+4      	; 0x1ebe <__udivmodhi4_ep>
    1eba:	a6 1b       	sub	r26, r22
    1ebc:	b7 0b       	sbc	r27, r23

00001ebe <__udivmodhi4_ep>:
    1ebe:	88 1f       	adc	r24, r24
    1ec0:	99 1f       	adc	r25, r25
    1ec2:	5a 95       	dec	r21
    1ec4:	a9 f7       	brne	.-22     	; 0x1eb0 <__udivmodhi4_loop>
    1ec6:	80 95       	com	r24
    1ec8:	90 95       	com	r25
    1eca:	bc 01       	movw	r22, r24
    1ecc:	cd 01       	movw	r24, r26
    1ece:	08 95       	ret

00001ed0 <__udivmodsi4>:
    1ed0:	a1 e2       	ldi	r26, 0x21	; 33
    1ed2:	1a 2e       	mov	r1, r26
    1ed4:	aa 1b       	sub	r26, r26
    1ed6:	bb 1b       	sub	r27, r27
    1ed8:	fd 01       	movw	r30, r26
    1eda:	0d c0       	rjmp	.+26     	; 0x1ef6 <__udivmodsi4_ep>

00001edc <__udivmodsi4_loop>:
    1edc:	aa 1f       	adc	r26, r26
    1ede:	bb 1f       	adc	r27, r27
    1ee0:	ee 1f       	adc	r30, r30
    1ee2:	ff 1f       	adc	r31, r31
    1ee4:	a2 17       	cp	r26, r18
    1ee6:	b3 07       	cpc	r27, r19
    1ee8:	e4 07       	cpc	r30, r20
    1eea:	f5 07       	cpc	r31, r21
    1eec:	20 f0       	brcs	.+8      	; 0x1ef6 <__udivmodsi4_ep>
    1eee:	a2 1b       	sub	r26, r18
    1ef0:	b3 0b       	sbc	r27, r19
    1ef2:	e4 0b       	sbc	r30, r20
    1ef4:	f5 0b       	sbc	r31, r21

00001ef6 <__udivmodsi4_ep>:
    1ef6:	66 1f       	adc	r22, r22
    1ef8:	77 1f       	adc	r23, r23
    1efa:	88 1f       	adc	r24, r24
    1efc:	99 1f       	adc	r25, r25
    1efe:	1a 94       	dec	r1
    1f00:	69 f7       	brne	.-38     	; 0x1edc <__udivmodsi4_loop>
    1f02:	60 95       	com	r22
    1f04:	70 95       	com	r23
    1f06:	80 95       	com	r24
    1f08:	90 95       	com	r25
    1f0a:	9b 01       	movw	r18, r22
    1f0c:	ac 01       	movw	r20, r24
    1f0e:	bd 01       	movw	r22, r26
    1f10:	cf 01       	movw	r24, r30
    1f12:	08 95       	ret

00001f14 <__divmodsi4>:
    1f14:	97 fb       	bst	r25, 7
    1f16:	09 2e       	mov	r0, r25
    1f18:	05 26       	eor	r0, r21
    1f1a:	0e d0       	rcall	.+28     	; 0x1f38 <__divmodsi4_neg1>
    1f1c:	57 fd       	sbrc	r21, 7
    1f1e:	04 d0       	rcall	.+8      	; 0x1f28 <__divmodsi4_neg2>
    1f20:	d7 df       	rcall	.-82     	; 0x1ed0 <__udivmodsi4>
    1f22:	0a d0       	rcall	.+20     	; 0x1f38 <__divmodsi4_neg1>
    1f24:	00 1c       	adc	r0, r0
    1f26:	38 f4       	brcc	.+14     	; 0x1f36 <__divmodsi4_exit>

00001f28 <__divmodsi4_neg2>:
    1f28:	50 95       	com	r21
    1f2a:	40 95       	com	r20
    1f2c:	30 95       	com	r19
    1f2e:	21 95       	neg	r18
    1f30:	3f 4f       	sbci	r19, 0xFF	; 255
    1f32:	4f 4f       	sbci	r20, 0xFF	; 255
    1f34:	5f 4f       	sbci	r21, 0xFF	; 255

00001f36 <__divmodsi4_exit>:
    1f36:	08 95       	ret

00001f38 <__divmodsi4_neg1>:
    1f38:	f6 f7       	brtc	.-4      	; 0x1f36 <__divmodsi4_exit>
    1f3a:	90 95       	com	r25
    1f3c:	80 95       	com	r24
    1f3e:	70 95       	com	r23
    1f40:	61 95       	neg	r22
    1f42:	7f 4f       	sbci	r23, 0xFF	; 255
    1f44:	8f 4f       	sbci	r24, 0xFF	; 255
    1f46:	9f 4f       	sbci	r25, 0xFF	; 255
    1f48:	08 95       	ret

00001f4a <_exit>:
    1f4a:	f8 94       	cli

00001f4c <__stop_program>:
    1f4c:	ff cf       	rjmp	.-2      	; 0x1f4c <__stop_program>
Disassembly of section .bootloader:

00003000 <__bootvectors>:

    .section .bootvectors,"ax",@progbits
    .global __bootvectors
    .func   __bootvectors
__bootvectors:
    jmp    __bootinit
    3000:	39 c0       	rjmp	.+114    	; 0x3074 <__bootinit>
    3002:	00 00       	nop
    nop
    3004:	40 c7       	rjmp	.+3712   	; 0x3e86 <__bootbad_interrupt>
    vector  __bootvector_1
    3006:	00 00       	nop
    3008:	3e c7       	rjmp	.+3708   	; 0x3e86 <__bootbad_interrupt>
    300a:	00 00       	nop
    vector  __bootvector_2
    300c:	3c c7       	rjmp	.+3704   	; 0x3e86 <__bootbad_interrupt>
    300e:	00 00       	nop
    3010:	3a c7       	rjmp	.+3700   	; 0x3e86 <__bootbad_interrupt>
    vector  __bootvector_3
    3012:	00 00       	nop
    3014:	38 c7       	rjmp	.+3696   	; 0x3e86 <__bootbad_interrupt>
    3016:	00 00       	nop
    vector  __bootvector_4
    3018:	36 c7       	rjmp	.+3692   	; 0x3e86 <__bootbad_interrupt>
    301a:	00 00       	nop
    301c:	34 c7       	rjmp	.+3688   	; 0x3e86 <__bootbad_interrupt>
    vector  __bootvector_5
    301e:	00 00       	nop
    3020:	32 c7       	rjmp	.+3684   	; 0x3e86 <__bootbad_interrupt>
    3022:	00 00       	nop
    vector  __bootvector_6
    3024:	30 c7       	rjmp	.+3680   	; 0x3e86 <__bootbad_interrupt>
    3026:	00 00       	nop
    3028:	2e c7       	rjmp	.+3676   	; 0x3e86 <__bootbad_interrupt>
    vector  __bootvector_7
    302a:	00 00       	nop
    302c:	67 c1       	rjmp	.+718    	; 0x32fc <__bootvector_11>
    302e:	00 00       	nop
    vector  __bootvector_8
    3030:	2a c7       	rjmp	.+3668   	; 0x3e86 <__bootbad_interrupt>
    3032:	00 00       	nop
    3034:	28 c7       	rjmp	.+3664   	; 0x3e86 <__bootbad_interrupt>
    vector  __bootvector_9
    3036:	00 00       	nop
    3038:	26 c7       	rjmp	.+3660   	; 0x3e86 <__bootbad_interrupt>
    303a:	00 00       	nop
    vector  __bootvector_10
    303c:	24 c7       	rjmp	.+3656   	; 0x3e86 <__bootbad_interrupt>
    303e:	00 00       	nop
    3040:	22 c7       	rjmp	.+3652   	; 0x3e86 <__bootbad_interrupt>
    vector  __bootvector_11
    3042:	00 00       	nop
    3044:	20 c7       	rjmp	.+3648   	; 0x3e86 <__bootbad_interrupt>
    3046:	00 00       	nop
    vector  __bootvector_12
    3048:	1e c7       	rjmp	.+3644   	; 0x3e86 <__bootbad_interrupt>
    304a:	00 00       	nop
    304c:	1c c7       	rjmp	.+3640   	; 0x3e86 <__bootbad_interrupt>
    vector  __bootvector_13
    304e:	00 00       	nop
    3050:	1a c7       	rjmp	.+3636   	; 0x3e86 <__bootbad_interrupt>
    3052:	00 00       	nop
    vector  __bootvector_14
    3054:	18 c7       	rjmp	.+3632   	; 0x3e86 <__bootbad_interrupt>
    3056:	00 00       	nop
    3058:	16 c7       	rjmp	.+3628   	; 0x3e86 <__bootbad_interrupt>
    vector  __bootvector_15
    305a:	00 00       	nop
    305c:	14 c7       	rjmp	.+3624   	; 0x3e86 <__bootbad_interrupt>
    305e:	00 00       	nop
    vector  __bootvector_16
    3060:	12 c7       	rjmp	.+3620   	; 0x3e86 <__bootbad_interrupt>
    3062:	00 00       	nop
    3064:	10 c7       	rjmp	.+3616   	; 0x3e86 <__bootbad_interrupt>
    vector  __bootvector_17
    3066:	00 00       	nop
    3068:	0e c7       	rjmp	.+3612   	; 0x3e86 <__bootbad_interrupt>
    306a:	00 00       	nop
    vector  __bootvector_18
    306c:	0c c7       	rjmp	.+3608   	; 0x3e86 <__bootbad_interrupt>
    306e:	00 00       	nop
    3070:	0a c7       	rjmp	.+3604   	; 0x3e86 <__bootbad_interrupt>
    vector  __bootvector_19
    3072:	00 00       	nop

00003074 <__bootinit>:
    3074:	11 24       	eor	r1, r1
    3076:	1f be       	out	0x3f, r1	; 63
    vector  __bootvector_20
    3078:	cf ef       	ldi	r28, 0xFF	; 255
    307a:	d2 e0       	ldi	r29, 0x02	; 2
    307c:	de bf       	out	0x3e, r29	; 62
    vector  __bootvector_21
    307e:	cd bf       	out	0x3d, r28	; 61

00003080 <__do_copy_bootdata>:
    3080:	11 e0       	ldi	r17, 0x01	; 1
    3082:	af e0       	ldi	r26, 0x0F	; 15
    vector  __bootvector_22
    3084:	b1 e0       	ldi	r27, 0x01	; 1
    3086:	e2 ee       	ldi	r30, 0xE2	; 226
    3088:	fe e3       	ldi	r31, 0x3E	; 62
    vector  __bootvector_23
    308a:	00 e0       	ldi	r16, 0x00	; 0
    308c:	02 c0       	rjmp	.+4      	; 0x3092 <__do_copy_bootdata+0x12>
    308e:	05 90       	lpm	r0, Z+
    vector  __bootvector_24
    3090:	0d 92       	st	X+, r0
    3092:	a8 32       	cpi	r26, 0x28	; 40
    3094:	b1 07       	cpc	r27, r17
    vector  __bootvector_25
    3096:	d9 f7       	brne	.-10     	; 0x308e <__do_copy_bootdata+0xe>
    3098:	95 d4       	rcall	.+2346   	; 0x39c4 <bootmain>
    309a:	f8 94       	cli
    vector  __bootvector_26
    309c:	ff cf       	rjmp	.-2      	; 0x309c <__do_copy_bootdata+0x1c>

0000309e <Endpoint_BytesToEPSizeMaskDynamic>:
#if !defined(FIXED_CONTROL_ENDPOINT_SIZE)
uint8_t USB_ControlEndpointSize LUFA_SHARED_DATA_SECTION = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

uint8_t Endpoint_BytesToEPSizeMaskDynamic(const uint16_t Size)
{
    309e:	28 e0       	ldi	r18, 0x08	; 8
    30a0:	30 e0       	ldi	r19, 0x00	; 0
    30a2:	40 e0       	ldi	r20, 0x00	; 0
    30a4:	03 c0       	rjmp	.+6      	; 0x30ac <Endpoint_BytesToEPSizeMaskDynamic+0xe>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
				
				while (CheckBytes < Bytes)
				{
					MaskVal++;
    30a6:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    30a8:	22 0f       	add	r18, r18
    30aa:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
				
				while (CheckBytes < Bytes)
    30ac:	28 17       	cp	r18, r24
    30ae:	39 07       	cpc	r19, r25
    30b0:	d0 f3       	brcs	.-12     	; 0x30a6 <Endpoint_BytesToEPSizeMaskDynamic+0x8>
	return Endpoint_BytesToEPSizeMask(Size);
}
    30b2:	84 2f       	mov	r24, r20
    30b4:	82 95       	swap	r24
    30b6:	80 7f       	andi	r24, 0xF0	; 240
    30b8:	08 95       	ret

000030ba <Endpoint_ConfigureEndpoint_Prv>:

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number, const uint8_t UECFG0XData, const uint8_t UECFG1XData)
{
    30ba:	80 93 e9 00 	sts	0x00E9, r24
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();
    30be:	80 91 eb 00 	lds	r24, 0x00EB
    30c2:	81 60       	ori	r24, 0x01	; 1
    30c4:	80 93 eb 00 	sts	0x00EB, r24

	UECFG1X = 0;
    30c8:	10 92 ed 00 	sts	0x00ED, r1

	UECFG0X = UECFG0XData;
    30cc:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
    30d0:	40 93 ed 00 	sts	0x00ED, r20

	return Endpoint_IsConfigured();
    30d4:	80 91 ee 00 	lds	r24, 0x00EE
}
    30d8:	88 1f       	adc	r24, r24
    30da:	88 27       	eor	r24, r24
    30dc:	88 1f       	adc	r24, r24
    30de:	08 95       	ret

000030e0 <Endpoint_ClearEndpoints>:

void Endpoint_ClearEndpoints(void)
{
    30e0:	10 92 f4 00 	sts	0x00F4, r1
    30e4:	90 e0       	ldi	r25, 0x00	; 0
	UEINT = 0;

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		Endpoint_SelectEndpoint(EPNum);	
    30e6:	90 93 e9 00 	sts	0x00E9, r25
		UEIENX = 0;
    30ea:	10 92 f0 00 	sts	0x00F0, r1
		UEINTX = 0;
    30ee:	10 92 e8 00 	sts	0x00E8, r1
		Endpoint_DeallocateMemory();
    30f2:	80 91 ed 00 	lds	r24, 0x00ED
    30f6:	8d 7f       	andi	r24, 0xFD	; 253
    30f8:	80 93 ed 00 	sts	0x00ED, r24
		Endpoint_DisableEndpoint();
    30fc:	80 91 eb 00 	lds	r24, 0x00EB
    3100:	8e 7f       	andi	r24, 0xFE	; 254
    3102:	80 93 eb 00 	sts	0x00EB, r24

void Endpoint_ClearEndpoints(void)
{
	UEINT = 0;

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    3106:	9f 5f       	subi	r25, 0xFF	; 255
    3108:	95 30       	cpi	r25, 0x05	; 5
    310a:	69 f7       	brne	.-38     	; 0x30e6 <Endpoint_ClearEndpoints+0x6>
		UEIENX = 0;
		UEINTX = 0;
		Endpoint_DeallocateMemory();
		Endpoint_DisableEndpoint();
	}
}
    310c:	08 95       	ret

0000310e <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
    310e:	80 91 06 01 	lds	r24, 0x0106
    3112:	88 23       	and	r24, r24
    3114:	bc f4       	brge	.+46     	; 0x3144 <Endpoint_ClearStatusStage+0x36>
    3116:	04 c0       	rjmp	.+8      	; 0x3120 <Endpoint_ClearStatusStage+0x12>
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    3118:	80 91 0e 01 	lds	r24, 0x010E
    311c:	88 23       	and	r24, r24
    311e:	f9 f0       	breq	.+62     	; 0x315e <Endpoint_ClearStatusStage+0x50>

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    3120:	80 91 e8 00 	lds	r24, 0x00E8
    3124:	82 ff       	sbrs	r24, 2
    3126:	f8 cf       	rjmp	.-16     	; 0x3118 <Endpoint_ClearStatusStage+0xa>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return;
		}

		Endpoint_ClearOUT();
    3128:	80 91 e8 00 	lds	r24, 0x00E8
    312c:	98 2f       	mov	r25, r24
    312e:	9b 7f       	andi	r25, 0xFB	; 251
    3130:	90 93 e8 00 	sts	0x00E8, r25
    3134:	8f 77       	andi	r24, 0x7F	; 127
    3136:	80 93 e8 00 	sts	0x00E8, r24
    313a:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    313c:	80 91 0e 01 	lds	r24, 0x010E
    3140:	88 23       	and	r24, r24
    3142:	69 f0       	breq	.+26     	; 0x315e <Endpoint_ClearStatusStage+0x50>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    3144:	80 91 e8 00 	lds	r24, 0x00E8
    3148:	80 ff       	sbrs	r24, 0
    314a:	f8 cf       	rjmp	.-16     	; 0x313c <Endpoint_ClearStatusStage+0x2e>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return;
		}
		
		Endpoint_ClearIN();
    314c:	80 91 e8 00 	lds	r24, 0x00E8
    3150:	98 2f       	mov	r25, r24
    3152:	9e 7f       	andi	r25, 0xFE	; 254
    3154:	90 93 e8 00 	sts	0x00E8, r25
    3158:	8f 77       	andi	r24, 0x7F	; 127
    315a:	80 93 e8 00 	sts	0x00E8, r24
    315e:	08 95       	ret

00003160 <Endpoint_Write_Control_PStream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer, uint16_t Length)
{
    3160:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;
	
	if (Length > USB_ControlRequest.wLength)
    3162:	40 91 0c 01 	lds	r20, 0x010C
    3166:	50 91 0d 01 	lds	r21, 0x010D
    316a:	46 17       	cp	r20, r22
    316c:	57 07       	cpc	r21, r23
    316e:	20 f4       	brcc	.+8      	; 0x3178 <Endpoint_Write_Control_PStream_LE+0x18>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
			}
			
			LastPacketFull = (Endpoint_BytesInEndpoint() == USB_ControlEndpointSize);
    3170:	70 91 00 01 	lds	r23, 0x0100
    3174:	60 e0       	ldi	r22, 0x00	; 0
    3176:	42 c0       	rjmp	.+132    	; 0x31fc <Endpoint_Write_Control_PStream_LE+0x9c>
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;
	
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    3178:	61 15       	cp	r22, r1
    317a:	71 05       	cpc	r23, r1
    317c:	11 f0       	breq	.+4      	; 0x3182 <Endpoint_Write_Control_PStream_LE+0x22>
    317e:	ab 01       	movw	r20, r22
    3180:	f7 cf       	rjmp	.-18     	; 0x3170 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();
    3182:	80 91 e8 00 	lds	r24, 0x00E8
    3186:	98 2f       	mov	r25, r24
    3188:	9e 7f       	andi	r25, 0xFE	; 254
    318a:	90 93 e8 00 	sts	0x00E8, r25
    318e:	8f 77       	andi	r24, 0x7F	; 127
    3190:	80 93 e8 00 	sts	0x00E8, r24
    3194:	40 e0       	ldi	r20, 0x00	; 0
    3196:	50 e0       	ldi	r21, 0x00	; 0
    3198:	eb cf       	rjmp	.-42     	; 0x3170 <Endpoint_Write_Control_PStream_LE+0x10>

	while (Length || LastPacketFull)
	{
		if (Endpoint_IsSETUPReceived())
    319a:	80 91 e8 00 	lds	r24, 0x00E8
    319e:	83 ff       	sbrs	r24, 3
    31a0:	02 c0       	rjmp	.+4      	; 0x31a6 <Endpoint_Write_Control_PStream_LE+0x46>
    31a2:	81 e0       	ldi	r24, 0x01	; 1
    31a4:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    31a6:	80 91 e8 00 	lds	r24, 0x00E8
    31aa:	82 fd       	sbrc	r24, 2
    31ac:	31 c0       	rjmp	.+98     	; 0x3210 <Endpoint_Write_Control_PStream_LE+0xb0>
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
    31ae:	80 91 0e 01 	lds	r24, 0x010E
    31b2:	88 23       	and	r24, r24
    31b4:	99 f1       	breq	.+102    	; 0x321c <Endpoint_Write_Control_PStream_LE+0xbc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		  
		if (Endpoint_IsINReady())
    31b6:	80 91 e8 00 	lds	r24, 0x00E8
    31ba:	80 ff       	sbrs	r24, 0
    31bc:	1f c0       	rjmp	.+62     	; 0x31fc <Endpoint_Write_Control_PStream_LE+0x9c>
    31be:	08 c0       	rjmp	.+16     	; 0x31d0 <Endpoint_Write_Control_PStream_LE+0x70>
    31c0:	f9 01       	movw	r30, r18
		{
			while (Length && (Endpoint_BytesInEndpoint() < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    31c2:	2f 5f       	subi	r18, 0xFF	; 255
    31c4:	3f 4f       	sbci	r19, 0xFF	; 255
    31c6:	e4 91       	lpm	r30, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    31c8:	e0 93 f1 00 	sts	0x00F1, r30
				Length--;
    31cc:	41 50       	subi	r20, 0x01	; 1
    31ce:	50 40       	sbci	r21, 0x00	; 0
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		  
		if (Endpoint_IsINReady())
		{
			while (Length && (Endpoint_BytesInEndpoint() < USB_ControlEndpointSize))
    31d0:	41 15       	cp	r20, r1
    31d2:	51 05       	cpc	r21, r1
    31d4:	21 f0       	breq	.+8      	; 0x31de <Endpoint_Write_Control_PStream_LE+0x7e>
    31d6:	80 91 f2 00 	lds	r24, 0x00F2
    31da:	87 17       	cp	r24, r23
    31dc:	88 f3       	brcs	.-30     	; 0x31c0 <Endpoint_Write_Control_PStream_LE+0x60>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
			}
			
			LastPacketFull = (Endpoint_BytesInEndpoint() == USB_ControlEndpointSize);
    31de:	80 91 f2 00 	lds	r24, 0x00F2
    31e2:	60 e0       	ldi	r22, 0x00	; 0
    31e4:	87 17       	cp	r24, r23
    31e6:	09 f4       	brne	.+2      	; 0x31ea <Endpoint_Write_Control_PStream_LE+0x8a>
    31e8:	61 e0       	ldi	r22, 0x01	; 1
			Endpoint_ClearIN();
    31ea:	80 91 e8 00 	lds	r24, 0x00E8
    31ee:	98 2f       	mov	r25, r24
    31f0:	9e 7f       	andi	r25, 0xFE	; 254
    31f2:	90 93 e8 00 	sts	0x00E8, r25
    31f6:	8f 77       	andi	r24, 0x7F	; 127
    31f8:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    31fc:	41 15       	cp	r20, r1
    31fe:	51 05       	cpc	r21, r1
    3200:	61 f6       	brne	.-104    	; 0x319a <Endpoint_Write_Control_PStream_LE+0x3a>
    3202:	66 23       	and	r22, r22
    3204:	51 f6       	brne	.-108    	; 0x319a <Endpoint_Write_Control_PStream_LE+0x3a>
    3206:	04 c0       	rjmp	.+8      	; 0x3210 <Endpoint_Write_Control_PStream_LE+0xb0>
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
    3208:	80 91 0e 01 	lds	r24, 0x010E
    320c:	88 23       	and	r24, r24
    320e:	31 f0       	breq	.+12     	; 0x321c <Endpoint_Write_Control_PStream_LE+0xbc>
			LastPacketFull = (Endpoint_BytesInEndpoint() == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
    3210:	80 91 e8 00 	lds	r24, 0x00E8
    3214:	82 ff       	sbrs	r24, 2
    3216:	f8 cf       	rjmp	.-16     	; 0x3208 <Endpoint_Write_Control_PStream_LE+0xa8>
    3218:	80 e0       	ldi	r24, 0x00	; 0
    321a:	08 95       	ret
    321c:	82 e0       	ldi	r24, 0x02	; 2
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;	
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    321e:	08 95       	ret

00003220 <CALLBACK_USER_USB_GetDescriptor>:
 *  is called so that the descriptor details can be passed back and the appropriate descriptor sent back to the
 *  USB host.
 */

DFU_SECTION uint16_t CALLBACK_USER_USB_GetDescriptor(const uint16_t wValue, const uint8_t wIndex, void** const DescriptorAddress)
{
    3220:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bootstraps_vec1>
    JMP_TRAP(TR_USB_GETDESCRIPTOR);
}
    3224:	08 95       	ret

00003226 <CALLBACK_USB_GetDescriptor>:

DFU_SECTION uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue, const uint8_t wIndex, void** const DescriptorAddress)
{
    3226:	28 2f       	mov	r18, r24
    3228:	da 01       	movw	r26, r20
    if (!RunBootloader)
    322a:	80 91 01 01 	lds	r24, 0x0101
    322e:	88 23       	and	r24, r24
    3230:	21 f4       	brne	.+8      	; 0x323a <CALLBACK_USB_GetDescriptor+0x14>
    {
        return CALLBACK_USER_USB_GetDescriptor(wValue, wIndex, DescriptorAddress);
    3232:	82 2f       	mov	r24, r18
    3234:	f5 df       	rcall	.-22     	; 0x3220 <CALLBACK_USER_USB_GetDescriptor>
    3236:	9c 01       	movw	r18, r24
    3238:	22 c0       	rjmp	.+68     	; 0x327e <CALLBACK_USB_GetDescriptor+0x58>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    323a:	92 30       	cpi	r25, 0x02	; 2
    323c:	71 f0       	breq	.+28     	; 0x325a <CALLBACK_USB_GetDescriptor+0x34>
    323e:	93 30       	cpi	r25, 0x03	; 3
    3240:	89 f0       	breq	.+34     	; 0x3264 <CALLBACK_USB_GetDescriptor+0x3e>
    3242:	91 30       	cpi	r25, 0x01	; 1
    3244:	29 f4       	brne	.+10     	; 0x3250 <CALLBACK_USB_GetDescriptor+0x2a>
    3246:	e8 e8       	ldi	r30, 0x88	; 136
    3248:	fe e3       	ldi	r31, 0x3E	; 62
    324a:	22 e1       	ldi	r18, 0x12	; 18
    324c:	30 e0       	ldi	r19, 0x00	; 0
    324e:	15 c0       	rjmp	.+42     	; 0x327a <CALLBACK_USB_GetDescriptor+0x54>
    3250:	e0 e0       	ldi	r30, 0x00	; 0
    3252:	f0 e0       	ldi	r31, 0x00	; 0
    3254:	20 e0       	ldi	r18, 0x00	; 0
    3256:	30 e0       	ldi	r19, 0x00	; 0
    3258:	10 c0       	rjmp	.+32     	; 0x327a <CALLBACK_USB_GetDescriptor+0x54>
    325a:	ea e9       	ldi	r30, 0x9A	; 154
    325c:	fe e3       	ldi	r31, 0x3E	; 62
    325e:	2b e1       	ldi	r18, 0x1B	; 27
    3260:	30 e0       	ldi	r19, 0x00	; 0
    3262:	0b c0       	rjmp	.+22     	; 0x327a <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration: 
			Address = &ConfigurationDescriptorDFU;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String: 
			if (!(DescriptorNumber))
    3264:	22 23       	and	r18, r18
    3266:	21 f4       	brne	.+8      	; 0x3270 <CALLBACK_USB_GetDescriptor+0x4a>
			{
				Address = &LanguageString;
				Size    = pgm_read_byte(&LanguageString.Header.Size);
    3268:	e5 eb       	ldi	r30, 0xB5	; 181
    326a:	fe e3       	ldi	r31, 0x3E	; 62
    326c:	84 91       	lpm	r24, Z+
    326e:	03 c0       	rjmp	.+6      	; 0x3276 <CALLBACK_USB_GetDescriptor+0x50>
			}
			else
			{
				Address = &ProductStringDFU;
				Size    = pgm_read_byte(&ProductStringDFU.Header.Size);
    3270:	e9 eb       	ldi	r30, 0xB9	; 185
    3272:	fe e3       	ldi	r31, 0x3E	; 62
    3274:	84 91       	lpm	r24, Z+
    3276:	28 2f       	mov	r18, r24
    3278:	30 e0       	ldi	r19, 0x00	; 0
			}
			
			break;
	}
	
	*DescriptorAddress = Address;
    327a:	ed 93       	st	X+, r30
    327c:	fc 93       	st	X, r31
	return Size;
}
    327e:	c9 01       	movw	r24, r18
    3280:	08 95       	ret

00003282 <EVENT_USB_Device_Connect>:
 */
uint16_t EndAddr DFU_DATA  = 0x0000;


DFU_SECTION void EVENT_USB_Device_Connect(void)
{
    3282:	80 91 01 01 	lds	r24, 0x0101
    3286:	88 23       	and	r24, r24
    3288:	11 f4       	brne	.+4      	; 0x328e <EVENT_USB_Device_Connect+0xc>
    if (!RunBootloader)
        CALL_TRAP(TR_USB_DEVICE_CONNECT);
    328a:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bootstraps_vec2>
    328e:	08 95       	ret

00003290 <EVENT_USB_Device_Disconnect>:
}

DFU_SECTION void EVENT_USB_Device_Disconnect(void)
{
    3290:	80 91 01 01 	lds	r24, 0x0101
    3294:	88 23       	and	r24, r24
    3296:	11 f4       	brne	.+4      	; 0x329c <EVENT_USB_Device_Disconnect+0xc>
    if (!RunBootloader)
        CALL_TRAP(TR_USB_DEVICE_DISCONNECT);
    3298:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bootstraps_vec3>
    329c:	08 95       	ret

0000329e <EVENT_USB_Device_ConfigurationChanged>:
    else
        CALL_TRAP(TR_USB_DEVICE_UNHANDLEDCONTROLREQUEST);
}

DFU_SECTION void EVENT_USB_Device_ConfigurationChanged(void)
{
    329e:	80 91 01 01 	lds	r24, 0x0101
    32a2:	88 23       	and	r24, r24
    32a4:	11 f4       	brne	.+4      	; 0x32aa <EVENT_USB_Device_ConfigurationChanged+0xc>
    if (!RunBootloader)
        CALL_TRAP(TR_USB_DEVICE_CONFIGURATIONCHANGED);
    32a6:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bootstraps_vec5>
    32aa:	08 95       	ret

000032ac <EVENT_USB_Device_Suspend>:
}

DFU_SECTION void EVENT_USB_Device_Suspend(void)
{
    32ac:	80 91 01 01 	lds	r24, 0x0101
    32b0:	88 23       	and	r24, r24
    32b2:	11 f4       	brne	.+4      	; 0x32b8 <EVENT_USB_Device_Suspend+0xc>
    if (!RunBootloader)
        CALL_TRAP(TR_USB_DEVICE_SUSPEND);
    32b4:	0c 94 44 00 	jmp	0x88	; 0x88 <__bootstraps_vec6>
    32b8:	08 95       	ret

000032ba <EVENT_USB_Device_WakeUp>:
}

DFU_SECTION void EVENT_USB_Device_WakeUp(void)
{
    32ba:	80 91 01 01 	lds	r24, 0x0101
    32be:	88 23       	and	r24, r24
    32c0:	11 f4       	brne	.+4      	; 0x32c6 <EVENT_USB_Device_WakeUp+0xc>
    if (!RunBootloader)
        CALL_TRAP(TR_USB_DEVICE_WAKEUP);
    32c2:	0c 94 42 00 	jmp	0x84	; 0x84 <__bootstraps_vec7>
    32c6:	08 95       	ret

000032c8 <EVENT_USB_Device_Reset>:
}

DFU_SECTION void EVENT_USB_Device_Reset(void)
{
    32c8:	80 91 01 01 	lds	r24, 0x0101
    32cc:	88 23       	and	r24, r24
    32ce:	11 f4       	brne	.+4      	; 0x32d4 <EVENT_USB_Device_Reset+0xc>
    if (!RunBootloader)
        CALL_TRAP(TR_USB_DEVICE_RESET);
    32d0:	0c 94 40 00 	jmp	0x80	; 0x80 <__bootstraps_vec8>
    32d4:	08 95       	ret

000032d6 <EVENT_USB_Device_StartOfFrame>:
}

DFU_SECTION void EVENT_USB_Device_StartOfFrame(void)
{
    32d6:	80 91 01 01 	lds	r24, 0x0101
    32da:	88 23       	and	r24, r24
    32dc:	11 f4       	brne	.+4      	; 0x32e2 <EVENT_USB_Device_StartOfFrame+0xc>
    if (!RunBootloader)
        CALL_TRAP(TR_USB_DEVICE_STARTOFFRAME);
    32de:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bootstraps_vec9>
    32e2:	08 95       	ret

000032e4 <SkipDfu>:
#define INFOLED_DDR       DDRB
#define INFOLED_PORT      PORTB


DFU_SECTION void SkipDfu(void)
{
    32e4:	83 b1       	in	r24, 0x03	; 3
    32e6:	80 95       	com	r24
    32e8:	81 70       	andi	r24, 0x01	; 1
    32ea:	80 93 01 01 	sts	0x0101, r24
    RunBootloader = !(PINB & 0x1);
    if (!RunBootloader)
    32ee:	88 23       	and	r24, r24
    32f0:	11 f4       	brne	.+4      	; 0x32f6 <SkipDfu+0x12>
        CALL_TRAP(TR_USERCODE);
    32f2:	0e 94 50 00 	call	0xa0	; 0xa0 <__bootstraps_start>

    INFOLED_DDR |=  (1 << INFOLED);
    32f6:	25 9a       	sbi	0x04, 5	; 4
    INFOLED_PORT |= (1 << INFOLED);
    32f8:	2d 9a       	sbi	0x05, 5	; 5
}
    32fa:	08 95       	ret

000032fc <__bootvector_11>:

DFU_SECTION void __bootvector_11(void)
{
    32fc:	08 c5       	rjmp	.+2576   	; 0x3d0e <__vector_11>

000032fe <DiscardFillerBytes>:
 *  discard unused bytes in the stream from the host, including the memory program block suffix.
 *
 *  \param[in] NumberOfBytes  Number of bytes to discard from the host from the control endpoint
 */
DFU_SECTION static void DiscardFillerBytes(uint8_t NumberOfBytes)
{
    32fe:	28 2f       	mov	r18, r24
    3300:	1a c0       	rjmp	.+52     	; 0x3336 <DiscardFillerBytes+0x38>
    while (NumberOfBytes--)
    {
        if (!(Endpoint_BytesInEndpoint()))
    3302:	80 91 f2 00 	lds	r24, 0x00F2
    3306:	88 23       	and	r24, r24
    3308:	99 f4       	brne	.+38     	; 0x3330 <DiscardFillerBytes+0x32>
        {
            Endpoint_ClearOUT();
    330a:	80 91 e8 00 	lds	r24, 0x00E8
    330e:	98 2f       	mov	r25, r24
    3310:	9b 7f       	andi	r25, 0xFB	; 251
    3312:	90 93 e8 00 	sts	0x00E8, r25
    3316:	8f 77       	andi	r24, 0x7F	; 127
    3318:	80 93 e8 00 	sts	0x00E8, r24
    331c:	04 c0       	rjmp	.+8      	; 0x3326 <DiscardFillerBytes+0x28>

            /* Wait until next data packet received */
            while (!(Endpoint_IsOUTReceived()))
            {
                if (USB_DeviceState == DEVICE_STATE_Unattached)
    331e:	80 91 0e 01 	lds	r24, 0x010E
    3322:	88 23       	and	r24, r24
    3324:	51 f0       	breq	.+20     	; 0x333a <DiscardFillerBytes+0x3c>
        if (!(Endpoint_BytesInEndpoint()))
        {
            Endpoint_ClearOUT();

            /* Wait until next data packet received */
            while (!(Endpoint_IsOUTReceived()))
    3326:	80 91 e8 00 	lds	r24, 0x00E8
    332a:	82 ff       	sbrs	r24, 2
    332c:	f8 cf       	rjmp	.-16     	; 0x331e <DiscardFillerBytes+0x20>
    332e:	02 c0       	rjmp	.+4      	; 0x3334 <DiscardFillerBytes+0x36>
			static inline void Endpoint_Discard_Byte(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Discard_Byte(void)
			{
				uint8_t Dummy;
				
				Dummy = UEDATX;
    3330:	80 91 f1 00 	lds	r24, 0x00F1
    3334:	21 50       	subi	r18, 0x01	; 1
 *
 *  \param[in] NumberOfBytes  Number of bytes to discard from the host from the control endpoint
 */
DFU_SECTION static void DiscardFillerBytes(uint8_t NumberOfBytes)
{
    while (NumberOfBytes--)
    3336:	22 23       	and	r18, r18
    3338:	21 f7       	brne	.-56     	; 0x3302 <DiscardFillerBytes+0x4>
    333a:	08 95       	ret

0000333c <LoadStartEndAddresses>:

/** Routine to concatenate the given pair of 16-bit memory start and end addresses from the host, and store them
 *  in the StartAddr and EndAddr global variables.
 */
DFU_SECTION static void LoadStartEndAddresses(void)
{
    333c:	20 91 24 01 	lds	r18, 0x0124
    3340:	30 91 23 01 	lds	r19, 0x0123
        uint16_t Word;
    } Address[2] = {{.Bytes = {SentCommand.Data[2], SentCommand.Data[1]}},
                    {.Bytes = {SentCommand.Data[4], SentCommand.Data[3]}}};

    /* Load in the start and ending read addresses from the sent data packet */
    StartAddr = Address[0].Word;
    3344:	80 91 22 01 	lds	r24, 0x0122
    3348:	90 91 21 01 	lds	r25, 0x0121
    334c:	80 93 15 01 	sts	0x0115, r24
    3350:	90 93 16 01 	sts	0x0116, r25
    EndAddr   = Address[1].Word;
    3354:	c9 01       	movw	r24, r18
    3356:	80 93 17 01 	sts	0x0117, r24
    335a:	90 93 18 01 	sts	0x0118, r25
}
    335e:	08 95       	ret

00003360 <ProcessBootloaderCommand>:
/** Routine to process an issued command from the host, via a DFU_DNLOAD request wrapper. This routine ensures
 *  that the command is allowed based on the current secure mode flag value, and passes the command off to the
 *  appropriate handler function.
 */
DFU_SECTION static void ProcessBootloaderCommand(void)
{
    3360:	80 91 0f 01 	lds	r24, 0x010F
    3364:	88 23       	and	r24, r24
    3366:	d9 f0       	breq	.+54     	; 0x339e <ProcessBootloaderCommand+0x3e>
    /* Check if device is in secure mode */
    if (IsSecure)
    {
        /* Don't process command unless it is a READ or chip erase command */
        if (!(((SentCommand.Command == COMMAND_WRITE)             &&
    3368:	80 91 1f 01 	lds	r24, 0x011F
    336c:	84 30       	cpi	r24, 0x04	; 4
    336e:	49 f4       	brne	.+18     	; 0x3382 <ProcessBootloaderCommand+0x22>
    3370:	80 91 20 01 	lds	r24, 0x0120
    3374:	88 23       	and	r24, r24
    3376:	39 f4       	brne	.+14     	; 0x3386 <ProcessBootloaderCommand+0x26>
    3378:	80 91 21 01 	lds	r24, 0x0121
    337c:	8f 3f       	cpi	r24, 0xFF	; 255
    337e:	19 f4       	brne	.+6      	; 0x3386 <ProcessBootloaderCommand+0x26>
    3380:	0e c0       	rjmp	.+28     	; 0x339e <ProcessBootloaderCommand+0x3e>
    3382:	85 30       	cpi	r24, 0x05	; 5
    3384:	61 f0       	breq	.+24     	; 0x339e <ProcessBootloaderCommand+0x3e>
                IS_TWOBYTE_COMMAND(SentCommand.Data, 0x00, 0xFF)) ||
               (SentCommand.Command == COMMAND_READ)))
        {
            /* Set the state and status variables to indicate the error */
            DFU_State  = dfuERROR;
    3386:	8a e0       	ldi	r24, 0x0A	; 10
    3388:	80 93 11 01 	sts	0x0111, r24
            DFU_Status = errWRITE;
    338c:	83 e0       	ldi	r24, 0x03	; 3
    338e:	80 93 12 01 	sts	0x0112, r24

            /* Stall command */
            Endpoint_StallTransaction();
    3392:	80 91 eb 00 	lds	r24, 0x00EB
    3396:	80 62       	ori	r24, 0x20	; 32
    3398:	80 93 eb 00 	sts	0x00EB, r24
    339c:	08 95       	ret
            return;
        }
    }

    /* Dispatch the required command processing routine based on the command type */
    switch (SentCommand.Command)
    339e:	80 91 1f 01 	lds	r24, 0x011F
    33a2:	83 30       	cpi	r24, 0x03	; 3
    33a4:	29 f1       	breq	.+74     	; 0x33f0 <ProcessBootloaderCommand+0x90>
    33a6:	84 30       	cpi	r24, 0x04	; 4
    33a8:	20 f4       	brcc	.+8      	; 0x33b2 <ProcessBootloaderCommand+0x52>
    33aa:	81 30       	cpi	r24, 0x01	; 1
    33ac:	09 f0       	breq	.+2      	; 0x33b0 <ProcessBootloaderCommand+0x50>
    33ae:	a9 c0       	rjmp	.+338    	; 0x3502 <ProcessBootloaderCommand+0x1a2>
    33b0:	07 c0       	rjmp	.+14     	; 0x33c0 <ProcessBootloaderCommand+0x60>
    33b2:	84 30       	cpi	r24, 0x04	; 4
    33b4:	09 f4       	brne	.+2      	; 0x33b8 <ProcessBootloaderCommand+0x58>
    33b6:	40 c0       	rjmp	.+128    	; 0x3438 <ProcessBootloaderCommand+0xd8>
    33b8:	85 30       	cpi	r24, 0x05	; 5
    33ba:	09 f0       	breq	.+2      	; 0x33be <ProcessBootloaderCommand+0x5e>
    33bc:	a2 c0       	rjmp	.+324    	; 0x3502 <ProcessBootloaderCommand+0x1a2>
    33be:	8c c0       	rjmp	.+280    	; 0x34d8 <ProcessBootloaderCommand+0x178>
/** Handler for a Memory Program command issued by the host. This routine handles the preparations needed
 *  to write subsequent data from the host into the specified memory.
 */
DFU_SECTION static void ProcessMemProgCommand(void)
{
    if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00) ||                          // Write FLASH command
    33c0:	80 91 20 01 	lds	r24, 0x0120
    33c4:	82 30       	cpi	r24, 0x02	; 2
    33c6:	08 f0       	brcs	.+2      	; 0x33ca <ProcessBootloaderCommand+0x6a>
    33c8:	9c c0       	rjmp	.+312    	; 0x3502 <ProcessBootloaderCommand+0x1a2>
        IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                            // Write EEPROM command
    {
        /* Load in the start and ending read addresses */
        LoadStartEndAddresses();
    33ca:	b8 df       	rcall	.-144    	; 0x333c <LoadStartEndAddresses>

        /* If FLASH is being written to, we need to pre-erase the first page to write to */
        if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))
    33cc:	80 91 20 01 	lds	r24, 0x0120
    33d0:	88 23       	and	r24, r24
    33d2:	61 f4       	brne	.+24     	; 0x33ec <ProcessBootloaderCommand+0x8c>
            #ifndef NO64KB
              Flash64KBPage
            #else
              0
            #endif
            }};
    33d4:	80 91 15 01 	lds	r24, 0x0115
    33d8:	90 91 16 01 	lds	r25, 0x0116

            /* Erase the current page's temp buffer */
            boot_page_erase(CurrFlashAddress.Long);
    33dc:	23 e0       	ldi	r18, 0x03	; 3
    33de:	fc 01       	movw	r30, r24
    33e0:	20 93 57 00 	sts	0x0057, r18
    33e4:	e8 95       	spm
            boot_spm_busy_wait();
    33e6:	07 b6       	in	r0, 0x37	; 55
    33e8:	00 fc       	sbrc	r0, 0
    33ea:	fd cf       	rjmp	.-6      	; 0x33e6 <ProcessBootloaderCommand+0x86>
        }

        /* Set the state so that the next DNLOAD requests reads in the firmware */
        DFU_State = dfuDNLOAD_IDLE;
    33ec:	85 e0       	ldi	r24, 0x05	; 5
    33ee:	08 c0       	rjmp	.+16     	; 0x3400 <ProcessBootloaderCommand+0xa0>
 *  to read subsequent data from the specified memory out to the host, as well as implementing the memory
 *  blank check command.
 */
DFU_SECTION static void ProcessMemReadCommand(void)
{
    if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00) ||                          // Read FLASH command
    33f0:	80 91 20 01 	lds	r24, 0x0120
    33f4:	88 23       	and	r24, r24
    33f6:	11 f0       	breq	.+4      	; 0x33fc <ProcessBootloaderCommand+0x9c>
    33f8:	82 30       	cpi	r24, 0x02	; 2
    33fa:	29 f4       	brne	.+10     	; 0x3406 <ProcessBootloaderCommand+0xa6>
        IS_ONEBYTE_COMMAND(SentCommand.Data, 0x02))                            // Read EEPROM command
    {
        /* Load in the start and ending read addresses */
        LoadStartEndAddresses();
    33fc:	9f df       	rcall	.-194    	; 0x333c <LoadStartEndAddresses>

        /* Set the state so that the next UPLOAD requests read out the firmware */
        DFU_State = dfuUPLOAD_IDLE;
    33fe:	89 e0       	ldi	r24, 0x09	; 9
    3400:	80 93 11 01 	sts	0x0111, r24
    3404:	08 95       	ret
    }
    else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                       // Blank check FLASH command
    3406:	81 30       	cpi	r24, 0x01	; 1
    3408:	09 f0       	breq	.+2      	; 0x340c <ProcessBootloaderCommand+0xac>
    340a:	7b c0       	rjmp	.+246    	; 0x3502 <ProcessBootloaderCommand+0x1a2>
    340c:	e0 e0       	ldi	r30, 0x00	; 0
    340e:	f0 e0       	ldi	r31, 0x00	; 0
        {
            /* Check if the current byte is not blank */
            #if (FLASHEND > 0xFFFF)
            if (pgm_read_byte_far(CurrFlashAddress) != 0xFF)
            #else
            if (pgm_read_byte(CurrFlashAddress) != 0xFF)
    3410:	84 91       	lpm	r24, Z+
    3412:	8f 3f       	cpi	r24, 0xFF	; 255
    3414:	59 f0       	breq	.+22     	; 0x342c <ProcessBootloaderCommand+0xcc>
            {
                /* Save the location of the first non-blank byte for response back to the host */
                #ifndef NO64KB
                Flash64KBPage = (CurrFlashAddress >> 16);
                #endif
                StartAddr     = CurrFlashAddress;
    3416:	f0 93 16 01 	sts	0x0116, r31
    341a:	e0 93 15 01 	sts	0x0115, r30

                /* Set state and status variables to the appropriate error values */
                DFU_State  = dfuERROR;
    341e:	8a e0       	ldi	r24, 0x0A	; 10
    3420:	80 93 11 01 	sts	0x0111, r24
                DFU_Status = errCHECK_ERASED;
    3424:	85 e0       	ldi	r24, 0x05	; 5
    3426:	80 93 12 01 	sts	0x0112, r24
    342a:	08 95       	ret

                break;
            }

            CurrFlashAddress++;
    342c:	31 96       	adiw	r30, 0x01	; 1
        #else
        uint16_t
        #endif
                  CurrFlashAddress = 0;

        while (CurrFlashAddress < BOOT_START_ADDR)
    342e:	40 e3       	ldi	r20, 0x30	; 48
    3430:	e0 30       	cpi	r30, 0x00	; 0
    3432:	f4 07       	cpc	r31, r20
    3434:	69 f7       	brne	.-38     	; 0x3410 <ProcessBootloaderCommand+0xb0>
    3436:	08 95       	ret
/** Handler for a Data Write command issued by the host. This routine handles non-programming commands such as
 *  bootloader exit (both via software jumps and hardware watchdog resets) and flash memory erasure.
 */
DFU_SECTION static void ProcessWriteCommand(void)
{
    if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x03))                            // Start application
    3438:	80 91 20 01 	lds	r24, 0x0120
    343c:	83 30       	cpi	r24, 0x03	; 3
    343e:	29 f5       	brne	.+74     	; 0x348a <ProcessBootloaderCommand+0x12a>
    {
        /* Indicate that the bootloader is terminating */
        WaitForExit = true;
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	80 93 10 01 	sts	0x0110, r24

        /* Check if empty request data array - an empty request after a filled request retains the
           previous valid request data, but initializes the reset */
        if (!(SentCommand.DataSize))
    3446:	80 91 25 01 	lds	r24, 0x0125
    344a:	90 91 26 01 	lds	r25, 0x0126
    344e:	89 2b       	or	r24, r25
    3450:	09 f0       	breq	.+2      	; 0x3454 <ProcessBootloaderCommand+0xf4>
    3452:	57 c0       	rjmp	.+174    	; 0x3502 <ProcessBootloaderCommand+0x1a2>
        {
            if (SentCommand.Data[1] == 0x00)                                   // Start via watchdog
    3454:	80 91 21 01 	lds	r24, 0x0121
    3458:	88 23       	and	r24, r24
    345a:	61 f4       	brne	.+24     	; 0x3474 <ProcessBootloaderCommand+0x114>
            {
                /* Start the watchdog to reset the AVR once the communications are finalized */
                wdt_enable(WDTO_250MS);
    345c:	2c e0       	ldi	r18, 0x0C	; 12
    345e:	88 e1       	ldi	r24, 0x18	; 24
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	0f b6       	in	r0, 0x3f	; 63
    3464:	f8 94       	cli
    3466:	a8 95       	wdr
    3468:	80 93 60 00 	sts	0x0060, r24
    346c:	0f be       	out	0x3f, r0	; 63
    346e:	20 93 60 00 	sts	0x0060, r18
    3472:	08 95       	ret
                /* Load in the jump address into the application start address pointer */
                union
                {
                    uint8_t  Bytes[2];
                    AppPtr_t FuncPtr;
                } Address = {.Bytes = {SentCommand.Data[4], SentCommand.Data[3]}};
    3474:	80 91 24 01 	lds	r24, 0x0124
    3478:	90 91 23 01 	lds	r25, 0x0123

                AppStartPtr = Address.FuncPtr;
    347c:	90 93 14 01 	sts	0x0114, r25
    3480:	80 93 13 01 	sts	0x0113, r24

                /* Set the flag to terminate the bootloader at next opportunity */
                RunBootloader = false;
    3484:	10 92 01 01 	sts	0x0101, r1
    3488:	08 95       	ret
            }
        }
    }
    else if (IS_TWOBYTE_COMMAND(SentCommand.Data, 0x00, 0xFF))                 // Erase flash
    348a:	88 23       	and	r24, r24
    348c:	09 f0       	breq	.+2      	; 0x3490 <ProcessBootloaderCommand+0x130>
    348e:	39 c0       	rjmp	.+114    	; 0x3502 <ProcessBootloaderCommand+0x1a2>
    3490:	80 91 21 01 	lds	r24, 0x0121
    3494:	8f 3f       	cpi	r24, 0xFF	; 255
    3496:	09 f0       	breq	.+2      	; 0x349a <ProcessBootloaderCommand+0x13a>
    3498:	34 c0       	rjmp	.+104    	; 0x3502 <ProcessBootloaderCommand+0x1a2>
    349a:	80 e0       	ldi	r24, 0x00	; 0
    349c:	90 e0       	ldi	r25, 0x00	; 0
        uint32_t CurrFlashAddress = 0;

        /* Clear the application section of flash */
        while (CurrFlashAddress < BOOT_START_ADDR)
        {
            boot_page_erase(CurrFlashAddress);
    349e:	33 e0       	ldi	r19, 0x03	; 3
            boot_spm_busy_wait();
            boot_page_write(CurrFlashAddress);
    34a0:	25 e0       	ldi	r18, 0x05	; 5
        uint32_t CurrFlashAddress = 0;

        /* Clear the application section of flash */
        while (CurrFlashAddress < BOOT_START_ADDR)
        {
            boot_page_erase(CurrFlashAddress);
    34a2:	fc 01       	movw	r30, r24
    34a4:	30 93 57 00 	sts	0x0057, r19
    34a8:	e8 95       	spm
            boot_spm_busy_wait();
    34aa:	07 b6       	in	r0, 0x37	; 55
    34ac:	00 fc       	sbrc	r0, 0
    34ae:	fd cf       	rjmp	.-6      	; 0x34aa <ProcessBootloaderCommand+0x14a>
            boot_page_write(CurrFlashAddress);
    34b0:	fc 01       	movw	r30, r24
    34b2:	20 93 57 00 	sts	0x0057, r18
    34b6:	e8 95       	spm
            boot_spm_busy_wait();
    34b8:	07 b6       	in	r0, 0x37	; 55
    34ba:	00 fc       	sbrc	r0, 0
    34bc:	fd cf       	rjmp	.-6      	; 0x34b8 <ProcessBootloaderCommand+0x158>
    34be:	80 58       	subi	r24, 0x80	; 128
    34c0:	9f 4f       	sbci	r25, 0xFF	; 255
    else if (IS_TWOBYTE_COMMAND(SentCommand.Data, 0x00, 0xFF))                 // Erase flash
    {
        uint32_t CurrFlashAddress = 0;

        /* Clear the application section of flash */
        while (CurrFlashAddress < BOOT_START_ADDR)
    34c2:	40 e3       	ldi	r20, 0x30	; 48
    34c4:	80 30       	cpi	r24, 0x00	; 0
    34c6:	94 07       	cpc	r25, r20
    34c8:	61 f7       	brne	.-40     	; 0x34a2 <ProcessBootloaderCommand+0x142>

            CurrFlashAddress += SPM_PAGESIZE;
        }

        /* Re-enable the RWW section of flash as writing to the flash locks it out */
        boot_rww_enable();
    34ca:	81 e1       	ldi	r24, 0x11	; 17
    34cc:	80 93 57 00 	sts	0x0057, r24
    34d0:	e8 95       	spm

        /* Memory has been erased, reset the security bit so that programming/reading is allowed */
        IsSecure = false;
    34d2:	10 92 0f 01 	sts	0x010F, r1
    34d6:	08 95       	ret
static uint8_t BootloaderInfo[3] DFU_DATA = {BOOTLOADER_VERSION, BOOTLOADER_ID_BYTE1, BOOTLOADER_ID_BYTE2};
static uint8_t SignatureInfo[3]  DFU_DATA = {AVR_SIGNATURE_1,    AVR_SIGNATURE_2,     AVR_SIGNATURE_3};

DFU_SECTION static void ProcessReadCommand(void)
{
    uint8_t DataIndexToRead = SentCommand.Data[1];
    34d8:	e0 91 21 01 	lds	r30, 0x0121

    if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))                         // Read bootloader info
    34dc:	80 91 20 01 	lds	r24, 0x0120
    34e0:	88 23       	and	r24, r24
    34e2:	39 f4       	brne	.+14     	; 0x34f2 <ProcessBootloaderCommand+0x192>
    {
        ResponseByte = BootloaderInfo[DataIndexToRead];
    34e4:	f0 e0       	ldi	r31, 0x00	; 0
    34e6:	e7 5e       	subi	r30, 0xE7	; 231
    34e8:	fe 4f       	sbci	r31, 0xFE	; 254
    34ea:	80 81       	ld	r24, Z
    34ec:	80 93 27 01 	sts	0x0127, r24
    34f0:	08 95       	ret
    }
    else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                    // Read signature byte
    34f2:	81 30       	cpi	r24, 0x01	; 1
    34f4:	31 f4       	brne	.+12     	; 0x3502 <ProcessBootloaderCommand+0x1a2>
    {
        ResponseByte = SignatureInfo[DataIndexToRead - 0x30];
    34f6:	f0 e0       	ldi	r31, 0x00	; 0
    34f8:	e4 51       	subi	r30, 0x14	; 20
    34fa:	ff 4f       	sbci	r31, 0xFF	; 255
    34fc:	80 81       	ld	r24, Z
    34fe:	80 93 27 01 	sts	0x0127, r24
    3502:	08 95       	ret

00003504 <DFU_EVENT_USB_Device_UnhandledControlRequest>:
/** Event handler for the USB_UnhandledControlRequest event. This is used to catch standard and class specific
 *  control requests that are not handled internally by the USB library (including the DFU commands, which are
 *  all issued via the control endpoint), so that they can be handled appropriately for the application.
 */
DFU_SECTION void DFU_EVENT_USB_Device_UnhandledControlRequest(void)
{
    3504:	2f 92       	push	r2
    3506:	3f 92       	push	r3
    3508:	4f 92       	push	r4
    350a:	5f 92       	push	r5
    350c:	6f 92       	push	r6
    350e:	7f 92       	push	r7
    3510:	8f 92       	push	r8
    3512:	9f 92       	push	r9
    3514:	af 92       	push	r10
    3516:	bf 92       	push	r11
    3518:	cf 92       	push	r12
    351a:	df 92       	push	r13
    351c:	ef 92       	push	r14
    351e:	ff 92       	push	r15
    3520:	0f 93       	push	r16
    3522:	1f 93       	push	r17
    3524:	cf 93       	push	r28
    3526:	df 93       	push	r29
    /* Get the size of the command and data from the wLength value */
    SentCommand.DataSize = USB_ControlRequest.wLength;
    3528:	80 91 0c 01 	lds	r24, 0x010C
    352c:	90 91 0d 01 	lds	r25, 0x010D
    3530:	90 93 26 01 	sts	0x0126, r25
    3534:	80 93 25 01 	sts	0x0125, r24

    switch (USB_ControlRequest.bRequest)
    3538:	80 91 07 01 	lds	r24, 0x0107
    353c:	83 30       	cpi	r24, 0x03	; 3
    353e:	09 f4       	brne	.+2      	; 0x3542 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x3e>
    3540:	cb c1       	rjmp	.+918    	; 0x38d8 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x3d4>
    3542:	84 30       	cpi	r24, 0x04	; 4
    3544:	30 f4       	brcc	.+12     	; 0x3552 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x4e>
    3546:	81 30       	cpi	r24, 0x01	; 1
    3548:	71 f0       	breq	.+28     	; 0x3566 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x62>
    354a:	82 30       	cpi	r24, 0x02	; 2
    354c:	09 f0       	breq	.+2      	; 0x3550 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x4c>
    354e:	fe c1       	rjmp	.+1020   	; 0x394c <DFU_EVENT_USB_Device_UnhandledControlRequest+0x448>
    3550:	1f c1       	rjmp	.+574    	; 0x3790 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x28c>
    3552:	85 30       	cpi	r24, 0x05	; 5
    3554:	09 f4       	brne	.+2      	; 0x3558 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x54>
    3556:	de c1       	rjmp	.+956    	; 0x3914 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x410>
    3558:	85 30       	cpi	r24, 0x05	; 5
    355a:	08 f4       	brcc	.+2      	; 0x355e <DFU_EVENT_USB_Device_UnhandledControlRequest+0x5a>
    355c:	d3 c1       	rjmp	.+934    	; 0x3904 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x400>
    355e:	86 30       	cpi	r24, 0x06	; 6
    3560:	09 f0       	breq	.+2      	; 0x3564 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x60>
    3562:	f4 c1       	rjmp	.+1000   	; 0x394c <DFU_EVENT_USB_Device_UnhandledControlRequest+0x448>
    3564:	ea c1       	rjmp	.+980    	; 0x393a <DFU_EVENT_USB_Device_UnhandledControlRequest+0x436>
    {
        case DFU_DNLOAD:
            Endpoint_ClearSETUP();
    3566:	80 91 e8 00 	lds	r24, 0x00E8
    356a:	87 7f       	andi	r24, 0xF7	; 247
    356c:	80 93 e8 00 	sts	0x00E8, r24

            /* Check if bootloader is waiting to terminate */
            if (WaitForExit)
    3570:	80 91 10 01 	lds	r24, 0x0110
    3574:	88 23       	and	r24, r24
    3576:	19 f0       	breq	.+6      	; 0x357e <DFU_EVENT_USB_Device_UnhandledControlRequest+0x7a>
            {
                /* Bootloader is terminating - process last received command */
                ProcessBootloaderCommand();
    3578:	f3 de       	rcall	.-538    	; 0x3360 <ProcessBootloaderCommand>

                /* Indicate that the last command has now been processed - free to exit bootloader */
                WaitForExit = false;
    357a:	10 92 10 01 	sts	0x0110, r1
            }

            /* If the request has a data stage, load it into the command struct */
            if (SentCommand.DataSize)
    357e:	20 91 25 01 	lds	r18, 0x0125
    3582:	30 91 26 01 	lds	r19, 0x0126
    3586:	21 15       	cp	r18, r1
    3588:	31 05       	cpc	r19, r1
    358a:	31 f4       	brne	.+12     	; 0x3598 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x94>
    358c:	2b c0       	rjmp	.+86     	; 0x35e4 <DFU_EVENT_USB_Device_UnhandledControlRequest+0xe0>
            {
                while (!(Endpoint_IsOUTReceived()))
                {
                    if (USB_DeviceState == DEVICE_STATE_Unattached)
    358e:	80 91 0e 01 	lds	r24, 0x010E
    3592:	88 23       	and	r24, r24
    3594:	09 f4       	brne	.+2      	; 0x3598 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x94>
    3596:	da c1       	rjmp	.+948    	; 0x394c <DFU_EVENT_USB_Device_UnhandledControlRequest+0x448>
            }

            /* If the request has a data stage, load it into the command struct */
            if (SentCommand.DataSize)
            {
                while (!(Endpoint_IsOUTReceived()))
    3598:	80 91 e8 00 	lds	r24, 0x00E8
    359c:	82 ff       	sbrs	r24, 2
    359e:	f7 cf       	rjmp	.-18     	; 0x358e <DFU_EVENT_USB_Device_UnhandledControlRequest+0x8a>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    35a0:	80 91 f1 00 	lds	r24, 0x00F1
                    if (USB_DeviceState == DEVICE_STATE_Unattached)
                      return;
                }

                /* First byte of the data stage is the DNLOAD request's command */
                SentCommand.Command = Endpoint_Read_Byte();
    35a4:	80 93 1f 01 	sts	0x011F, r24

                /* One byte of the data stage is the command, so subtract it from the total data bytes */
                SentCommand.DataSize--;
    35a8:	21 50       	subi	r18, 0x01	; 1
    35aa:	30 40       	sbci	r19, 0x00	; 0
    35ac:	30 93 26 01 	sts	0x0126, r19
    35b0:	20 93 25 01 	sts	0x0125, r18
    35b4:	e0 e2       	ldi	r30, 0x20	; 32
    35b6:	f1 e0       	ldi	r31, 0x01	; 1
    35b8:	0c c0       	rjmp	.+24     	; 0x35d2 <DFU_EVENT_USB_Device_UnhandledControlRequest+0xce>
    35ba:	80 91 f1 00 	lds	r24, 0x00F1

                /* Load in the rest of the data stage as command parameters */
                for (uint8_t DataByte = 0; (DataByte < sizeof(SentCommand.Data)) &&
                     Endpoint_BytesInEndpoint(); DataByte++)
                {
                    SentCommand.Data[DataByte] = Endpoint_Read_Byte();
    35be:	81 93       	st	Z+, r24
    35c0:	21 50       	subi	r18, 0x01	; 1
    35c2:	30 40       	sbci	r19, 0x00	; 0

                /* One byte of the data stage is the command, so subtract it from the total data bytes */
                SentCommand.DataSize--;

                /* Load in the rest of the data stage as command parameters */
                for (uint8_t DataByte = 0; (DataByte < sizeof(SentCommand.Data)) &&
    35c4:	81 e0       	ldi	r24, 0x01	; 1
    35c6:	e5 32       	cpi	r30, 0x25	; 37
    35c8:	f8 07       	cpc	r31, r24
    35ca:	19 f4       	brne	.+6      	; 0x35d2 <DFU_EVENT_USB_Device_UnhandledControlRequest+0xce>
    35cc:	31 83       	std	Z+1, r19	; 0x01
    35ce:	20 83       	st	Z, r18
    35d0:	08 c0       	rjmp	.+16     	; 0x35e2 <DFU_EVENT_USB_Device_UnhandledControlRequest+0xde>
    35d2:	80 91 f2 00 	lds	r24, 0x00F2
    35d6:	88 23       	and	r24, r24
    35d8:	81 f7       	brne	.-32     	; 0x35ba <DFU_EVENT_USB_Device_UnhandledControlRequest+0xb6>
    35da:	30 93 26 01 	sts	0x0126, r19
    35de:	20 93 25 01 	sts	0x0125, r18
                    SentCommand.Data[DataByte] = Endpoint_Read_Byte();
                    SentCommand.DataSize--;
                }

                /* Process the command */
                ProcessBootloaderCommand();
    35e2:	be de       	rcall	.-644    	; 0x3360 <ProcessBootloaderCommand>
            }

            /* Check if currently downloading firmware */
            if (DFU_State == dfuDNLOAD_IDLE)
    35e4:	80 91 11 01 	lds	r24, 0x0111
    35e8:	85 30       	cpi	r24, 0x05	; 5
    35ea:	09 f0       	breq	.+2      	; 0x35ee <DFU_EVENT_USB_Device_UnhandledControlRequest+0xea>
    35ec:	cc c0       	rjmp	.+408    	; 0x3786 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x282>
            {
                if (!(SentCommand.DataSize))
    35ee:	80 91 25 01 	lds	r24, 0x0125
    35f2:	90 91 26 01 	lds	r25, 0x0126
    35f6:	89 2b       	or	r24, r25
    35f8:	21 f4       	brne	.+8      	; 0x3602 <DFU_EVENT_USB_Device_UnhandledControlRequest+0xfe>
                {
                    DFU_State = dfuIDLE;
    35fa:	82 e0       	ldi	r24, 0x02	; 2
    35fc:	80 93 11 01 	sts	0x0111, r24
    3600:	c2 c0       	rjmp	.+388    	; 0x3786 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x282>
                }
                else
                {
                    /* Throw away the filler bytes before the start of the firmware */
                    DiscardFillerBytes(DFU_FILLER_BYTES_SIZE);
    3602:	8a e1       	ldi	r24, 0x1A	; 26
    3604:	7c de       	rcall	.-776    	; 0x32fe <DiscardFillerBytes>

                    /* Throw away the page alignment filler bytes before the start of the firmware */
                    DiscardFillerBytes(StartAddr % SPM_PAGESIZE);
    3606:	80 91 15 01 	lds	r24, 0x0115
    360a:	8f 77       	andi	r24, 0x7F	; 127
    360c:	78 de       	rcall	.-784    	; 0x32fe <DiscardFillerBytes>

                    /* Calculate the number of bytes remaining to be written */
                    uint16_t BytesRemaining = ((EndAddr - StartAddr) + 1);
    360e:	80 90 17 01 	lds	r8, 0x0117
    3612:	90 90 18 01 	lds	r9, 0x0118
    3616:	20 91 15 01 	lds	r18, 0x0115
    361a:	30 91 16 01 	lds	r19, 0x0116
    361e:	08 94       	sec
    3620:	81 1c       	adc	r8, r1
    3622:	91 1c       	adc	r9, r1
    3624:	a4 01       	movw	r20, r8
    3626:	42 1b       	sub	r20, r18
    3628:	53 0b       	sbc	r21, r19
    362a:	08 94       	sec
    362c:	81 08       	sbc	r8, r1
    362e:	91 08       	sbc	r9, r1

                    if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))        // Write flash
    3630:	80 91 20 01 	lds	r24, 0x0120
    3634:	88 23       	and	r24, r24
    3636:	09 f0       	breq	.+2      	; 0x363a <DFU_EVENT_USB_Device_UnhandledControlRequest+0x136>
    3638:	9d c0       	rjmp	.+314    	; 0x3774 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x270>
                    {
                        /* Calculate the number of words to be written from the number of bytes to be written */
                        uint16_t WordsRemaining = (BytesRemaining >> 1);
    363a:	ea 01       	movw	r28, r20
    363c:	d6 95       	lsr	r29
    363e:	c7 95       	ror	r28
                        #ifndef NO64KB
                            Flash64KBPage
                        #else
                            0
                        #endif
                                                              }};
    3640:	80 e0       	ldi	r24, 0x00	; 0
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	a0 e0       	ldi	r26, 0x00	; 0
    3646:	b0 e0       	ldi	r27, 0x00	; 0
    3648:	c9 01       	movw	r24, r18

                        uint32_t CurrFlashPageStartAddress = CurrFlashAddress.Long;
    364a:	9c 01       	movw	r18, r24
    364c:	ad 01       	movw	r20, r26
    364e:	62 e0       	ldi	r22, 0x02	; 2
    3650:	e6 2e       	mov	r14, r22
    3652:	f1 2c       	mov	r15, r1
    3654:	01 2d       	mov	r16, r1
    3656:	11 2d       	mov	r17, r1
    3658:	e2 0e       	add	r14, r18
    365a:	f3 1e       	adc	r15, r19
    365c:	04 1f       	adc	r16, r20
    365e:	15 1f       	adc	r17, r21
    3660:	59 01       	movw	r10, r18
    3662:	6a 01       	movw	r12, r20
    3664:	a0 e0       	ldi	r26, 0x00	; 0
                                      return;
                                }
                            }

                            /* Write the next word into the current flash page */
                            boot_page_fill(CurrFlashAddress.Long, Endpoint_Read_Word_LE());
    3666:	66 24       	eor	r6, r6
    3668:	63 94       	inc	r6

                            /* See if an entire page has been written to the flash page buffer */
                            if ((WordsInFlashPage == (SPM_PAGESIZE >> 1)) || !(WordsRemaining))
                            {
                                /* Commit the flash page to memory */
                                boot_page_write(CurrFlashPageStartAddress);
    366a:	45 e0       	ldi	r20, 0x05	; 5
    366c:	74 2e       	mov	r7, r20
                                {
                                    CurrFlashPageStartAddress = CurrFlashAddress.Long;
                                    WordsInFlashPage          = 0;

                                    /* Erase next page's temp buffer */
                                    boot_page_erase(CurrFlashAddress.Long);
    366e:	b3 e0       	ldi	r27, 0x03	; 3
    3670:	49 c0       	rjmp	.+146    	; 0x3704 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x200>
                        uint8_t  WordsInFlashPage          = 0;

                        while (WordsRemaining--)
                        {
                            /* Check if endpoint is empty - if so clear it and wait until ready for next packet */
                            if (!(Endpoint_BytesInEndpoint()))
    3672:	80 91 f2 00 	lds	r24, 0x00F2
    3676:	88 23       	and	r24, r24
    3678:	99 f4       	brne	.+38     	; 0x36a0 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x19c>
                            {
                                Endpoint_ClearOUT();
    367a:	80 91 e8 00 	lds	r24, 0x00E8
    367e:	98 2f       	mov	r25, r24
    3680:	9b 7f       	andi	r25, 0xFB	; 251
    3682:	90 93 e8 00 	sts	0x00E8, r25
    3686:	8f 77       	andi	r24, 0x7F	; 127
    3688:	80 93 e8 00 	sts	0x00E8, r24
    368c:	05 c0       	rjmp	.+10     	; 0x3698 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x194>

                                while (!(Endpoint_IsOUTReceived()))
                                {
                                    if (USB_DeviceState == DEVICE_STATE_Unattached)
    368e:	80 91 0e 01 	lds	r24, 0x010E
    3692:	88 23       	and	r24, r24
    3694:	09 f4       	brne	.+2      	; 0x3698 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x194>
    3696:	5a c1       	rjmp	.+692    	; 0x394c <DFU_EVENT_USB_Device_UnhandledControlRequest+0x448>
                            /* Check if endpoint is empty - if so clear it and wait until ready for next packet */
                            if (!(Endpoint_BytesInEndpoint()))
                            {
                                Endpoint_ClearOUT();

                                while (!(Endpoint_IsOUTReceived()))
    3698:	80 91 e8 00 	lds	r24, 0x00E8
    369c:	82 ff       	sbrs	r24, 2
    369e:	f7 cf       	rjmp	.-18     	; 0x368e <DFU_EVENT_USB_Device_UnhandledControlRequest+0x18a>
                                                              }};

                        uint32_t CurrFlashPageStartAddress = CurrFlashAddress.Long;
                        uint8_t  WordsInFlashPage          = 0;

                        while (WordsRemaining--)
    36a0:	21 97       	sbiw	r28, 0x01	; 1
				{
					uint16_t Word;
					uint8_t  Bytes[2];
				} Data;
				
				Data.Bytes[0] = UEDATX;
    36a2:	80 91 f1 00 	lds	r24, 0x00F1
    36a6:	68 2f       	mov	r22, r24
				Data.Bytes[1] = UEDATX;
    36a8:	80 91 f1 00 	lds	r24, 0x00F1
    36ac:	78 2f       	mov	r23, r24
                                      return;
                                }
                            }

                            /* Write the next word into the current flash page */
                            boot_page_fill(CurrFlashAddress.Long, Endpoint_Read_Word_LE());
    36ae:	0b 01       	movw	r0, r22
    36b0:	f5 01       	movw	r30, r10
    36b2:	60 92 57 00 	sts	0x0057, r6
    36b6:	e8 95       	spm
    36b8:	11 24       	eor	r1, r1

                            /* Adjust counters */
                            WordsInFlashPage      += 1;
    36ba:	af 5f       	subi	r26, 0xFF	; 255
                            CurrFlashAddress.Long += 2;

                            /* See if an entire page has been written to the flash page buffer */
                            if ((WordsInFlashPage == (SPM_PAGESIZE >> 1)) || !(WordsRemaining))
    36bc:	a0 34       	cpi	r26, 0x40	; 64
    36be:	11 f0       	breq	.+4      	; 0x36c4 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x1c0>
    36c0:	20 97       	sbiw	r28, 0x00	; 0
    36c2:	99 f4       	brne	.+38     	; 0x36ea <DFU_EVENT_USB_Device_UnhandledControlRequest+0x1e6>
                            {
                                /* Commit the flash page to memory */
                                boot_page_write(CurrFlashPageStartAddress);
    36c4:	f9 01       	movw	r30, r18
    36c6:	70 92 57 00 	sts	0x0057, r7
    36ca:	e8 95       	spm
                                boot_spm_busy_wait();
    36cc:	07 b6       	in	r0, 0x37	; 55
    36ce:	00 fc       	sbrc	r0, 0
    36d0:	fd cf       	rjmp	.-6      	; 0x36cc <DFU_EVENT_USB_Device_UnhandledControlRequest+0x1c8>

                                /* Check if programming incomplete */
                                if (WordsRemaining)
    36d2:	20 97       	sbiw	r28, 0x00	; 0
    36d4:	51 f0       	breq	.+20     	; 0x36ea <DFU_EVENT_USB_Device_UnhandledControlRequest+0x1e6>
                                {
                                    CurrFlashPageStartAddress = CurrFlashAddress.Long;
                                    WordsInFlashPage          = 0;

                                    /* Erase next page's temp buffer */
                                    boot_page_erase(CurrFlashAddress.Long);
    36d6:	f7 01       	movw	r30, r14
    36d8:	b0 93 57 00 	sts	0x0057, r27
    36dc:	e8 95       	spm
                                    boot_spm_busy_wait();
    36de:	07 b6       	in	r0, 0x37	; 55
    36e0:	00 fc       	sbrc	r0, 0
    36e2:	fd cf       	rjmp	.-6      	; 0x36de <DFU_EVENT_USB_Device_UnhandledControlRequest+0x1da>
    36e4:	a8 01       	movw	r20, r16
    36e6:	97 01       	movw	r18, r14
    36e8:	a0 e0       	ldi	r26, 0x00	; 0
    36ea:	92 e0       	ldi	r25, 0x02	; 2
    36ec:	29 2e       	mov	r2, r25
    36ee:	31 2c       	mov	r3, r1
    36f0:	41 2c       	mov	r4, r1
    36f2:	51 2c       	mov	r5, r1
    36f4:	e2 0c       	add	r14, r2
    36f6:	f3 1c       	adc	r15, r3
    36f8:	04 1d       	adc	r16, r4
    36fa:	15 1d       	adc	r17, r5
    36fc:	a2 0c       	add	r10, r2
    36fe:	b3 1c       	adc	r11, r3
    3700:	c4 1c       	adc	r12, r4
    3702:	d5 1c       	adc	r13, r5
                                                              }};

                        uint32_t CurrFlashPageStartAddress = CurrFlashAddress.Long;
                        uint8_t  WordsInFlashPage          = 0;

                        while (WordsRemaining--)
    3704:	20 97       	sbiw	r28, 0x00	; 0
    3706:	09 f0       	breq	.+2      	; 0x370a <DFU_EVENT_USB_Device_UnhandledControlRequest+0x206>
    3708:	b4 cf       	rjmp	.-152    	; 0x3672 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x16e>
                                }
                            }
                        }

                        /* Once programming complete, start address equals the end address */
                        StartAddr = EndAddr;
    370a:	90 92 16 01 	sts	0x0116, r9
    370e:	80 92 15 01 	sts	0x0115, r8

                        /* Re-enable the RWW section of flash */
                        boot_rww_enable();
    3712:	81 e1       	ldi	r24, 0x11	; 17
    3714:	80 93 57 00 	sts	0x0057, r24
    3718:	e8 95       	spm
    371a:	33 c0       	rjmp	.+102    	; 0x3782 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x27e>
                    else                                                   // Write EEPROM
                    {
                        while (BytesRemaining--)
                        {
                            /* Check if endpoint is empty - if so clear it and wait until ready for next packet */
                            if (!(Endpoint_BytesInEndpoint()))
    371c:	80 91 f2 00 	lds	r24, 0x00F2
    3720:	88 23       	and	r24, r24
    3722:	99 f4       	brne	.+38     	; 0x374a <DFU_EVENT_USB_Device_UnhandledControlRequest+0x246>
                            {
                                Endpoint_ClearOUT();
    3724:	80 91 e8 00 	lds	r24, 0x00E8
    3728:	98 2f       	mov	r25, r24
    372a:	9b 7f       	andi	r25, 0xFB	; 251
    372c:	90 93 e8 00 	sts	0x00E8, r25
    3730:	8f 77       	andi	r24, 0x7F	; 127
    3732:	80 93 e8 00 	sts	0x00E8, r24
    3736:	05 c0       	rjmp	.+10     	; 0x3742 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x23e>

                                while (!(Endpoint_IsOUTReceived()))
                                {
                                    if (USB_DeviceState == DEVICE_STATE_Unattached)
    3738:	80 91 0e 01 	lds	r24, 0x010E
    373c:	88 23       	and	r24, r24
    373e:	09 f4       	brne	.+2      	; 0x3742 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x23e>
    3740:	ab c0       	rjmp	.+342    	; 0x3898 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x394>
                            /* Check if endpoint is empty - if so clear it and wait until ready for next packet */
                            if (!(Endpoint_BytesInEndpoint()))
                            {
                                Endpoint_ClearOUT();

                                while (!(Endpoint_IsOUTReceived()))
    3742:	80 91 e8 00 	lds	r24, 0x00E8
    3746:	82 ff       	sbrs	r24, 2
    3748:	f7 cf       	rjmp	.-18     	; 0x3738 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x234>
                                      return;
                                }
                            }

                            /* Read the byte from the USB interface and write to to the EEPROM */
							if (StartAddr < SAFE_EEPROM_ADDRESS)
    374a:	81 e0       	ldi	r24, 0x01	; 1
    374c:	2c 39       	cpi	r18, 0x9C	; 156
    374e:	38 07       	cpc	r19, r24
    3750:	68 f4       	brcc	.+26     	; 0x376c <DFU_EVENT_USB_Device_UnhandledControlRequest+0x268>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    3752:	80 91 f1 00 	lds	r24, 0x00F1
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    3756:	f9 99       	sbic	0x1f, 1	; 31
    3758:	fe cf       	rjmp	.-4      	; 0x3756 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x252>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    375a:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    375c:	32 bd       	out	0x22, r19	; 34
    375e:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    3760:	80 bd       	out	0x20, r24	; 32

    __asm__ __volatile__ (
    3762:	0f b6       	in	r0, 0x3f	; 63
    3764:	f8 94       	cli
    3766:	fa 9a       	sbi	0x1f, 2	; 31
    3768:	f9 9a       	sbi	0x1f, 1	; 31
    376a:	0f be       	out	0x3f, r0	; 63
    376c:	41 50       	subi	r20, 0x01	; 1
    376e:	50 40       	sbci	r21, 0x00	; 0
    3770:	2f 5f       	subi	r18, 0xFF	; 255
    3772:	3f 4f       	sbci	r19, 0xFF	; 255
                        /* Re-enable the RWW section of flash */
                        boot_rww_enable();
                    }
                    else                                                   // Write EEPROM
                    {
                        while (BytesRemaining--)
    3774:	41 15       	cp	r20, r1
    3776:	51 05       	cpc	r21, r1
    3778:	89 f6       	brne	.-94     	; 0x371c <DFU_EVENT_USB_Device_UnhandledControlRequest+0x218>
    377a:	30 93 16 01 	sts	0x0116, r19
    377e:	20 93 15 01 	sts	0x0115, r18
                            StartAddr++;
                        }
                    }

                    /* Throw away the currently unused DFU file suffix */
                    DiscardFillerBytes(DFU_FILE_SUFFIX_SIZE);
    3782:	80 e1       	ldi	r24, 0x10	; 16
    3784:	bc dd       	rcall	.-1160   	; 0x32fe <DiscardFillerBytes>
                }
            }

            Endpoint_ClearOUT();
    3786:	80 91 e8 00 	lds	r24, 0x00E8
    378a:	98 2f       	mov	r25, r24
    378c:	9b 7f       	andi	r25, 0xFB	; 251
    378e:	cf c0       	rjmp	.+414    	; 0x392e <DFU_EVENT_USB_Device_UnhandledControlRequest+0x42a>
            Endpoint_ClearStatusStage();

            break;
#ifndef NO_DFUUPLOAD
        case DFU_UPLOAD:
            Endpoint_ClearSETUP();
    3790:	80 91 e8 00 	lds	r24, 0x00E8
    3794:	87 7f       	andi	r24, 0xF7	; 247
    3796:	80 93 e8 00 	sts	0x00E8, r24
    379a:	05 c0       	rjmp	.+10     	; 0x37a6 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x2a2>

            while (!(Endpoint_IsINReady()))
            {
                if (USB_DeviceState == DEVICE_STATE_Unattached)
    379c:	80 91 0e 01 	lds	r24, 0x010E
    37a0:	88 23       	and	r24, r24
    37a2:	09 f4       	brne	.+2      	; 0x37a6 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x2a2>
    37a4:	d3 c0       	rjmp	.+422    	; 0x394c <DFU_EVENT_USB_Device_UnhandledControlRequest+0x448>
            break;
#ifndef NO_DFUUPLOAD
        case DFU_UPLOAD:
            Endpoint_ClearSETUP();

            while (!(Endpoint_IsINReady()))
    37a6:	80 91 e8 00 	lds	r24, 0x00E8
    37aa:	80 ff       	sbrs	r24, 0
    37ac:	f7 cf       	rjmp	.-18     	; 0x379c <DFU_EVENT_USB_Device_UnhandledControlRequest+0x298>
            {
                if (USB_DeviceState == DEVICE_STATE_Unattached)
                  return;
            }

            if (DFU_State != dfuUPLOAD_IDLE)
    37ae:	80 91 11 01 	lds	r24, 0x0111
    37b2:	89 30       	cpi	r24, 0x09	; 9
    37b4:	91 f0       	breq	.+36     	; 0x37da <DFU_EVENT_USB_Device_UnhandledControlRequest+0x2d6>
            {
                if ((DFU_State == dfuERROR) && IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))       // Blank Check
    37b6:	8a 30       	cpi	r24, 0x0A	; 10
    37b8:	69 f4       	brne	.+26     	; 0x37d4 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x2d0>
    37ba:	80 91 20 01 	lds	r24, 0x0120
    37be:	81 30       	cpi	r24, 0x01	; 1
    37c0:	49 f4       	brne	.+18     	; 0x37d4 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x2d0>
                {
                    /* Blank checking is performed in the DFU_DNLOAD request - if we get here we've told the host
                       that the memory isn't blank, and the host is requesting the first non-blank address */
                    Endpoint_Write_Word_LE(StartAddr);
    37c2:	80 91 15 01 	lds	r24, 0x0115
    37c6:	90 91 16 01 	lds	r25, 0x0116
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
    37ca:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Word >> 8);
    37ce:	90 93 f1 00 	sts	0x00F1, r25
    37d2:	a9 c0       	rjmp	.+338    	; 0x3926 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x422>
                }
                else
                {
                    /* Idle state upload - send response to last issued command */
                    Endpoint_Write_Byte(ResponseByte);
    37d4:	80 91 27 01 	lds	r24, 0x0127
    37d8:	a4 c0       	rjmp	.+328    	; 0x3922 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x41e>
                }
            }
            else
            {
                /* Determine the number of bytes remaining in the current block */
                uint16_t BytesRemaining = ((EndAddr - StartAddr) + 1);
    37da:	60 91 17 01 	lds	r22, 0x0117
    37de:	70 91 18 01 	lds	r23, 0x0118
    37e2:	20 91 15 01 	lds	r18, 0x0115
    37e6:	30 91 16 01 	lds	r19, 0x0116
    37ea:	6f 5f       	subi	r22, 0xFF	; 255
    37ec:	7f 4f       	sbci	r23, 0xFF	; 255
    37ee:	ab 01       	movw	r20, r22
    37f0:	42 1b       	sub	r20, r18
    37f2:	53 0b       	sbc	r21, r19
    37f4:	61 50       	subi	r22, 0x01	; 1
    37f6:	70 40       	sbci	r23, 0x00	; 0

                if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))            // Read FLASH
    37f8:	80 91 20 01 	lds	r24, 0x0120
    37fc:	88 23       	and	r24, r24
    37fe:	b9 f5       	brne	.+110    	; 0x386e <DFU_EVENT_USB_Device_UnhandledControlRequest+0x36a>
                {
                    /* Calculate the number of words to be written from the number of bytes to be written */
                    uint16_t WordsRemaining = (BytesRemaining >> 1);
    3800:	8a 01       	movw	r16, r20
    3802:	16 95       	lsr	r17
    3804:	07 95       	ror	r16
                    #ifndef NO64KB
                      Flash64KBPage
                    #else
                      0
                    #endif
                                            }};
    3806:	80 e0       	ldi	r24, 0x00	; 0
    3808:	90 e0       	ldi	r25, 0x00	; 0
    380a:	a0 e0       	ldi	r26, 0x00	; 0
    380c:	b0 e0       	ldi	r27, 0x00	; 0
    380e:	c9 01       	movw	r24, r18
    3810:	9c 01       	movw	r18, r24
    3812:	ad 01       	movw	r20, r26
    3814:	24 c0       	rjmp	.+72     	; 0x385e <DFU_EVENT_USB_Device_UnhandledControlRequest+0x35a>

                    while (WordsRemaining--)
                    {
                        /* Check if endpoint is full - if so clear it and wait until ready for next packet */
                        if (Endpoint_BytesInEndpoint() == DFU_CONTROL_ENDPOINT_SIZE)
    3816:	80 91 f2 00 	lds	r24, 0x00F2
    381a:	80 32       	cpi	r24, 0x20	; 32
    381c:	99 f4       	brne	.+38     	; 0x3844 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x340>
                        {
                            Endpoint_ClearIN();
    381e:	80 91 e8 00 	lds	r24, 0x00E8
    3822:	98 2f       	mov	r25, r24
    3824:	9e 7f       	andi	r25, 0xFE	; 254
    3826:	90 93 e8 00 	sts	0x00E8, r25
    382a:	8f 77       	andi	r24, 0x7F	; 127
    382c:	80 93 e8 00 	sts	0x00E8, r24
    3830:	05 c0       	rjmp	.+10     	; 0x383c <DFU_EVENT_USB_Device_UnhandledControlRequest+0x338>

                            while (!(Endpoint_IsINReady()))
                            {
                                if (USB_DeviceState == DEVICE_STATE_Unattached)
    3832:	80 91 0e 01 	lds	r24, 0x010E
    3836:	88 23       	and	r24, r24
    3838:	09 f4       	brne	.+2      	; 0x383c <DFU_EVENT_USB_Device_UnhandledControlRequest+0x338>
    383a:	88 c0       	rjmp	.+272    	; 0x394c <DFU_EVENT_USB_Device_UnhandledControlRequest+0x448>
                        /* Check if endpoint is full - if so clear it and wait until ready for next packet */
                        if (Endpoint_BytesInEndpoint() == DFU_CONTROL_ENDPOINT_SIZE)
                        {
                            Endpoint_ClearIN();

                            while (!(Endpoint_IsINReady()))
    383c:	80 91 e8 00 	lds	r24, 0x00E8
    3840:	80 ff       	sbrs	r24, 0
    3842:	f7 cf       	rjmp	.-18     	; 0x3832 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x32e>

                        /* Read the flash word and send it via USB to the host */
                        #if (FLASHEND > 0xFFFF)
                            Endpoint_Write_Word_LE(pgm_read_word_far(CurrFlashAddress.Long));
                        #else
                            Endpoint_Write_Word_LE(pgm_read_word(CurrFlashAddress.Long));
    3844:	f9 01       	movw	r30, r18
    3846:	85 91       	lpm	r24, Z+
    3848:	94 91       	lpm	r25, Z+
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
    384a:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Word >> 8);
    384e:	90 93 f1 00 	sts	0x00F1, r25
    3852:	01 50       	subi	r16, 0x01	; 1
    3854:	10 40       	sbci	r17, 0x00	; 0
    3856:	2e 5f       	subi	r18, 0xFE	; 254
    3858:	3f 4f       	sbci	r19, 0xFF	; 255
    385a:	4f 4f       	sbci	r20, 0xFF	; 255
    385c:	5f 4f       	sbci	r21, 0xFF	; 255
                    #else
                      0
                    #endif
                                            }};

                    while (WordsRemaining--)
    385e:	01 15       	cp	r16, r1
    3860:	11 05       	cpc	r17, r1
    3862:	c9 f6       	brne	.-78     	; 0x3816 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x312>
                        /* Adjust counters */
                        CurrFlashAddress.Long += 2;
                    }

                    /* Once reading is complete, start address equals the end address */
                    StartAddr = EndAddr;
    3864:	70 93 16 01 	sts	0x0116, r23
    3868:	60 93 15 01 	sts	0x0115, r22
    386c:	31 c0       	rjmp	.+98     	; 0x38d0 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x3cc>
                }
                else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x02))       // Read EEPROM
    386e:	82 30       	cpi	r24, 0x02	; 2
    3870:	79 f5       	brne	.+94     	; 0x38d0 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x3cc>
    3872:	27 c0       	rjmp	.+78     	; 0x38c2 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x3be>
                {
                    while (BytesRemaining--)
                    {
                        /* Check if endpoint is full - if so clear it and wait until ready for next packet */
                        if (Endpoint_BytesInEndpoint() == DFU_CONTROL_ENDPOINT_SIZE)
    3874:	80 91 f2 00 	lds	r24, 0x00F2
    3878:	80 32       	cpi	r24, 0x20	; 32
    387a:	b9 f4       	brne	.+46     	; 0x38aa <DFU_EVENT_USB_Device_UnhandledControlRequest+0x3a6>
                        {
                            Endpoint_ClearIN();
    387c:	80 91 e8 00 	lds	r24, 0x00E8
    3880:	98 2f       	mov	r25, r24
    3882:	9e 7f       	andi	r25, 0xFE	; 254
    3884:	90 93 e8 00 	sts	0x00E8, r25
    3888:	8f 77       	andi	r24, 0x7F	; 127
    388a:	80 93 e8 00 	sts	0x00E8, r24
    388e:	09 c0       	rjmp	.+18     	; 0x38a2 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x39e>

                            while (!(Endpoint_IsINReady()))
                            {
                                if (USB_DeviceState == DEVICE_STATE_Unattached)
    3890:	80 91 0e 01 	lds	r24, 0x010E
    3894:	88 23       	and	r24, r24
    3896:	29 f4       	brne	.+10     	; 0x38a2 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x39e>
    3898:	30 93 16 01 	sts	0x0116, r19
    389c:	20 93 15 01 	sts	0x0115, r18
    38a0:	55 c0       	rjmp	.+170    	; 0x394c <DFU_EVENT_USB_Device_UnhandledControlRequest+0x448>
                        /* Check if endpoint is full - if so clear it and wait until ready for next packet */
                        if (Endpoint_BytesInEndpoint() == DFU_CONTROL_ENDPOINT_SIZE)
                        {
                            Endpoint_ClearIN();

                            while (!(Endpoint_IsINReady()))
    38a2:	80 91 e8 00 	lds	r24, 0x00E8
    38a6:	80 ff       	sbrs	r24, 0
    38a8:	f3 cf       	rjmp	.-26     	; 0x3890 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x38c>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    38aa:	f9 99       	sbic	0x1f, 1	; 31
    38ac:	fe cf       	rjmp	.-4      	; 0x38aa <DFU_EVENT_USB_Device_UnhandledControlRequest+0x3a6>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    38ae:	32 bd       	out	0x22, r19	; 34
    38b0:	21 bd       	out	0x21, r18	; 33
#endif
    EECR |= (1 << EERE);
    38b2:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    38b4:	80 b5       	in	r24, 0x20	; 32
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    38b6:	80 93 f1 00 	sts	0x00F1, r24
    38ba:	41 50       	subi	r20, 0x01	; 1
    38bc:	50 40       	sbci	r21, 0x00	; 0
    38be:	2f 5f       	subi	r18, 0xFF	; 255
    38c0:	3f 4f       	sbci	r19, 0xFF	; 255
                    /* Once reading is complete, start address equals the end address */
                    StartAddr = EndAddr;
                }
                else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x02))       // Read EEPROM
                {
                    while (BytesRemaining--)
    38c2:	41 15       	cp	r20, r1
    38c4:	51 05       	cpc	r21, r1
    38c6:	b1 f6       	brne	.-84     	; 0x3874 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x370>
    38c8:	30 93 16 01 	sts	0x0116, r19
    38cc:	20 93 15 01 	sts	0x0115, r18
                        StartAddr++;
                    }
                }

                /* Return to idle state */
                DFU_State = dfuIDLE;
    38d0:	82 e0       	ldi	r24, 0x02	; 2
    38d2:	80 93 11 01 	sts	0x0111, r24
    38d6:	27 c0       	rjmp	.+78     	; 0x3926 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x422>
            Endpoint_ClearStatusStage();
            break;
#endif

        case DFU_GETSTATUS:
            Endpoint_ClearSETUP();
    38d8:	80 91 e8 00 	lds	r24, 0x00E8
    38dc:	87 7f       	andi	r24, 0xF7	; 247
    38de:	80 93 e8 00 	sts	0x00E8, r24

            /* Write 8-bit status value */
            Endpoint_Write_Byte(DFU_Status);
    38e2:	80 91 12 01 	lds	r24, 0x0112
    38e6:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
    38ea:	10 92 f1 00 	sts	0x00F1, r1
    38ee:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Word >> 8);
    38f2:	10 92 f1 00 	sts	0x00F1, r1
            /* Write 24-bit poll timeout value */
            Endpoint_Write_Byte(0);
            Endpoint_Write_Word_LE(0);

            /* Write 8-bit state value */
            Endpoint_Write_Byte(DFU_State);
    38f6:	80 91 11 01 	lds	r24, 0x0111
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    38fa:	80 93 f1 00 	sts	0x00F1, r24
            Endpoint_ClearIN();

            Endpoint_ClearStatusStage();
            break;
        case DFU_CLRSTATUS:
            Endpoint_ClearSETUP();
    38fe:	10 92 f1 00 	sts	0x00F1, r1
    3902:	11 c0       	rjmp	.+34     	; 0x3926 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x422>
    3904:	80 91 e8 00 	lds	r24, 0x00E8
    3908:	87 7f       	andi	r24, 0xF7	; 247
    390a:	80 93 e8 00 	sts	0x00E8, r24

            /* Reset the status value variable to the default OK status */
            DFU_Status = OK;
    390e:	10 92 12 01 	sts	0x0112, r1
    3912:	1b c0       	rjmp	.+54     	; 0x394a <DFU_EVENT_USB_Device_UnhandledControlRequest+0x446>

            Endpoint_ClearStatusStage();
            break;
        case DFU_GETSTATE:
            Endpoint_ClearSETUP();
    3914:	80 91 e8 00 	lds	r24, 0x00E8
    3918:	87 7f       	andi	r24, 0xF7	; 247
    391a:	80 93 e8 00 	sts	0x00E8, r24

            /* Write the current device state to the endpoint */
            Endpoint_Write_Byte(DFU_State);
    391e:	80 91 11 01 	lds	r24, 0x0111
    3922:	80 93 f1 00 	sts	0x00F1, r24

            Endpoint_ClearIN();
    3926:	80 91 e8 00 	lds	r24, 0x00E8
    392a:	98 2f       	mov	r25, r24
    392c:	9e 7f       	andi	r25, 0xFE	; 254
    392e:	90 93 e8 00 	sts	0x00E8, r25
    3932:	8f 77       	andi	r24, 0x7F	; 127
    3934:	80 93 e8 00 	sts	0x00E8, r24
    3938:	08 c0       	rjmp	.+16     	; 0x394a <DFU_EVENT_USB_Device_UnhandledControlRequest+0x446>

            Endpoint_ClearStatusStage();
            break;
        case DFU_ABORT:
            Endpoint_ClearSETUP();
    393a:	80 91 e8 00 	lds	r24, 0x00E8
    393e:	87 7f       	andi	r24, 0xF7	; 247
    3940:	80 93 e8 00 	sts	0x00E8, r24

            /* Reset the current state variable to the default idle state */
            DFU_State = dfuIDLE;
    3944:	82 e0       	ldi	r24, 0x02	; 2
    3946:	80 93 11 01 	sts	0x0111, r24

            Endpoint_ClearStatusStage();
    394a:	e1 db       	rcall	.-2110   	; 0x310e <Endpoint_ClearStatusStage>
            break;
    }
}
    394c:	df 91       	pop	r29
    394e:	cf 91       	pop	r28
    3950:	1f 91       	pop	r17
    3952:	0f 91       	pop	r16
    3954:	ff 90       	pop	r15
    3956:	ef 90       	pop	r14
    3958:	df 90       	pop	r13
    395a:	cf 90       	pop	r12
    395c:	bf 90       	pop	r11
    395e:	af 90       	pop	r10
    3960:	9f 90       	pop	r9
    3962:	8f 90       	pop	r8
    3964:	7f 90       	pop	r7
    3966:	6f 90       	pop	r6
    3968:	5f 90       	pop	r5
    396a:	4f 90       	pop	r4
    396c:	3f 90       	pop	r3
    396e:	2f 90       	pop	r2
    3970:	08 95       	ret

00003972 <EVENT_USB_Device_UnhandledControlRequest>:
    if (!RunBootloader)
        CALL_TRAP(TR_USB_DEVICE_DISCONNECT);
}

DFU_SECTION void EVENT_USB_Device_UnhandledControlRequest(void)
{
    3972:	80 91 01 01 	lds	r24, 0x0101
    3976:	88 23       	and	r24, r24
    3978:	09 f0       	breq	.+2      	; 0x397c <EVENT_USB_Device_UnhandledControlRequest+0xa>
    if (RunBootloader)
        DFU_EVENT_USB_Device_UnhandledControlRequest();
    397a:	c4 cd       	rjmp	.-1144   	; 0x3504 <DFU_EVENT_USB_Device_UnhandledControlRequest>
    else
        CALL_TRAP(TR_USB_DEVICE_UNHANDLEDCONTROLREQUEST);
    397c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bootstraps_vec4>

00003980 <ResetHardwareDFU>:
	USB_Init();
}

/** Resets all configured hardware required for the bootloader back to their original states. */
DFU_SECTION void ResetHardwareDFU(void)
{
    3980:	ab d1       	rcall	.+854    	; 0x3cd8 <USB_ShutDown>
    /* Shut down the USB subsystem */
    USB_ShutDown();

    /* Relocate the interrupt vector table back to the application section */
    MCUCR = (1 << IVCE);
    3982:	81 e0       	ldi	r24, 0x01	; 1
    3984:	85 bf       	out	0x35, r24	; 53
    MCUCR = 0;
    3986:	15 be       	out	0x35, r1	; 53
}
    3988:	08 95       	ret

0000398a <SetupHardwareDFU>:
    AppStartPtr();
}

/** Configures all hardware required for the bootloader. */
DFU_SECTION void SetupHardwareDFU(void)
{
    398a:	84 b7       	in	r24, 0x34	; 52
    398c:	87 7f       	andi	r24, 0xF7	; 247
    398e:	84 bf       	out	0x34, r24	; 52
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
	wdt_disable();
    3990:	88 e1       	ldi	r24, 0x18	; 24
    3992:	0f b6       	in	r0, 0x3f	; 63
    3994:	f8 94       	cli
    3996:	80 93 60 00 	sts	0x0060, r24
    399a:	10 92 60 00 	sts	0x0060, r1
    399e:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
    39a0:	80 e0       	ldi	r24, 0x00	; 0
    39a2:	90 e0       	ldi	r25, 0x00	; 0
    39a4:	20 e8       	ldi	r18, 0x80	; 128
    39a6:	0f b6       	in	r0, 0x3f	; 63
    39a8:	f8 94       	cli
    39aa:	20 93 61 00 	sts	0x0061, r18
    39ae:	80 93 61 00 	sts	0x0061, r24
    39b2:	0f be       	out	0x3f, r0	; 63
	
	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
    39b4:	81 e0       	ldi	r24, 0x01	; 1
    39b6:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1 << IVSEL);
    39b8:	82 e0       	ldi	r24, 0x02	; 2
    39ba:	85 bf       	out	0x35, r24	; 53

#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE))
    USB_ControlEndpointSize = DFU_CONTROL_ENDPOINT_SIZE;
    39bc:	80 e2       	ldi	r24, 0x20	; 32
    39be:	80 93 00 01 	sts	0x0100, r24
#endif

	/* Initialize the USB subsystem */
	USB_Init();
    39c2:	99 c1       	rjmp	.+818    	; 0x3cf6 <USB_Init>

000039c4 <bootmain>:
/** Main program entry point. This routine configures the hardware required by the bootloader, then continuously
 *  runs the bootloader processing routine until instructed to soft-exit, or hard-reset via the watchdog to start
 *  the loaded application code.
 */
DFU_SECTION void bootmain(void)
{
    39c4:	8f dc       	rcall	.-1762   	; 0x32e4 <SkipDfu>
    SkipDfu();

    /* Configure hardware required by the bootloader */
    SetupHardwareDFU();
    39c6:	e1 df       	rcall	.-62     	; 0x398a <SetupHardwareDFU>
    39c8:	01 c0       	rjmp	.+2      	; 0x39cc <bootmain+0x8>

    /* Run the USB management task while the bootloader is supposed to be running */
    while (RunBootloader || WaitForExit)
      USB_USBTask();
    39ca:	4a d2       	rcall	.+1172   	; 0x3e60 <USB_USBTask>

    /* Configure hardware required by the bootloader */
    SetupHardwareDFU();

    /* Run the USB management task while the bootloader is supposed to be running */
    while (RunBootloader || WaitForExit)
    39cc:	80 91 01 01 	lds	r24, 0x0101
    39d0:	88 23       	and	r24, r24
    39d2:	d9 f7       	brne	.-10     	; 0x39ca <bootmain+0x6>
    39d4:	80 91 10 01 	lds	r24, 0x0110
    39d8:	88 23       	and	r24, r24
    39da:	b9 f7       	brne	.-18     	; 0x39ca <bootmain+0x6>
      USB_USBTask();

    /* Reset configured hardware back to their original states for the user application */
    ResetHardwareDFU();
    39dc:	d1 df       	rcall	.-94     	; 0x3980 <ResetHardwareDFU>

    /* Start the user application */
    AppStartPtr();
    39de:	e0 91 13 01 	lds	r30, 0x0113
    39e2:	f0 91 14 01 	lds	r31, 0x0114
    39e6:	09 95       	icall

000039e8 <USB_Device_ProcessControlRequest>:
uint8_t USB_ConfigurationNumber   LUFA_SHARED_DATA_SECTION;
bool    USB_RemoteWakeupEnabled   LUFA_SHARED_DATA_SECTION;
bool    USB_CurrentlySelfPowered  LUFA_SHARED_DATA_SECTION;

void USB_Device_ProcessControlRequest(void)
{
    39e8:	1f 93       	push	r17
    39ea:	df 93       	push	r29
    39ec:	cf 93       	push	r28
    39ee:	00 d0       	rcall	.+0      	; 0x39f0 <USB_Device_ProcessControlRequest+0x8>
    39f0:	cd b7       	in	r28, 0x3d	; 61
    39f2:	de b7       	in	r29, 0x3e	; 62
    39f4:	e6 e0       	ldi	r30, 0x06	; 6
    39f6:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    39f8:	80 91 f1 00 	lds	r24, 0x00F1
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
	
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
    39fc:	81 93       	st	Z+, r24
void USB_Device_ProcessControlRequest(void)
{
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
	
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    39fe:	81 e0       	ldi	r24, 0x01	; 1
    3a00:	ee 30       	cpi	r30, 0x0E	; 14
    3a02:	f8 07       	cpc	r31, r24
    3a04:	c9 f7       	brne	.-14     	; 0x39f8 <USB_Device_ProcessControlRequest+0x10>
	  *(RequestHeader++) = Endpoint_Read_Byte();
	  
	uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    3a06:	80 91 06 01 	lds	r24, 0x0106
	
	switch (USB_ControlRequest.bRequest)
    3a0a:	30 91 07 01 	lds	r19, 0x0107
    3a0e:	35 30       	cpi	r19, 0x05	; 5
    3a10:	09 f4       	brne	.+2      	; 0x3a14 <USB_Device_ProcessControlRequest+0x2c>
    3a12:	85 c0       	rjmp	.+266    	; 0x3b1e <USB_Device_ProcessControlRequest+0x136>
    3a14:	36 30       	cpi	r19, 0x06	; 6
    3a16:	40 f4       	brcc	.+16     	; 0x3a28 <USB_Device_ProcessControlRequest+0x40>
    3a18:	31 30       	cpi	r19, 0x01	; 1
    3a1a:	c1 f1       	breq	.+112    	; 0x3a8c <USB_Device_ProcessControlRequest+0xa4>
    3a1c:	31 30       	cpi	r19, 0x01	; 1
    3a1e:	70 f0       	brcs	.+28     	; 0x3a3c <USB_Device_ProcessControlRequest+0x54>
    3a20:	33 30       	cpi	r19, 0x03	; 3
    3a22:	09 f0       	breq	.+2      	; 0x3a26 <USB_Device_ProcessControlRequest+0x3e>
    3a24:	ee c0       	rjmp	.+476    	; 0x3c02 <USB_Device_ProcessControlRequest+0x21a>
    3a26:	32 c0       	rjmp	.+100    	; 0x3a8c <USB_Device_ProcessControlRequest+0xa4>
    3a28:	38 30       	cpi	r19, 0x08	; 8
    3a2a:	09 f4       	brne	.+2      	; 0x3a2e <USB_Device_ProcessControlRequest+0x46>
    3a2c:	bb c0       	rjmp	.+374    	; 0x3ba4 <USB_Device_ProcessControlRequest+0x1bc>
    3a2e:	39 30       	cpi	r19, 0x09	; 9
    3a30:	09 f4       	brne	.+2      	; 0x3a34 <USB_Device_ProcessControlRequest+0x4c>
    3a32:	ce c0       	rjmp	.+412    	; 0x3bd0 <USB_Device_ProcessControlRequest+0x1e8>
    3a34:	36 30       	cpi	r19, 0x06	; 6
    3a36:	09 f0       	breq	.+2      	; 0x3a3a <USB_Device_ProcessControlRequest+0x52>
    3a38:	e4 c0       	rjmp	.+456    	; 0x3c02 <USB_Device_ProcessControlRequest+0x21a>
    3a3a:	90 c0       	rjmp	.+288    	; 0x3b5c <USB_Device_ProcessControlRequest+0x174>
	{
		case REQ_GetStatus:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3a3c:	80 38       	cpi	r24, 0x80	; 128
    3a3e:	21 f0       	breq	.+8      	; 0x3a48 <USB_Device_ProcessControlRequest+0x60>
    3a40:	82 38       	cpi	r24, 0x82	; 130
    3a42:	09 f0       	breq	.+2      	; 0x3a46 <USB_Device_ProcessControlRequest+0x5e>
    3a44:	de c0       	rjmp	.+444    	; 0x3c02 <USB_Device_ProcessControlRequest+0x21a>
    3a46:	08 c0       	rjmp	.+16     	; 0x3a58 <USB_Device_ProcessControlRequest+0x70>
    3a48:	90 91 04 01 	lds	r25, 0x0104
	{
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE):
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			
			if (USB_RemoteWakeupEnabled)
    3a4c:	80 91 03 01 	lds	r24, 0x0103
    3a50:	88 23       	and	r24, r24
    3a52:	91 f0       	breq	.+36     	; 0x3a78 <USB_Device_ProcessControlRequest+0x90>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    3a54:	92 60       	ori	r25, 0x02	; 2
    3a56:	10 c0       	rjmp	.+32     	; 0x3a78 <USB_Device_ProcessControlRequest+0x90>
			
			break;
#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint(USB_ControlRequest.wIndex & 0xFF);
    3a58:	80 91 0a 01 	lds	r24, 0x010A
    3a5c:	80 93 e9 00 	sts	0x00E9, r24

			CurrentStatus = Endpoint_IsStalled();
    3a60:	80 91 eb 00 	lds	r24, 0x00EB
    3a64:	90 e0       	ldi	r25, 0x00	; 0
    3a66:	25 e0       	ldi	r18, 0x05	; 5
    3a68:	96 95       	lsr	r25
    3a6a:	87 95       	ror	r24
    3a6c:	2a 95       	dec	r18
    3a6e:	e1 f7       	brne	.-8      	; 0x3a68 <USB_Device_ProcessControlRequest+0x80>
    3a70:	98 2f       	mov	r25, r24
    3a72:	91 70       	andi	r25, 0x01	; 1

			Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);			  
    3a74:	10 92 e9 00 	sts	0x00E9, r1
#endif
		default:
			return;
	}

	Endpoint_ClearSETUP();
    3a78:	80 91 e8 00 	lds	r24, 0x00E8
    3a7c:	87 7f       	andi	r24, 0xF7	; 247
    3a7e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
    3a82:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Word >> 8);
    3a86:	10 92 f1 00 	sts	0x00F1, r1
    3a8a:	97 c0       	rjmp	.+302    	; 0x3bba <USB_Device_ProcessControlRequest+0x1d2>
			}

			break;
		case REQ_ClearFeature:
		case REQ_SetFeature:
			if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3a8c:	88 23       	and	r24, r24
    3a8e:	19 f0       	breq	.+6      	; 0x3a96 <USB_Device_ProcessControlRequest+0xae>
    3a90:	82 30       	cpi	r24, 0x02	; 2
    3a92:	09 f0       	breq	.+2      	; 0x3a96 <USB_Device_ProcessControlRequest+0xae>
    3a94:	b6 c0       	rjmp	.+364    	; 0x3c02 <USB_Device_ProcessControlRequest+0x21a>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{	
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    3a96:	90 e0       	ldi	r25, 0x00	; 0
    3a98:	8f 71       	andi	r24, 0x1F	; 31
    3a9a:	90 70       	andi	r25, 0x00	; 0
    3a9c:	00 97       	sbiw	r24, 0x00	; 0
    3a9e:	19 f0       	breq	.+6      	; 0x3aa6 <USB_Device_ProcessControlRequest+0xbe>
    3aa0:	02 97       	sbiw	r24, 0x02	; 2
    3aa2:	b9 f5       	brne	.+110    	; 0x3b12 <USB_Device_ProcessControlRequest+0x12a>
    3aa4:	0c c0       	rjmp	.+24     	; 0x3abe <USB_Device_ProcessControlRequest+0xd6>
	{
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_REMOTE_WAKEUP)
    3aa6:	80 91 08 01 	lds	r24, 0x0108
    3aaa:	81 30       	cpi	r24, 0x01	; 1
    3aac:	09 f0       	breq	.+2      	; 0x3ab0 <USB_Device_ProcessControlRequest+0xc8>
    3aae:	aa c0       	rjmp	.+340    	; 0x3c04 <USB_Device_ProcessControlRequest+0x21c>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    3ab0:	10 92 03 01 	sts	0x0103, r1
    3ab4:	33 30       	cpi	r19, 0x03	; 3
    3ab6:	69 f5       	brne	.+90     	; 0x3b12 <USB_Device_ProcessControlRequest+0x12a>
    3ab8:	80 93 03 01 	sts	0x0103, r24
    3abc:	2a c0       	rjmp	.+84     	; 0x3b12 <USB_Device_ProcessControlRequest+0x12a>
			  return;
			
			break;			
#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_ENDPOINT_HALT)
    3abe:	80 91 08 01 	lds	r24, 0x0108
    3ac2:	88 23       	and	r24, r24
    3ac4:	31 f5       	brne	.+76     	; 0x3b12 <USB_Device_ProcessControlRequest+0x12a>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    3ac6:	20 91 0a 01 	lds	r18, 0x010A
    3aca:	27 70       	andi	r18, 0x07	; 7
				
				if (EndpointIndex == ENDPOINT_CONTROLEP)
    3acc:	09 f4       	brne	.+2      	; 0x3ad0 <USB_Device_ProcessControlRequest+0xe8>
    3ace:	9a c0       	rjmp	.+308    	; 0x3c04 <USB_Device_ProcessControlRequest+0x21c>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);
    3ad0:	20 93 e9 00 	sts	0x00E9, r18

				if (Endpoint_IsEnabled())
    3ad4:	80 91 eb 00 	lds	r24, 0x00EB
    3ad8:	80 ff       	sbrs	r24, 0
    3ada:	1b c0       	rjmp	.+54     	; 0x3b12 <USB_Device_ProcessControlRequest+0x12a>
				{				
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    3adc:	33 30       	cpi	r19, 0x03	; 3
    3ade:	21 f4       	brne	.+8      	; 0x3ae8 <USB_Device_ProcessControlRequest+0x100>
					{
						Endpoint_StallTransaction();
    3ae0:	80 91 eb 00 	lds	r24, 0x00EB
    3ae4:	80 62       	ori	r24, 0x20	; 32
    3ae6:	13 c0       	rjmp	.+38     	; 0x3b0e <USB_Device_ProcessControlRequest+0x126>
					}
					else
					{
						Endpoint_ClearStall();
    3ae8:	80 91 eb 00 	lds	r24, 0x00EB
    3aec:	80 61       	ori	r24, 0x10	; 16
    3aee:	80 93 eb 00 	sts	0x00EB, r24
						Endpoint_ResetFIFO(EndpointIndex);
    3af2:	81 e0       	ldi	r24, 0x01	; 1
    3af4:	90 e0       	ldi	r25, 0x00	; 0
    3af6:	02 c0       	rjmp	.+4      	; 0x3afc <USB_Device_ProcessControlRequest+0x114>
    3af8:	88 0f       	add	r24, r24
    3afa:	99 1f       	adc	r25, r25
    3afc:	2a 95       	dec	r18
    3afe:	e2 f7       	brpl	.-8      	; 0x3af8 <USB_Device_ProcessControlRequest+0x110>
    3b00:	80 93 ea 00 	sts	0x00EA, r24
    3b04:	10 92 ea 00 	sts	0x00EA, r1
						Endpoint_ResetDataToggle();
    3b08:	80 91 eb 00 	lds	r24, 0x00EB
    3b0c:	88 60       	ori	r24, 0x08	; 8
    3b0e:	80 93 eb 00 	sts	0x00EB, r24
			
			break;
#endif
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    3b12:	10 92 e9 00 	sts	0x00E9, r1

	Endpoint_ClearSETUP();
    3b16:	80 91 e8 00 	lds	r24, 0x00E8
    3b1a:	87 7f       	andi	r24, 0xF7	; 247
    3b1c:	55 c0       	rjmp	.+170    	; 0x3bc8 <USB_Device_ProcessControlRequest+0x1e0>
				RequestHandled = true;
			}

			break;
		case REQ_SetAddress:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3b1e:	88 23       	and	r24, r24
    3b20:	09 f0       	breq	.+2      	; 0x3b24 <USB_Device_ProcessControlRequest+0x13c>
    3b22:	6f c0       	rjmp	.+222    	; 0x3c02 <USB_Device_ProcessControlRequest+0x21a>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    3b24:	10 91 08 01 	lds	r17, 0x0108

	Endpoint_ClearSETUP();
    3b28:	80 91 e8 00 	lds	r24, 0x00E8
    3b2c:	87 7f       	andi	r24, 0xF7	; 247
    3b2e:	80 93 e8 00 	sts	0x00E8, r24
	
	Endpoint_ClearStatusStage();
    3b32:	ed da       	rcall	.-2598   	; 0x310e <Endpoint_ClearStatusStage>
    3b34:	05 c0       	rjmp	.+10     	; 0x3b40 <USB_Device_ProcessControlRequest+0x158>
	
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
    3b36:	80 91 0e 01 	lds	r24, 0x010E
    3b3a:	88 23       	and	r24, r24
    3b3c:	09 f4       	brne	.+2      	; 0x3b40 <USB_Device_ProcessControlRequest+0x158>
    3b3e:	62 c0       	rjmp	.+196    	; 0x3c04 <USB_Device_ProcessControlRequest+0x21c>

	Endpoint_ClearSETUP();
	
	Endpoint_ClearStatusStage();
	
	while (!(Endpoint_IsINReady()))
    3b40:	80 91 e8 00 	lds	r24, 0x00E8
    3b44:	80 ff       	sbrs	r24, 0
    3b46:	f7 cf       	rjmp	.-18     	; 0x3b36 <USB_Device_ProcessControlRequest+0x14e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    3b48:	91 2f       	mov	r25, r17
    3b4a:	9f 77       	andi	r25, 0x7F	; 127
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return;
	}

	if (DeviceAddress)
    3b4c:	19 f0       	breq	.+6      	; 0x3b54 <USB_Device_ProcessControlRequest+0x16c>
	  USB_DeviceState = DEVICE_STATE_Addressed;
    3b4e:	83 e0       	ldi	r24, 0x03	; 3
    3b50:	80 93 0e 01 	sts	0x010E, r24

	UDADDR = ((1 << ADDEN) | DeviceAddress);
    3b54:	90 68       	ori	r25, 0x80	; 128
    3b56:	90 93 e3 00 	sts	0x00E3, r25
    3b5a:	54 c0       	rjmp	.+168    	; 0x3c04 <USB_Device_ProcessControlRequest+0x21c>
				RequestHandled = true;
			}

			break;
		case REQ_GetDescriptor:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3b5c:	80 58       	subi	r24, 0x80	; 128
    3b5e:	82 30       	cpi	r24, 0x02	; 2
    3b60:	08 f0       	brcs	.+2      	; 0x3b64 <USB_Device_ProcessControlRequest+0x17c>
    3b62:	4f c0       	rjmp	.+158    	; 0x3c02 <USB_Device_ProcessControlRequest+0x21a>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif
	
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    3b64:	80 91 08 01 	lds	r24, 0x0108
    3b68:	90 91 09 01 	lds	r25, 0x0109
    3b6c:	60 91 0a 01 	lds	r22, 0x010A
    3b70:	ae 01       	movw	r20, r28
    3b72:	4f 5f       	subi	r20, 0xFF	; 255
    3b74:	5f 4f       	sbci	r21, 0xFF	; 255
    3b76:	57 db       	rcall	.-2386   	; 0x3226 <CALLBACK_USB_GetDescriptor>
    3b78:	bc 01       	movw	r22, r24
    3b7a:	00 97       	sbiw	r24, 0x00	; 0
    3b7c:	09 f4       	brne	.+2      	; 0x3b80 <USB_Device_ProcessControlRequest+0x198>
    3b7e:	42 c0       	rjmp	.+132    	; 0x3c04 <USB_Device_ProcessControlRequest+0x21c>
													 )) == NO_DESCRIPTOR)
	{
		return;
	}
	
	Endpoint_ClearSETUP();
    3b80:	80 91 e8 00 	lds	r24, 0x00E8
    3b84:	87 7f       	andi	r24, 0xF7	; 247
    3b86:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);	
    3b8a:	89 81       	ldd	r24, Y+1	; 0x01
    3b8c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b8e:	e8 da       	rcall	.-2608   	; 0x3160 <Endpoint_Write_Control_PStream_LE>
	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);	
	#endif

	Endpoint_ClearOUT();
    3b90:	80 91 e8 00 	lds	r24, 0x00E8
    3b94:	98 2f       	mov	r25, r24
    3b96:	9b 7f       	andi	r25, 0xFB	; 251
    3b98:	90 93 e8 00 	sts	0x00E8, r25
    3b9c:	8f 77       	andi	r24, 0x7F	; 127
    3b9e:	80 93 e8 00 	sts	0x00E8, r24
    3ba2:	30 c0       	rjmp	.+96     	; 0x3c04 <USB_Device_ProcessControlRequest+0x21c>
				RequestHandled = true;
			}
			
			break;
		case REQ_GetConfiguration:
			if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    3ba4:	80 38       	cpi	r24, 0x80	; 128
    3ba6:	69 f5       	brne	.+90     	; 0x3c02 <USB_Device_ProcessControlRequest+0x21a>
	EVENT_USB_Device_ConfigurationChanged();
}

void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();
    3ba8:	80 91 e8 00 	lds	r24, 0x00E8
    3bac:	87 7f       	andi	r24, 0xF7	; 247
    3bae:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_Write_Byte(USB_ConfigurationNumber);
    3bb2:	80 91 02 01 	lds	r24, 0x0102
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    3bb6:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_ClearIN();
    3bba:	80 91 e8 00 	lds	r24, 0x00E8
    3bbe:	98 2f       	mov	r25, r24
    3bc0:	9e 7f       	andi	r25, 0xFE	; 254
    3bc2:	90 93 e8 00 	sts	0x00E8, r25
    3bc6:	8f 77       	andi	r24, 0x7F	; 127
    3bc8:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_ClearStatusStage();
    3bcc:	a0 da       	rcall	.-2752   	; 0x310e <Endpoint_ClearStatusStage>
    3bce:	1a c0       	rjmp	.+52     	; 0x3c04 <USB_Device_ProcessControlRequest+0x21c>
				RequestHandled = true;
			}

			break;
		case REQ_SetConfiguration:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3bd0:	88 23       	and	r24, r24
    3bd2:	b9 f4       	brne	.+46     	; 0x3c02 <USB_Device_ProcessControlRequest+0x21a>
}

static void USB_Device_SetConfiguration(void)
{
#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    3bd4:	90 91 08 01 	lds	r25, 0x0108
    3bd8:	92 30       	cpi	r25, 0x02	; 2
    3bda:	a0 f4       	brcc	.+40     	; 0x3c04 <USB_Device_ProcessControlRequest+0x21c>
		  return;
	}
	#endif
#endif
	
	Endpoint_ClearSETUP();
    3bdc:	80 91 e8 00 	lds	r24, 0x00E8
    3be0:	87 7f       	andi	r24, 0xF7	; 247
    3be2:	80 93 e8 00 	sts	0x00E8, r24

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    3be6:	90 93 02 01 	sts	0x0102, r25

	Endpoint_ClearStatusStage();
    3bea:	91 da       	rcall	.-2782   	; 0x310e <Endpoint_ClearStatusStage>

	USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
    3bec:	80 91 02 01 	lds	r24, 0x0102
    3bf0:	88 23       	and	r24, r24
    3bf2:	11 f4       	brne	.+4      	; 0x3bf8 <USB_Device_ProcessControlRequest+0x210>
    3bf4:	83 e0       	ldi	r24, 0x03	; 3
    3bf6:	01 c0       	rjmp	.+2      	; 0x3bfa <USB_Device_ProcessControlRequest+0x212>
    3bf8:	84 e0       	ldi	r24, 0x04	; 4
    3bfa:	80 93 0e 01 	sts	0x010E, r24

	EVENT_USB_Device_ConfigurationChanged();
    3bfe:	4f db       	rcall	.-2402   	; 0x329e <EVENT_USB_Device_ConfigurationChanged>
    3c00:	01 c0       	rjmp	.+2      	; 0x3c04 <USB_Device_ProcessControlRequest+0x21c>

			break;
	}

	if (!(RequestHandled))
	  EVENT_USB_Device_UnhandledControlRequest();
    3c02:	b7 de       	rcall	.-658    	; 0x3972 <EVENT_USB_Device_UnhandledControlRequest>
	  
	if (Endpoint_IsSETUPReceived())
    3c04:	80 91 e8 00 	lds	r24, 0x00E8
    3c08:	83 ff       	sbrs	r24, 3
    3c0a:	0a c0       	rjmp	.+20     	; 0x3c20 <USB_Device_ProcessControlRequest+0x238>
	{
		Endpoint_StallTransaction();
    3c0c:	80 91 eb 00 	lds	r24, 0x00EB
    3c10:	80 62       	ori	r24, 0x20	; 32
    3c12:	80 93 eb 00 	sts	0x00EB, r24
		Endpoint_ClearSETUP();		
    3c16:	80 91 e8 00 	lds	r24, 0x00E8
    3c1a:	87 7f       	andi	r24, 0xF7	; 247
    3c1c:	80 93 e8 00 	sts	0x00E8, r24
	}
}
    3c20:	0f 90       	pop	r0
    3c22:	0f 90       	pop	r0
    3c24:	cf 91       	pop	r28
    3c26:	df 91       	pop	r29
    3c28:	1f 91       	pop	r17
    3c2a:	08 95       	ret

00003c2c <USB_ResetInterface>:
	USB_CurrentMode = USB_MODE_NONE;
	#endif
}

void USB_ResetInterface(void)
{
    3c2c:	df 93       	push	r29
    3c2e:	cf 93       	push	r28
    3c30:	00 d0       	rcall	.+0      	; 0x3c32 <USB_ResetInterface+0x6>
    3c32:	cd b7       	in	r28, 0x3d	; 61
    3c34:	de b7       	in	r29, 0x3e	; 62
	USB_INT_DisableAllInterrupts();
    3c36:	65 d0       	rcall	.+202    	; 0x3d02 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    3c38:	67 d0       	rcall	.+206    	; 0x3d08 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_HOST)
	USB_HostState   = HOST_STATE_Unattached;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	USB_DeviceState = DEVICE_STATE_Unattached;
    3c3a:	10 92 0e 01 	sts	0x010E, r1
	USB_ConfigurationNumber  = 0;
    3c3e:	10 92 02 01 	sts	0x0102, r1
	USB_RemoteWakeupEnabled  = false;
    3c42:	10 92 03 01 	sts	0x0103, r1
	USB_CurrentlySelfPowered = false;
    3c46:	10 92 04 01 	sts	0x0104, r1
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
    3c4a:	19 bc       	out	0x29, r1	; 41
    3c4c:	89 b5       	in	r24, 0x29	; 41
    3c4e:	82 60       	ori	r24, 0x02	; 2
    3c50:	89 bd       	out	0x29, r24	; 41
		while (!(USB_PLL_IsReady()));
    3c52:	09 b4       	in	r0, 0x29	; 41
    3c54:	00 fe       	sbrs	r0, 0
    3c56:	fd cf       	rjmp	.-6      	; 0x3c52 <USB_ResetInterface+0x26>
	}
	
	USB_Controller_Reset();
    3c58:	80 91 d8 00 	lds	r24, 0x00D8
    3c5c:	98 2f       	mov	r25, r24
    3c5e:	9f 77       	andi	r25, 0x7F	; 127
    3c60:	90 93 d8 00 	sts	0x00D8, r25
    3c64:	80 68       	ori	r24, 0x80	; 128
    3c66:	80 93 d8 00 	sts	0x00D8, r24
		USB_CurrentMode = USB_GetUSBModeFromUID();
	}
	#endif
		
	if (!(USB_Options & USB_OPT_REG_DISABLED))
	  USB_REG_On();
    3c6a:	80 91 63 00 	lds	r24, 0x0063
    3c6e:	8e 7f       	andi	r24, 0xFE	; 254
    3c70:	80 93 63 00 	sts	0x0063, r24
	else
	  USB_REG_Off();
	
	USB_CLK_Unfreeze();
    3c74:	80 91 d8 00 	lds	r24, 0x00D8
    3c78:	8f 7d       	andi	r24, 0xDF	; 223
    3c7a:	80 93 d8 00 	sts	0x00D8, r24
	#if (defined(USB_CAN_BE_DEVICE) && !defined(FIXED_CONTROL_ENDPOINT_SIZE))
	if (USB_CurrentMode == USB_MODE_DEVICE)
	{
		USB_Descriptor_Device_t* DeviceDescriptorPtr;

		if (CALLBACK_USB_GetDescriptor((DTYPE_Device << 8), 0, (void*)&DeviceDescriptorPtr) != NO_DESCRIPTOR)
    3c7e:	80 e0       	ldi	r24, 0x00	; 0
    3c80:	91 e0       	ldi	r25, 0x01	; 1
    3c82:	60 e0       	ldi	r22, 0x00	; 0
    3c84:	ae 01       	movw	r20, r28
    3c86:	4f 5f       	subi	r20, 0xFF	; 255
    3c88:	5f 4f       	sbci	r21, 0xFF	; 255
    3c8a:	cd da       	rcall	.-2662   	; 0x3226 <CALLBACK_USB_GetDescriptor>
    3c8c:	89 2b       	or	r24, r25
    3c8e:	31 f0       	breq	.+12     	; 0x3c9c <USB_ResetInterface+0x70>
			#if defined(USE_RAM_DESCRIPTORS)
			USB_ControlEndpointSize = DeviceDescriptorPtr->Endpoint0Size;
			#elif defined(USE_EEPROM_DESCRIPTORS)
			USB_ControlEndpointSize = eeprom_read_byte(&DeviceDescriptorPtr->Endpoint0Size);
			#else
			USB_ControlEndpointSize = pgm_read_byte(&DeviceDescriptorPtr->Endpoint0Size);
    3c90:	e9 81       	ldd	r30, Y+1	; 0x01
    3c92:	fa 81       	ldd	r31, Y+2	; 0x02
    3c94:	37 96       	adiw	r30, 0x07	; 7
    3c96:	e4 91       	lpm	r30, Z+
    3c98:	e0 93 00 01 	sts	0x0100, r30
			#endif
		}
	}
	#endif

	USB_Attach();
    3c9c:	80 91 e0 00 	lds	r24, 0x00E0
    3ca0:	8e 7f       	andi	r24, 0xFE	; 254
    3ca2:	80 93 e0 00 	sts	0x00E0, r24
	
	#if defined(USB_DEVICE_ONLY)
	USB_INT_Clear(USB_INT_SUSPEND);
    3ca6:	80 91 e1 00 	lds	r24, 0x00E1
    3caa:	8e 7f       	andi	r24, 0xFE	; 254
    3cac:	80 93 e1 00 	sts	0x00E1, r24
	USB_INT_Enable(USB_INT_SUSPEND);
    3cb0:	80 91 e2 00 	lds	r24, 0x00E2
    3cb4:	81 60       	ori	r24, 0x01	; 1
    3cb6:	80 93 e2 00 	sts	0x00E2, r24
	USB_INT_Clear(USB_INT_EORSTI);
    3cba:	80 91 e1 00 	lds	r24, 0x00E1
    3cbe:	87 7f       	andi	r24, 0xF7	; 247
    3cc0:	80 93 e1 00 	sts	0x00E1, r24
	USB_INT_Enable(USB_INT_EORSTI);
    3cc4:	80 91 e2 00 	lds	r24, 0x00E2
    3cc8:	88 60       	ori	r24, 0x08	; 8
    3cca:	80 93 e2 00 	sts	0x00E2, r24
		
		USB_INT_Enable(USB_INT_SRPI);
		USB_INT_Enable(USB_INT_BCERRI);
	}
	#endif
}
    3cce:	0f 90       	pop	r0
    3cd0:	0f 90       	pop	r0
    3cd2:	cf 91       	pop	r28
    3cd4:	df 91       	pop	r29
    3cd6:	08 95       	ret

00003cd8 <USB_ShutDown>:

	sei();
}

void USB_ShutDown(void)
{
    3cd8:	a9 df       	rcall	.-174    	; 0x3c2c <USB_ResetInterface>
	USB_ResetInterface();
	USB_Detach();
    3cda:	e0 ee       	ldi	r30, 0xE0	; 224
    3cdc:	f0 e0       	ldi	r31, 0x00	; 0
    3cde:	80 81       	ld	r24, Z
    3ce0:	81 60       	ori	r24, 0x01	; 1
    3ce2:	80 83       	st	Z, r24
	USB_Controller_Disable();
    3ce4:	e8 ed       	ldi	r30, 0xD8	; 216
    3ce6:	f0 e0       	ldi	r31, 0x00	; 0
    3ce8:	80 81       	ld	r24, Z
    3cea:	8f 77       	andi	r24, 0x7F	; 127
    3cec:	80 83       	st	Z, r24
	
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	  USB_PLL_Off();
    3cee:	19 bc       	out	0x29, r1	; 41

	#if defined(USB_CAN_BE_BOTH)
	UHWCON &= ~(1 << UIDE);
	#endif

	USB_IsInitialized = false;
    3cf0:	10 92 05 01 	sts	0x0105, r1

	#if defined(CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_NONE;
	#endif
}
    3cf4:	08 95       	ret

00003cf6 <USB_Init>:
			   
               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
    3cf6:	9a df       	rcall	.-204    	; 0x3c2c <USB_ResetInterface>

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USB_OTGPAD_On();
	#endif

	USB_IsInitialized = true;
    3cf8:	81 e0       	ldi	r24, 0x01	; 1
    3cfa:	80 93 05 01 	sts	0x0105, r24

	sei();
    3cfe:	78 94       	sei
}
    3d00:	08 95       	ret

00003d02 <USB_INT_DisableAllInterrupts>:
*/

#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
    3d02:	10 92 e2 00 	sts	0x00E2, r1
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
    3d06:	08 95       	ret

00003d08 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
    3d08:	10 92 e1 00 	sts	0x00E1, r1
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
	#endif
}
    3d0c:	08 95       	ret

00003d0e <__vector_11>:

LUFA_DFU_DEVICE_SECTION ISR(USB_GEN_vect, ISR_BLOCK)
{
    3d0e:	1f 92       	push	r1
    3d10:	0f 92       	push	r0
    3d12:	0f b6       	in	r0, 0x3f	; 63
    3d14:	0f 92       	push	r0
    3d16:	11 24       	eor	r1, r1
    3d18:	2f 93       	push	r18
    3d1a:	3f 93       	push	r19
    3d1c:	4f 93       	push	r20
    3d1e:	5f 93       	push	r21
    3d20:	6f 93       	push	r22
    3d22:	7f 93       	push	r23
    3d24:	8f 93       	push	r24
    3d26:	9f 93       	push	r25
    3d28:	af 93       	push	r26
    3d2a:	bf 93       	push	r27
    3d2c:	ef 93       	push	r30
    3d2e:	ff 93       	push	r31
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPEND) && USB_INT_IsEnabled(USB_INT_SUSPEND))
    3d30:	80 91 e1 00 	lds	r24, 0x00E1
    3d34:	80 ff       	sbrs	r24, 0
    3d36:	1c c0       	rjmp	.+56     	; 0x3d70 <__vector_11+0x62>
    3d38:	80 91 e2 00 	lds	r24, 0x00E2
    3d3c:	80 ff       	sbrs	r24, 0
    3d3e:	18 c0       	rjmp	.+48     	; 0x3d70 <__vector_11+0x62>
	{
		USB_INT_Clear(USB_INT_SUSPEND);
    3d40:	80 91 e1 00 	lds	r24, 0x00E1
    3d44:	8e 7f       	andi	r24, 0xFE	; 254
    3d46:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_SUSPEND);
    3d4a:	80 91 e2 00 	lds	r24, 0x00E2
    3d4e:	8e 7f       	andi	r24, 0xFE	; 254
    3d50:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUP);
    3d54:	80 91 e2 00 	lds	r24, 0x00E2
    3d58:	80 61       	ori	r24, 0x10	; 16
    3d5a:	80 93 e2 00 	sts	0x00E2, r24
		
		USB_CLK_Freeze();
    3d5e:	80 91 d8 00 	lds	r24, 0x00D8
    3d62:	80 62       	ori	r24, 0x20	; 32
    3d64:	80 93 d8 00 	sts	0x00D8, r24
		
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();
    3d68:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    3d6a:	10 92 0e 01 	sts	0x010E, r1
		EVENT_USB_Device_Disconnect();
    3d6e:	90 da       	rcall	.-2784   	; 0x3290 <EVENT_USB_Device_Disconnect>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUP) && USB_INT_IsEnabled(USB_INT_WAKEUP))
    3d70:	80 91 e1 00 	lds	r24, 0x00E1
    3d74:	84 ff       	sbrs	r24, 4
    3d76:	29 c0       	rjmp	.+82     	; 0x3dca <__vector_11+0xbc>
    3d78:	80 91 e2 00 	lds	r24, 0x00E2
    3d7c:	84 ff       	sbrs	r24, 4
    3d7e:	25 c0       	rjmp	.+74     	; 0x3dca <__vector_11+0xbc>
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
    3d80:	19 bc       	out	0x29, r1	; 41
    3d82:	89 b5       	in	r24, 0x29	; 41
    3d84:	82 60       	ori	r24, 0x02	; 2
    3d86:	89 bd       	out	0x29, r24	; 41
			while (!(USB_PLL_IsReady()));
    3d88:	09 b4       	in	r0, 0x29	; 41
    3d8a:	00 fe       	sbrs	r0, 0
    3d8c:	fd cf       	rjmp	.-6      	; 0x3d88 <__vector_11+0x7a>
		}

		USB_CLK_Unfreeze();
    3d8e:	80 91 d8 00 	lds	r24, 0x00D8
    3d92:	8f 7d       	andi	r24, 0xDF	; 223
    3d94:	80 93 d8 00 	sts	0x00D8, r24

		USB_INT_Clear(USB_INT_WAKEUP);
    3d98:	80 91 e1 00 	lds	r24, 0x00E1
    3d9c:	8f 7e       	andi	r24, 0xEF	; 239
    3d9e:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_WAKEUP);
    3da2:	80 91 e2 00 	lds	r24, 0x00E2
    3da6:	8f 7e       	andi	r24, 0xEF	; 239
    3da8:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_SUSPEND);
    3dac:	80 91 e2 00 	lds	r24, 0x00E2
    3db0:	81 60       	ori	r24, 0x01	; 1
    3db2:	80 93 e2 00 	sts	0x00E2, r24
		
		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    3db6:	80 91 02 01 	lds	r24, 0x0102
    3dba:	88 23       	and	r24, r24
    3dbc:	11 f4       	brne	.+4      	; 0x3dc2 <__vector_11+0xb4>
    3dbe:	81 e0       	ldi	r24, 0x01	; 1
    3dc0:	01 c0       	rjmp	.+2      	; 0x3dc4 <__vector_11+0xb6>
    3dc2:	84 e0       	ldi	r24, 0x04	; 4
    3dc4:	80 93 0e 01 	sts	0x010E, r24
		EVENT_USB_Device_Connect();
    3dc8:	5c da       	rcall	.-2888   	; 0x3282 <EVENT_USB_Device_Connect>
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
		EVENT_USB_Device_WakeUp();		
		#endif
	}
   
	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    3dca:	80 91 e1 00 	lds	r24, 0x00E1
    3dce:	83 ff       	sbrs	r24, 3
    3dd0:	28 c0       	rjmp	.+80     	; 0x3e22 <__vector_11+0x114>
    3dd2:	80 91 e2 00 	lds	r24, 0x00E2
    3dd6:	83 ff       	sbrs	r24, 3
    3dd8:	24 c0       	rjmp	.+72     	; 0x3e22 <__vector_11+0x114>
	{
		USB_INT_Clear(USB_INT_EORSTI);
    3dda:	80 91 e1 00 	lds	r24, 0x00E1
    3dde:	87 7f       	andi	r24, 0xF7	; 247
    3de0:	80 93 e1 00 	sts	0x00E1, r24

		USB_DeviceState         = DEVICE_STATE_Default;
    3de4:	82 e0       	ldi	r24, 0x02	; 2
    3de6:	80 93 0e 01 	sts	0x010E, r24
		USB_ConfigurationNumber = 0;
    3dea:	10 92 02 01 	sts	0x0102, r1

		USB_INT_Clear(USB_INT_SUSPEND);
    3dee:	80 91 e1 00 	lds	r24, 0x00E1
    3df2:	8e 7f       	andi	r24, 0xFE	; 254
    3df4:	80 93 e1 00 	sts	0x00E1, r24
		USB_INT_Disable(USB_INT_SUSPEND);
    3df8:	80 91 e2 00 	lds	r24, 0x00E2
    3dfc:	8e 7f       	andi	r24, 0xFE	; 254
    3dfe:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUP);
    3e02:	80 91 e2 00 	lds	r24, 0x00E2
    3e06:	80 61       	ori	r24, 0x10	; 16
    3e08:	80 93 e2 00 	sts	0x00E2, r24

		Endpoint_ClearEndpoints();
    3e0c:	69 d9       	rcall	.-3374   	; 0x30e0 <Endpoint_ClearEndpoints>

		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
    3e0e:	80 91 00 01 	lds	r24, 0x0100
    3e12:	90 e0       	ldi	r25, 0x00	; 0
    3e14:	44 d9       	rcall	.-3448   	; 0x309e <Endpoint_BytesToEPSizeMaskDynamic>
    3e16:	48 2f       	mov	r20, r24
    3e18:	42 60       	ori	r20, 0x02	; 2
    3e1a:	80 e0       	ldi	r24, 0x00	; 0
    3e1c:	60 e0       	ldi	r22, 0x00	; 0
    3e1e:	4d d9       	rcall	.-3430   	; 0x30ba <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    3e20:	53 da       	rcall	.-2906   	; 0x32c8 <EVENT_USB_Device_Reset>
	}
	
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    3e22:	80 91 e1 00 	lds	r24, 0x00E1
    3e26:	82 ff       	sbrs	r24, 2
    3e28:	0a c0       	rjmp	.+20     	; 0x3e3e <__vector_11+0x130>
    3e2a:	80 91 e2 00 	lds	r24, 0x00E2
    3e2e:	82 ff       	sbrs	r24, 2
    3e30:	06 c0       	rjmp	.+12     	; 0x3e3e <__vector_11+0x130>
	{
		USB_INT_Clear(USB_INT_SOFI);
    3e32:	80 91 e1 00 	lds	r24, 0x00E1
    3e36:	8b 7f       	andi	r24, 0xFB	; 251
    3e38:	80 93 e1 00 	sts	0x00E1, r24
		
		EVENT_USB_Device_StartOfFrame();
    3e3c:	4c da       	rcall	.-2920   	; 0x32d6 <EVENT_USB_Device_StartOfFrame>
		EVENT_USB_UIDChange();

		USB_ResetInterface();
	}
	#endif
}
    3e3e:	ff 91       	pop	r31
    3e40:	ef 91       	pop	r30
    3e42:	bf 91       	pop	r27
    3e44:	af 91       	pop	r26
    3e46:	9f 91       	pop	r25
    3e48:	8f 91       	pop	r24
    3e4a:	7f 91       	pop	r23
    3e4c:	6f 91       	pop	r22
    3e4e:	5f 91       	pop	r21
    3e50:	4f 91       	pop	r20
    3e52:	3f 91       	pop	r19
    3e54:	2f 91       	pop	r18
    3e56:	0f 90       	pop	r0
    3e58:	0f be       	out	0x3f, r0	; 63
    3e5a:	0f 90       	pop	r0
    3e5c:	1f 90       	pop	r1
    3e5e:	18 95       	reti

00003e60 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState    LUFA_SHARED_DATA_SECTION;
#endif

void USB_USBTask(void)
{
    3e60:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    3e62:	80 91 0e 01 	lds	r24, 0x010E
    3e66:	88 23       	and	r24, r24
    3e68:	61 f0       	breq	.+24     	; 0x3e82 <USB_USBTask+0x22>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();
    3e6a:	10 91 e9 00 	lds	r17, 0x00E9
	
		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    3e6e:	10 92 e9 00 	sts	0x00E9, r1

		if (Endpoint_IsSETUPReceived())
    3e72:	80 91 e8 00 	lds	r24, 0x00E8
    3e76:	83 ff       	sbrs	r24, 3
    3e78:	01 c0       	rjmp	.+2      	; 0x3e7c <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
    3e7a:	b6 dd       	rcall	.-1172   	; 0x39e8 <USB_Device_ProcessControlRequest>
#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();
    3e7c:	17 70       	andi	r17, 0x07	; 7
		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
		  USB_Device_ProcessControlRequest();
		
		Endpoint_SelectEndpoint(PrevEndpoint);
    3e7e:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_DEVICE)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_HOST)
		  USB_HostTask();
	#endif
}
    3e82:	1f 91       	pop	r17
    3e84:	08 95       	ret

00003e86 <__bootbad_interrupt>:
    .global __bootbad_interrupt
    .func   __bootbad_interrupt
__bootbad_interrupt:
    .weak   __bootvector_default
    .set    __bootvector_default, __bootvectors
    XJMP    __bootvector_default
    3e86:	bc c8       	rjmp	.-3720   	; 0x3000 <__bootvectors>

00003e88 <DeviceDescriptorDFU>:
    3e88:	12 01 10 01 00 00 00 20 eb 03 fa 2f 00 00 00 01     ....... .../....
    3e98:	00 01                                               ..

00003e9a <ConfigurationDescriptorDFU>:
    3e9a:	09 02 1b 00 01 01 00 c0 32 09 04 00 00 00 fe 01     ........2.......
    3eaa:	02 00 09 21 03 00 00 00 0c 00 01                    ...!.......

00003eb5 <LanguageString>:
    3eb5:	04 03 09 04                                         ....

00003eb9 <ProductStringDFU>:
    3eb9:	26 03 41 00 56 00 52 00 20 00 44 00 46 00 55 00     &.A.V.R. .D.F.U.
    3ec9:	20 00 42 00 6f 00 6f 00 74 00 6c 00 6f 00 61 00      .B.o.o.t.l.o.a.
    3ed9:	64 00 65 00 72 00 00 00 00                          d.e.r....
