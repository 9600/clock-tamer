diff -upr LUFA/LUFA/Common/Common.h LUFA-mod/LUFA/Common/Common.h
--- LUFA/LUFA/Common/Common.h	2009-11-07 00:43:00.000000000 +0300
+++ LUFA-mod/LUFA/Common/Common.h	2009-12-09 15:26:55.000000000 +0300
@@ -61,6 +61,20 @@
 		#include "FunctionAttributes.h"
 		#include "BoardTypes.h"
 
+        //#define LUFA_DFU_DEVICE_SECTION __attribute__ ((section (".bootloader")))
+        #ifndef LUFA_DFU_DEVICE_SECTION
+            #define LUFA_DFU_DEVICE_SECTION
+        #else
+            #warning Using external section LUFA_DFU_DEVICE_SECTION
+        #endif
+
+        #ifndef LUFA_SHARED_DATA_SECTION
+            #define LUFA_SHARED_DATA_SECTION
+        #else
+            #warning Using external section LUFA_SHARED_DATA_SECTION
+        #endif
+        
+
 	/* Public Interface - May be used in end-application: */
 		/* Macros: */		
 			/** Macro for encasing other multi-statement macros. This should be used along with an opening brace
diff -upr LUFA/LUFA/Drivers/USB/HighLevel/Events.h LUFA-mod/LUFA/Drivers/USB/HighLevel/Events.h
--- LUFA/LUFA/Drivers/USB/HighLevel/Events.h	2009-11-16 16:45:00.000000000 +0300
+++ LUFA-mod/LUFA/Drivers/USB/HighLevel/Events.h	2009-12-02 15:40:35.000000000 +0300
@@ -282,7 +282,7 @@
 	#if !defined(__DOXYGEN__)
 		/* Function Prototypes: */
 			#if defined(INCLUDE_FROM_EVENTS_C)
-				void USB_Event_Stub(void) ATTR_CONST;
+				void USB_Event_Stub(void) ATTR_CONST LUFA_DFU_DEVICE_SECTION;
 					
 				#if defined(USB_CAN_BE_BOTH)
 					void EVENT_USB_InitFailure(const uint8_t ErrorCode) ATTR_WEAK ATTR_ALIAS(USB_Event_Stub);
diff -upr LUFA/LUFA/Drivers/USB/HighLevel/USBInterrupt.c LUFA-mod/LUFA/Drivers/USB/HighLevel/USBInterrupt.c
--- LUFA/LUFA/Drivers/USB/HighLevel/USBInterrupt.c	2009-08-17 23:38:00.000000000 +0400
+++ LUFA-mod/LUFA/Drivers/USB/HighLevel/USBInterrupt.c	2009-12-02 15:41:30.000000000 +0300
@@ -64,7 +64,7 @@ void USB_INT_ClearAllInterrupts(void)
 	#endif
 }
 
-ISR(USB_GEN_vect, ISR_BLOCK)
+LUFA_DFU_DEVICE_SECTION ISR(USB_GEN_vect, ISR_BLOCK)
 {
 	#if defined(USB_CAN_BE_DEVICE)
 	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
diff -upr LUFA/LUFA/Drivers/USB/HighLevel/USBInterrupt.h LUFA-mod/LUFA/Drivers/USB/HighLevel/USBInterrupt.h
--- LUFA/LUFA/Drivers/USB/HighLevel/USBInterrupt.h	2009-08-17 23:38:00.000000000 +0400
+++ LUFA-mod/LUFA/Drivers/USB/HighLevel/USBInterrupt.h	2009-12-02 15:41:16.000000000 +0300
@@ -75,8 +75,8 @@
 			#define USB_INT_RXSTPI                           UEIENX, (1 << RXSTPE) , UEINTX, (1 << RXSTPI)
 	
 		/* Function Prototypes: */
-			void USB_INT_ClearAllInterrupts(void);
-			void USB_INT_DisableAllInterrupts(void);
+			void USB_INT_ClearAllInterrupts(void) LUFA_DFU_DEVICE_SECTION;
+			void USB_INT_DisableAllInterrupts(void) LUFA_DFU_DEVICE_SECTION;
 	#endif
 	
 	/* Disable C linkage for C++ Compilers: */
diff -upr LUFA/LUFA/Drivers/USB/HighLevel/USBTask.c LUFA-mod/LUFA/Drivers/USB/HighLevel/USBTask.c
--- LUFA/LUFA/Drivers/USB/HighLevel/USBTask.c	2009-08-05 17:36:00.000000000 +0400
+++ LUFA-mod/LUFA/Drivers/USB/HighLevel/USBTask.c	2009-12-09 15:39:23.000000000 +0300
@@ -33,15 +33,15 @@
 #define  INCLUDE_FROM_USBTASK_C
 #include "USBTask.h"
 
-volatile bool        USB_IsInitialized;
-USB_Request_Header_t USB_ControlRequest;
+volatile bool        USB_IsInitialized  LUFA_SHARED_DATA_SECTION;
+USB_Request_Header_t USB_ControlRequest LUFA_SHARED_DATA_SECTION;
 
 #if defined(USB_CAN_BE_HOST) && !defined(HOST_STATE_AS_GPIOR)
 volatile uint8_t     USB_HostState;
 #endif
 
 #if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
-volatile uint8_t     USB_DeviceState;
+volatile uint8_t     USB_DeviceState    LUFA_SHARED_DATA_SECTION;
 #endif
 
 void USB_USBTask(void)
diff -upr LUFA/LUFA/Drivers/USB/HighLevel/USBTask.h LUFA-mod/LUFA/Drivers/USB/HighLevel/USBTask.h
--- LUFA/LUFA/Drivers/USB/HighLevel/USBTask.h	2009-11-16 16:45:00.000000000 +0300
+++ LUFA-mod/LUFA/Drivers/USB/HighLevel/USBTask.h	2009-12-02 15:42:29.000000000 +0300
@@ -159,7 +159,7 @@
 			 *
 			 *  \ingroup Group_USBManagement
 			 */
-			void USB_USBTask(void);
+			void USB_USBTask(void) LUFA_DFU_DEVICE_SECTION;
 
 	/* Private Interface - For use in library only: */
 	#if !defined(__DOXYGEN__)
@@ -170,7 +170,7 @@
 				#endif
 				
 				#if defined(USB_CAN_BE_DEVICE)
-					static void USB_DeviceTask(void);
+					static void USB_DeviceTask(void) LUFA_DFU_DEVICE_SECTION;
 				#endif
 			#endif
 			
diff -upr LUFA/LUFA/Drivers/USB/LowLevel/DevChapter9.c LUFA-mod/LUFA/Drivers/USB/LowLevel/DevChapter9.c
--- LUFA/LUFA/Drivers/USB/LowLevel/DevChapter9.c	2009-11-11 20:09:00.000000000 +0300
+++ LUFA-mod/LUFA/Drivers/USB/LowLevel/DevChapter9.c	2009-12-09 15:40:28.000000000 +0300
@@ -35,9 +35,9 @@
 #define  INCLUDE_FROM_DEVCHAPTER9_C
 #include "DevChapter9.h"
 
-uint8_t USB_ConfigurationNumber;
-bool    USB_RemoteWakeupEnabled;
-bool    USB_CurrentlySelfPowered;
+uint8_t USB_ConfigurationNumber   LUFA_SHARED_DATA_SECTION;
+bool    USB_RemoteWakeupEnabled   LUFA_SHARED_DATA_SECTION;
+bool    USB_CurrentlySelfPowered  LUFA_SHARED_DATA_SECTION;
 
 void USB_Device_ProcessControlRequest(void)
 {
diff -upr LUFA/LUFA/Drivers/USB/LowLevel/DevChapter9.h LUFA-mod/LUFA/Drivers/USB/LowLevel/DevChapter9.h
--- LUFA/LUFA/Drivers/USB/LowLevel/DevChapter9.h	2009-08-05 17:36:00.000000000 +0400
+++ LUFA-mod/LUFA/Drivers/USB/LowLevel/DevChapter9.h	2009-12-02 15:36:40.000000000 +0300
@@ -113,15 +113,15 @@
 		#endif
 	
 		/* Function Prototypes: */
-			void USB_Device_ProcessControlRequest(void);
+			void USB_Device_ProcessControlRequest(void) LUFA_DFU_DEVICE_SECTION;
 			
 			#if defined(INCLUDE_FROM_DEVCHAPTER9_C)
-				static void USB_Device_SetAddress(void);
-				static void USB_Device_SetConfiguration(void);
-				static void USB_Device_GetConfiguration(void);
-				static void USB_Device_GetDescriptor(void);
-				static void USB_Device_GetStatus(void);
-				static void USB_Device_ClearSetFeature(void);
+				static void USB_Device_SetAddress(void) LUFA_DFU_DEVICE_SECTION;
+				static void USB_Device_SetConfiguration(void) LUFA_DFU_DEVICE_SECTION;
+				static void USB_Device_GetConfiguration(void) LUFA_DFU_DEVICE_SECTION;
+				static void USB_Device_GetDescriptor(void) LUFA_DFU_DEVICE_SECTION;
+				static void USB_Device_GetStatus(void) LUFA_DFU_DEVICE_SECTION;
+				static void USB_Device_ClearSetFeature(void) LUFA_DFU_DEVICE_SECTION;
 				
 				#if !defined(NO_INTERNAL_SERIAL) && (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
 					static char USB_Device_NibbleToASCII(uint8_t Nibble) ATTR_ALWAYS_INLINE;
diff -upr LUFA/LUFA/Drivers/USB/LowLevel/Endpoint.c LUFA-mod/LUFA/Drivers/USB/LowLevel/Endpoint.c
--- LUFA/LUFA/Drivers/USB/LowLevel/Endpoint.c	2009-11-10 22:24:00.000000000 +0300
+++ LUFA-mod/LUFA/Drivers/USB/LowLevel/Endpoint.c	2009-12-12 01:43:56.000000000 +0300
@@ -35,8 +35,9 @@
 #define  INCLUDE_FROM_ENDPOINT_C
 #include "Endpoint.h"
 
+#if !defined(LUFA_NODFU_ENDPOINT_CODE)
 #if !defined(FIXED_CONTROL_ENDPOINT_SIZE)
-uint8_t USB_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
+uint8_t USB_ControlEndpointSize LUFA_SHARED_DATA_SECTION = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
 #endif
 
 uint8_t Endpoint_BytesToEPSizeMaskDynamic(const uint16_t Size)
@@ -94,6 +95,7 @@ void Endpoint_ClearStatusStage(void)
 		Endpoint_ClearIN();
 	}
 }
+#endif
 
 #if !defined(CONTROL_ONLY_DEVICE)
 uint8_t Endpoint_WaitUntilReady(void)
diff -upr LUFA/LUFA/Drivers/USB/LowLevel/Endpoint.h LUFA-mod/LUFA/Drivers/USB/LowLevel/Endpoint.h
--- LUFA/LUFA/Drivers/USB/LowLevel/Endpoint.h	2009-11-10 22:24:00.000000000 +0300
+++ LUFA-mod/LUFA/Drivers/USB/LowLevel/Endpoint.h	2009-12-09 01:14:14.000000000 +0300
@@ -750,7 +750,7 @@
 			 *  with respect to the data direction. This is a convenience function which can be used to
 			 *  simplify user control request handling.
 			 */
-			void Endpoint_ClearStatusStage(void);
+			void Endpoint_ClearStatusStage(void) LUFA_DFU_DEVICE_SECTION;
 
 			/** Reads and discards the given number of bytes from the endpoint from the given buffer,
 			 *  discarding fully read packets from the host as needed. The last packet is not automatically
@@ -1002,7 +1002,7 @@
 			 *
 			 *  \return A value from the \ref Endpoint_ControlStream_RW_ErrorCodes_t enum.
 			 */
-			uint8_t Endpoint_Write_Control_PStream_LE(const void* Buffer, uint16_t Length) ATTR_NON_NULL_PTR_ARG(1);
+			uint8_t Endpoint_Write_Control_PStream_LE(const void* Buffer, uint16_t Length) ATTR_NON_NULL_PTR_ARG(1) LUFA_DFU_DEVICE_SECTION;
 
 			/** Writes the given number of bytes to the CONTROL type endpoint from the given buffer in big endian,
 			 *  sending full packets to the host as needed. The host OUT acknowledgement is not automatically cleared
@@ -1187,9 +1187,9 @@
 			                                                 Endpoint_BytesToEPSizeMaskDynamic(Size))))
 													
 		/* Function Prototypes: */
-			void    Endpoint_ClearEndpoints(void);
-			uint8_t Endpoint_BytesToEPSizeMaskDynamic(const uint16_t Size);
-			bool    Endpoint_ConfigureEndpoint_Prv(const uint8_t Number, const uint8_t UECFG0XData, const uint8_t UECFG1XData);
+			void    Endpoint_ClearEndpoints(void) LUFA_DFU_DEVICE_SECTION;
+			uint8_t Endpoint_BytesToEPSizeMaskDynamic(const uint16_t Size) LUFA_DFU_DEVICE_SECTION;
+			bool    Endpoint_ConfigureEndpoint_Prv(const uint8_t Number, const uint8_t UECFG0XData, const uint8_t UECFG1XData) LUFA_DFU_DEVICE_SECTION;
 			
 		/* Inline Functions: */
 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
diff -upr LUFA/LUFA/Drivers/USB/LowLevel/LowLevel.h LUFA-mod/LUFA/Drivers/USB/LowLevel/LowLevel.h
--- LUFA/LUFA/Drivers/USB/LowLevel/LowLevel.h	2009-11-16 00:09:00.000000000 +0300
+++ LUFA-mod/LUFA/Drivers/USB/LowLevel/LowLevel.h	2009-12-02 15:37:07.000000000 +0300
@@ -268,18 +268,18 @@
 			               #if !defined(USE_STATIC_OPTIONS) || defined(__DOXYGEN__)
 			               const uint8_t Options
 			               #endif
-			               );
+			               ) LUFA_DFU_DEVICE_SECTION;
 			
 			/** Shuts down the USB interface. This turns off the USB interface after deallocating all USB FIFO
 			 *  memory, endpoints and pipes. When turned off, no USB functionality can be used until the interface
 			 *  is restarted with the \ref USB_Init() function.
 			 */
-			void USB_ShutDown(void);
+			void USB_ShutDown(void) LUFA_DFU_DEVICE_SECTION;
 
 			/** Resets the interface, when already initialized. This will re-enumerate the device if already connected
 			 *  to a host, or re-enumerate an already attached device when in host mode.
 			 */
-			void USB_ResetInterface(void);
+			void USB_ResetInterface(void) LUFA_DFU_DEVICE_SECTION;
 
 		/* Enums: */
 			/** Enum for error codes relating to the powering on of the USB interface. These error codes are
diff -upr LUFA/LUFA/Drivers/USB/LowLevel/Pipe.h LUFA-mod/LUFA/Drivers/USB/LowLevel/Pipe.h
--- LUFA/LUFA/Drivers/USB/LowLevel/Pipe.h	2009-11-10 00:15:00.000000000 +0300
+++ LUFA-mod/LUFA/Drivers/USB/LowLevel/Pipe.h	2009-12-02 15:24:37.000000000 +0300
@@ -791,7 +791,7 @@
 			 *  \return Boolean true if the configuration is successful, false otherwise
 			 */
 			bool Pipe_ConfigurePipe(const uint8_t  Number, const uint8_t Type, const uint8_t Token, const uint8_t EndpointNumber,
-			                        const uint16_t Size, const uint8_t Banks);
+			                        const uint16_t Size, const uint8_t Banks) LUFA_DEVICE_SECTION;
 
 			/** Spin-loops until the currently selected non-control pipe is ready for the next packed of data to be read 
 			 *  or written to it, aborting in the case of an error condition (such as a timeout or device disconnect).
@@ -800,7 +800,7 @@
 			 *
 			 *  \return A value from the Pipe_WaitUntilReady_ErrorCodes_t enum.
 			 */
-			uint8_t Pipe_WaitUntilReady(void);
+			uint8_t Pipe_WaitUntilReady(void) LUFA_DEVICE_SECTION;
 			
 			/** Determines if a pipe has been bound to the given device endpoint address. If a pipe which is bound to the given
 			 *  endpoint is found, it is automatically selected.
@@ -809,7 +809,7 @@
 			 *
 			 *  \return Boolean true if a pipe bound to the given endpoint address is found, false otherwise
 			 */
-			bool Pipe_IsEndpointBound(const uint8_t EndpointAddress);
+			bool Pipe_IsEndpointBound(const uint8_t EndpointAddress) LUFA_DEVICE_SECTION;
 		
 			/** Reads and discards the given number of bytes from the pipe, discarding fully read packets from the host
 			 *  as needed. The last packet is not automatically discarded once the remaining bytes has been read; the
@@ -831,7 +831,7 @@
 			 *
 			 *  \return A value from the \ref Pipe_Stream_RW_ErrorCodes_t enum.
 			 */
-			uint8_t Pipe_Discard_Stream(uint16_t Length __CALLBACK_PARAM);
+			uint8_t Pipe_Discard_Stream(uint16_t Length __CALLBACK_PARAM) LUFA_DEVICE_SECTION;
 
 			/** Writes the given number of bytes to the pipe from the given buffer in little endian,
 			 *  sending full packets to the device as needed. The last packet filled is not automatically sent;
@@ -854,7 +854,7 @@
 			 *
 			 *  \return A value from the \ref Pipe_Stream_RW_ErrorCodes_t enum.
 			 */
-			uint8_t Pipe_Write_Stream_LE(const void* Buffer, uint16_t Length __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);				
+			uint8_t Pipe_Write_Stream_LE(const void* Buffer, uint16_t Length __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1) LUFA_DEVICE_SECTION;				
 
 			/** EEPROM buffer source version of \ref Pipe_Write_Stream_LE().
 			 *
@@ -866,7 +866,7 @@
 			 *
 			 *  \return A value from the \ref Pipe_Stream_RW_ErrorCodes_t enum.
 			 */
-			uint8_t Pipe_Write_EStream_LE(const void* Buffer, uint16_t Length __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
+			uint8_t Pipe_Write_EStream_LE(const void* Buffer, uint16_t Length __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1) LUFA_DEVICE_SECTION;
 			
 			/** FLASH buffer source version of \ref Pipe_Write_Stream_LE().
 			 *
@@ -880,7 +880,7 @@
 			 *
 			 *  \return A value from the \ref Pipe_Stream_RW_ErrorCodes_t enum.
 			 */
-			uint8_t Pipe_Write_PStream_LE(const void* Buffer, uint16_t Length __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
+			uint8_t Pipe_Write_PStream_LE(const void* Buffer, uint16_t Length __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1) LUFA_DEVICE_SECTION;
 						
 			/** Writes the given number of bytes to the pipe from the given buffer in big endian,
 			 *  sending full packets to the device as needed. The last packet filled is not automatically sent;
@@ -903,7 +903,7 @@
 			 *
 			 *  \return A value from the \ref Pipe_Stream_RW_ErrorCodes_t enum.
 			 */
-			uint8_t Pipe_Write_Stream_BE(const void* Buffer, uint16_t Length __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
+			uint8_t Pipe_Write_Stream_BE(const void* Buffer, uint16_t Length __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1) LUFA_DEVICE_SECTION;
 
 			/** EEPROM buffer source version of \ref Pipe_Write_Stream_BE().
 			 *
@@ -915,7 +915,7 @@
 			 *
 			 *  \return A value from the \ref Pipe_Stream_RW_ErrorCodes_t enum.
 			 */
-			uint8_t Pipe_Write_EStream_BE(const void* Buffer, uint16_t Length __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
+			uint8_t Pipe_Write_EStream_BE(const void* Buffer, uint16_t Length __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1) LUFA_DEVICE_SECTION;
 			
 			/** FLASH buffer source version of \ref Pipe_Write_Stream_BE().
 			 *
@@ -929,7 +929,7 @@
 			 *
 			 *  \return A value from the \ref Pipe_Stream_RW_ErrorCodes_t enum.
 			 */
-			uint8_t Pipe_Write_PStream_BE(const void* Buffer, uint16_t Length __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
+			uint8_t Pipe_Write_PStream_BE(const void* Buffer, uint16_t Length __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1) LUFA_DEVICE_SECTION;
 
 			/** Reads the given number of bytes from the pipe into the given buffer in little endian,
 			 *  sending full packets to the device as needed. The last packet filled is not automatically sent;
@@ -952,7 +952,7 @@
 			 *
 			 *  \return A value from the \ref Pipe_Stream_RW_ErrorCodes_t enum.
 			 */
-			uint8_t Pipe_Read_Stream_LE(void* Buffer, uint16_t Length __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
+			uint8_t Pipe_Read_Stream_LE(void* Buffer, uint16_t Length __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1) LUFA_DEVICE_SECTION;
 
 			/** EEPROM buffer source version of \ref Pipe_Read_Stream_LE().
 			 *
@@ -964,7 +964,7 @@
 			 *
 			 *  \return A value from the \ref Pipe_Stream_RW_ErrorCodes_t enum.
 			 */
-			uint8_t Pipe_Read_EStream_LE(void* Buffer, uint16_t Length __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
+			uint8_t Pipe_Read_EStream_LE(void* Buffer, uint16_t Length __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1) LUFA_DEVICE_SECTION;
 
 			/** Reads the given number of bytes from the pipe into the given buffer in big endian,
 			 *  sending full packets to the device as needed. The last packet filled is not automatically sent;
@@ -987,7 +987,7 @@
 			 *
 			 *  \return A value from the \ref Pipe_Stream_RW_ErrorCodes_t enum.
 			 */
-			uint8_t Pipe_Read_Stream_BE(void* Buffer, uint16_t Length __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
+			uint8_t Pipe_Read_Stream_BE(void* Buffer, uint16_t Length __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1) LUFA_DEVICE_SECTION;
 			
 			/** EEPROM buffer source version of \ref Pipe_Read_Stream_BE().
 			 *
@@ -999,7 +999,7 @@
 			 *
 			 *  \return A value from the \ref Pipe_Stream_RW_ErrorCodes_t enum.
 			 */
-			uint8_t Pipe_Read_EStream_BE(void* Buffer, uint16_t Length __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
+			uint8_t Pipe_Read_EStream_BE(void* Buffer, uint16_t Length __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1) LUFA_DEVICE_SECTION;
 
 	/* Private Interface - For use in library only: */
 	#if !defined(__DOXYGEN__)
@@ -1014,7 +1014,7 @@
 			#define Pipe_DeallocateMemory()        MACROS{ UPCFG1X &= ~(1 << ALLOC); }MACROE
 
 		/* Function Prototypes: */
-			void Pipe_ClearPipes(void);
+			void Pipe_ClearPipes(void) LUFA_DEVICE_SECTION;
 
 		/* Inline Functions: */
 			static inline uint8_t Pipe_BytesToEPSizeMask(uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
