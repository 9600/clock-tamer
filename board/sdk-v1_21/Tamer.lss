
Tamer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00001e96  00001f6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e96  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bootloader   00000ef8  00003000  00003000  00001f9a  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000a0  00800130  00001ec6  00001f9a  2**0
                  ALLOC
  4 .bootdata     00000019  0080010f  00003ef8  00002e92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .eeprom       000001b9  00810000  00810000  00002eab  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .stab         000012a8  00000000  00000000  00003064  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .stabstr      000001ee  00000000  00000000  0000430c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000530  00000000  00000000  000044fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000010a4  00000000  00000000  00004a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00005bb3  00000000  00000000  00005ace  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000192a  00000000  00000000  0000b681  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000047f4  00000000  00000000  0000cfab  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000860  00000000  00000000  000117a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002356  00000000  00000000  00012000  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00003532  00000000  00000000  00014356  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000508  00000000  00000000  00017888  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   MW_PORT &=  ~(1 << MW_CLK);
}


void MicrowireWriteByteF(uint8_t data)
{
       0:	0b c1       	rjmp	.+534    	; 0x218 <__ctors_end>
	                         NO_STREAM_CALLBACK);
	Endpoint_ClearIN();
}

void CDC_Device_CreateStream(USB_ClassInfo_CDC_Device_t* CDCInterfaceInfo, FILE* Stream)
{
       2:	00 00       	nop
uint8_t Endpoint_Discard_Stream(uint16_t Length
#if !defined(NO_STREAM_CALLBACKS)
                                , StreamCallbackPtr_t Callback
#endif
								)
{
       4:	27 c1       	rjmp	.+590    	; 0x254 <__bad_interrupt>
       6:	00 00       	nop
       8:	25 c1       	rjmp	.+586    	; 0x254 <__bad_interrupt>
       a:	00 00       	nop
       c:	23 c1       	rjmp	.+582    	; 0x254 <__bad_interrupt>
       e:	00 00       	nop
      10:	21 c1       	rjmp	.+578    	; 0x254 <__bad_interrupt>
      12:	00 00       	nop
      14:	1f c1       	rjmp	.+574    	; 0x254 <__bad_interrupt>
      16:	00 00       	nop
      18:	1d c1       	rjmp	.+570    	; 0x254 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1b c1       	rjmp	.+566    	; 0x254 <__bad_interrupt>
      1e:	00 00       	nop
      20:	19 c1       	rjmp	.+562    	; 0x254 <__bad_interrupt>
      22:	00 00       	nop
      24:	17 c1       	rjmp	.+558    	; 0x254 <__bad_interrupt>
      26:	00 00       	nop
      28:	15 c1       	rjmp	.+554    	; 0x254 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 92 1e 	jmp	0x3d24	; 0x3d24 <__vector_11>
      30:	11 c1       	rjmp	.+546    	; 0x254 <__bad_interrupt>
      32:	00 00       	nop
      34:	0f c1       	rjmp	.+542    	; 0x254 <__bad_interrupt>
      36:	00 00       	nop
      38:	1d c2       	rjmp	.+1082   	; 0x474 <__vector_14>
      3a:	00 00       	nop
      3c:	0b c1       	rjmp	.+534    	; 0x254 <__bad_interrupt>
      3e:	00 00       	nop
      40:	09 c1       	rjmp	.+530    	; 0x254 <__bad_interrupt>
      42:	00 00       	nop
      44:	07 c1       	rjmp	.+526    	; 0x254 <__bad_interrupt>
      46:	00 00       	nop
      48:	26 c3       	rjmp	.+1612   	; 0x696 <__vector_18>
      4a:	00 00       	nop
      4c:	03 c1       	rjmp	.+518    	; 0x254 <__bad_interrupt>
      4e:	00 00       	nop
      50:	01 c1       	rjmp	.+514    	; 0x254 <__bad_interrupt>
      52:	00 00       	nop
      54:	ff c0       	rjmp	.+510    	; 0x254 <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 58 0a 	jmp	0x14b0	; 0x14b0 <__vector_22>
      5c:	fb c0       	rjmp	.+502    	; 0x254 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f9 c0       	rjmp	.+498    	; 0x254 <__bad_interrupt>
      62:	00 00       	nop
      64:	f7 c0       	rjmp	.+494    	; 0x254 <__bad_interrupt>
      66:	00 00       	nop
      68:	f5 c0       	rjmp	.+490    	; 0x254 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f3 c0       	rjmp	.+486    	; 0x254 <__bad_interrupt>
      6e:	00 00       	nop
      70:	f1 c0       	rjmp	.+482    	; 0x254 <__bad_interrupt>
      72:	00 00       	nop
      74:	ef c0       	rjmp	.+478    	; 0x254 <__bad_interrupt>
      76:	00 00       	nop
      78:	ed c0       	rjmp	.+474    	; 0x254 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	eb c0       	rjmp	.+470    	; 0x254 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e9 c0       	rjmp	.+466    	; 0x254 <__bad_interrupt>
      82:	00 00       	nop
      84:	e7 c0       	rjmp	.+462    	; 0x254 <__bad_interrupt>
      86:	00 00       	nop
      88:	e5 c0       	rjmp	.+458    	; 0x254 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e3 c0       	rjmp	.+454    	; 0x254 <__bad_interrupt>
      8e:	00 00       	nop
      90:	e1 c0       	rjmp	.+450    	; 0x254 <__bad_interrupt>
      92:	00 00       	nop
      94:	df c0       	rjmp	.+446    	; 0x254 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__bootstraps_end>:
      98:	d9 c0       	rjmp	.+434    	; 0x24c <__bootstraps_none>
      9a:	00 00       	nop

0000009c <__bootstraps_vec10>:
      9c:	d7 c0       	rjmp	.+430    	; 0x24c <__bootstraps_none>
      9e:	00 00       	nop

000000a0 <__bootstraps_vec9>:
      a0:	d5 c0       	rjmp	.+426    	; 0x24c <__bootstraps_none>
      a2:	00 00       	nop

000000a4 <__bootstraps_vec8>:
      a4:	d3 c0       	rjmp	.+422    	; 0x24c <__bootstraps_none>
      a6:	00 00       	nop

000000a8 <__bootstraps_vec7>:
      a8:	d1 c0       	rjmp	.+418    	; 0x24c <__bootstraps_none>
      aa:	00 00       	nop

000000ac <__bootstraps_vec6>:
      ac:	cf c0       	rjmp	.+414    	; 0x24c <__bootstraps_none>
      ae:	00 00       	nop

000000b0 <__bootstraps_vec5>:
      b0:	e1 c0       	rjmp	.+450    	; 0x274 <__bootstrap5>
      b2:	00 00       	nop

000000b4 <__bootstraps_vec4>:
      b4:	f4 c0       	rjmp	.+488    	; 0x29e <__bootstrap4>
      b6:	00 00       	nop

000000b8 <__bootstraps_vec3>:
      b8:	d5 c0       	rjmp	.+426    	; 0x264 <__bootstrap3>
      ba:	00 00       	nop

000000bc <__bootstraps_vec2>:
      bc:	ce c0       	rjmp	.+412    	; 0x25a <__bootstrap2>
      be:	00 00       	nop

000000c0 <__bootstraps_vec1>:
      c0:	d6 c0       	rjmp	.+428    	; 0x26e <__bootstrap1>
      c2:	00 00       	nop

000000c4 <__bootstraps_start>:
      c4:	c8 c0       	rjmp	.+400    	; 0x256 <__bootstrap0>
      c6:	00 00       	nop

000000c8 <resSyntax>:
      c8:	53 59 4e 54 41 58 20 45 52 52 4f 52 00              SYNTAX ERROR.

000000d5 <resErr>:
      d5:	43 4d 44 20 45 52 52 4f 52 00                       CMD ERROR.

000000df <newLine>:
      df:	0d 0a 00                                            ...

000000e2 <resOk>:
      e2:	4f 4b 00                                            OK.

000000e5 <resVersion>:
      e5:	43 6c 6f 63 6b 54 61 6d 65 72 20 53 57 3d 31 2e     ClockTamer SW=1.
      f5:	32 31 20 41 50 49 3d 31 00                          21 API=1.

000000fe <resBadRange>:
      fe:	42 61 64 20 74 75 6e 69 6e 67 20 72 61 6e 67 65     Bad tuning range
     10e:	00                                                  .

0000010f <pCmd>:
     10f:	52 45 47 50 49 4e 53 45 54 53 41 56 44 45 46 49     REGPINSETSAVDEFI
     11f:	4e 46 56 45 52 48 57 49 52 53 54 4c 44 45 53 54     NFVERHWIRSTLDEST
     12f:	45 00                                               E.

00000131 <pTrg>:
     131:	4c 4d 4b 4c 4d 58 44 41 43 4c 45 44 56 43 4f 47     LMKLMXDACLEDVCOG
     141:	50 53 49 4f 53 00                                   PSIOS.

00000147 <pDet>:
     147:	45 4e 42 47 4f 45 53 59 4e 4f 53 43 4f 55 54 50     ENBGOESYNOSCOUTP
     157:	52 54 4d 49 4e 4d 41 58 4b 42 54 44 49 56 41 55     RTMINMAXKBTDIVAU
     167:	54 44 31 32 52 30 30 52 30 31 52 30 32 52 30 33     TD12R00R01R02R03
     177:	00                                                  .

00000178 <DeviceDescriptor>:
     178:	12 01 10 01 02 00 00 08 eb 03 4b 20 00 00 01 02     ..........K ....
     188:	00 01                                               ..

0000018a <ConfigurationDescriptor>:
     18a:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     19a:	01 00 05 24 00 01 10 05 24 01 03 01 04 24 02 06     ...$....$....$..
     1aa:	05 24 06 00 01 07 05 82 03 08 00 ff 09 04 01 00     .$..............
     1ba:	02 0a 00 00 00 07 05 04 02 20 00 00 07 05 83 02     ......... ......
     1ca:	20 00 00                                             ..

000001cd <ManufacturerString>:
     1cd:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     1dd:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000001e7 <ProductString>:
     1e7:	30 03 4c 00 55 00 46 00 41 00 20 00 55 00 53 00     0.L.U.F.A. .U.S.
     1f7:	42 00 2d 00 52 00 53 00 32 00 33 00 32 00 20 00     B.-.R.S.2.3.2. .
     207:	41 00 64 00 61 00 70 00 74 00 65 00 72 00 00 00     A.d.a.p.t.e.r...
     217:	00                                                  .

00000218 <__ctors_end>:
     218:	11 24       	eor	r1, r1
     21a:	1f be       	out	0x3f, r1	; 63
     21c:	cf ef       	ldi	r28, 0xFF	; 255
     21e:	d4 e0       	ldi	r29, 0x04	; 4
     220:	de bf       	out	0x3e, r29	; 62
     222:	cd bf       	out	0x3d, r28	; 61

00000224 <__do_copy_data>:
     224:	11 e0       	ldi	r17, 0x01	; 1
     226:	a0 e0       	ldi	r26, 0x00	; 0
     228:	b1 e0       	ldi	r27, 0x01	; 1
     22a:	e6 e9       	ldi	r30, 0x96	; 150
     22c:	fe e1       	ldi	r31, 0x1E	; 30
     22e:	02 c0       	rjmp	.+4      	; 0x234 <.do_copy_data_start>

00000230 <.do_copy_data_loop>:
     230:	05 90       	lpm	r0, Z+
     232:	0d 92       	st	X+, r0

00000234 <.do_copy_data_start>:
     234:	a0 33       	cpi	r26, 0x30	; 48
     236:	b1 07       	cpc	r27, r17
     238:	d9 f7       	brne	.-10     	; 0x230 <.do_copy_data_loop>

0000023a <__do_clear_bss>:
     23a:	11 e0       	ldi	r17, 0x01	; 1
     23c:	a0 e3       	ldi	r26, 0x30	; 48
     23e:	b1 e0       	ldi	r27, 0x01	; 1
     240:	01 c0       	rjmp	.+2      	; 0x244 <.do_clear_bss_start>

00000242 <.do_clear_bss_loop>:
     242:	1d 92       	st	X+, r1

00000244 <.do_clear_bss_start>:
     244:	a0 3d       	cpi	r26, 0xD0	; 208
     246:	b1 07       	cpc	r27, r17
     248:	e1 f7       	brne	.-8      	; 0x242 <.do_clear_bss_loop>
     24a:	01 c0       	rjmp	.+2      	; 0x24e <__bootstraps_none+0x2>

0000024c <__bootstraps_none>:
     24c:	08 95       	ret
     24e:	4a d0       	rcall	.+148    	; 0x2e4 <main>
     250:	0c 94 49 0f 	jmp	0x1e92	; 0x1e92 <_exit>

00000254 <__bad_interrupt>:
     254:	d5 ce       	rjmp	.-598    	; 0x0 <__vectors>

00000256 <__bootstrap0>:
#endif

}


DEFINE_USERTRAP()
     256:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000025a <__bootstrap2>:
void EVENT_USB_Device_Connect(void)
#else
TRAP(TR_USB_DEVICE_CONNECT)
#endif
{
    LedSet();
     25a:	2d 9a       	sbi	0x05, 5	; 5
	SPCR &=~(1<<SPE);
     25c:	8c b5       	in	r24, 0x2c	; 44
     25e:	8f 7b       	andi	r24, 0xBF	; 191
     260:	8c bd       	out	0x2c, r24	; 44
}
     262:	08 95       	ret

00000264 <__bootstrap3>:
void EVENT_USB_Device_Disconnect(void)
#else
TRAP(TR_USB_DEVICE_DISCONNECT)
#endif
{
    LedClear();
     264:	2d 98       	cbi	0x05, 5	; 5
	SPCR |= (1<<SPE);
     266:	8c b5       	in	r24, 0x2c	; 44
     268:	80 64       	ori	r24, 0x40	; 64
     26a:	8c bd       	out	0x2c, r24	; 44
}
     26c:	08 95       	ret

0000026e <__bootstrap1>:

uint16_t TRAP_NAME(TR_USB_GETDESCRIPTOR) (const uint16_t wValue, const uint8_t wIndex, void** const DescriptorAddress);

uint16_t TRAP_NAME(TR_USB_GETDESCRIPTOR) (const uint16_t wValue, const uint8_t wIndex, void** const DescriptorAddress)
{
    CALLBACK_NONDFU_USB_GetDescriptor(wValue, wIndex, DescriptorAddress);
     26e:	0c 94 a3 0b 	jmp	0x1746	; 0x1746 <CALLBACK_NONDFU_USB_GetDescriptor>
}
     272:	08 95       	ret

00000274 <__bootstrap5>:
void EVENT_USB_Device_ConfigurationChanged(void)
#else
TRAP(TR_USB_DEVICE_CONFIGURATIONCHANGED)
#endif
{
    if (!(CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface)))
     274:	8f e0       	ldi	r24, 0x0F	; 15
     276:	91 e0       	ldi	r25, 0x01	; 1
     278:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <CDC_Device_ConfigureEndpoints>
     27c:	88 23       	and	r24, r24
     27e:	11 f4       	brne	.+4      	; 0x284 <__bootstrap5+0x10>
        LedClear();
     280:	2d 98       	cbi	0x05, 5	; 5
     282:	08 95       	ret
	else
		VirtualSerial_CDC_Interface.State.LineEncoding.BaudRateBPS = 9600;
     284:	80 e8       	ldi	r24, 0x80	; 128
     286:	95 e2       	ldi	r25, 0x25	; 37
     288:	a0 e0       	ldi	r26, 0x00	; 0
     28a:	b0 e0       	ldi	r27, 0x00	; 0
     28c:	80 93 1e 01 	sts	0x011E, r24
     290:	90 93 1f 01 	sts	0x011F, r25
     294:	a0 93 20 01 	sts	0x0120, r26
     298:	b0 93 21 01 	sts	0x0121, r27
     29c:	08 95       	ret

0000029e <__bootstrap4>:
void EVENT_USB_Device_UnhandledControlRequest(void)
#else
TRAP(TR_USB_DEVICE_UNHANDLEDCONTROLREQUEST)
#endif
{
    CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     29e:	8f e0       	ldi	r24, 0x0F	; 15
     2a0:	91 e0       	ldi	r25, 0x01	; 1
     2a2:	0c 94 6f 0d 	jmp	0x1ade	; 0x1ade <CDC_Device_ProcessControlRequest>

000002a6 <SetupHardware>:



/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
     2a6:	1f 93       	push	r17
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     2a8:	84 b7       	in	r24, 0x34	; 52
     2aa:	87 7f       	andi	r24, 0xF7	; 247
     2ac:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     2ae:	88 e1       	ldi	r24, 0x18	; 24
     2b0:	0f b6       	in	r0, 0x3f	; 63
     2b2:	f8 94       	cli
     2b4:	80 93 60 00 	sts	0x0060, r24
     2b8:	10 92 60 00 	sts	0x0060, r1
     2bc:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	80 e8       	ldi	r24, 0x80	; 128
     2c2:	0f b6       	in	r0, 0x3f	; 63
     2c4:	f8 94       	cli
     2c6:	80 93 61 00 	sts	0x0061, r24
     2ca:	90 93 61 00 	sts	0x0061, r25
     2ce:	0f be       	out	0x3f, r0	; 63

	/* Hardware Initialization */
//	Serial_Init(38400, false);

#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE))
    USB_ControlEndpointSize = CDC_CONTROL_ENDPOINT_SIZE;
     2d0:	18 e0       	ldi	r17, 0x08	; 8
     2d2:	10 93 00 01 	sts	0x0100, r17
#endif

    USB_Init();
     2d6:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <USB_Init>

#ifdef SPI_ENABLED
	//Enable MISO
	DDRB = (1<<PB3);
     2da:	14 b9       	out	0x04, r17	; 4

	SPCR = (1<<SPIE) | (1<<SPE) | (1<<CPOL);
     2dc:	88 ec       	ldi	r24, 0xC8	; 200
     2de:	8c bd       	out	0x2c, r24	; 44
	//SPDR = 0xff;
#endif

}
     2e0:	1f 91       	pop	r17
     2e2:	08 95       	ret

000002e4 <main>:
#if TAMER_VER >= 12
void SetOscillatorMode(uint8_t);
#endif

int main(void)
{
     2e4:	0f 93       	push	r16
     2e6:	1f 93       	push	r17
#if TAMER_VER >= 12
    SetOscillatorMode(0);
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	94 d2       	rcall	.+1320   	; 0x814 <SetOscillatorMode>
#endif

    INFOLED_DDR |=  (1 << INFOLED);
     2ec:	25 9a       	sbi	0x04, 5	; 4
    INFOLED_PORT |= (1 << INFOLED);
     2ee:	2d 9a       	sbi	0x05, 5	; 5

    SetupHardware();
     2f0:	da df       	rcall	.-76     	; 0x2a6 <SetupHardware>
    BoardInit();
     2f2:	7a d0       	rcall	.+244    	; 0x3e8 <BoardInit>

    AutoStartControl();
     2f4:	77 d6       	rcall	.+3310   	; 0xfe4 <AutoStartControl>

	Buffer_Initialize(&USBtoUSART_Buffer);
     2f6:	86 e6       	ldi	r24, 0x66	; 102
     2f8:	91 e0       	ldi	r25, 0x01	; 1
     2fa:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <Buffer_Initialize>
	Buffer_Initialize(&USARTtoUSB_Buffer);
     2fe:	81 e3       	ldi	r24, 0x31	; 49
     300:	91 e0       	ldi	r25, 0x01	; 1
     302:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <Buffer_Initialize>

    //CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);

	for (;;)
	{
		for (uint8_t DataBytesRem = CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface); DataBytesRem != 0; DataBytesRem--)
     306:	8f e0       	ldi	r24, 0x0F	; 15
     308:	91 e0       	ldi	r25, 0x01	; 1
     30a:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <CDC_Device_BytesReceived>
     30e:	08 2f       	mov	r16, r24
     310:	1c c0       	rjmp	.+56     	; 0x34a <main+0x66>
		{
			if (!(BUFF_STATICSIZE - USBtoUSART_Buffer.Elements))
     312:	80 91 9a 01 	lds	r24, 0x019A
     316:	80 33       	cpi	r24, 0x30	; 48
     318:	d1 f0       	breq	.+52     	; 0x34e <main+0x6a>
			  break;

            uint8_t byte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     31a:	8f e0       	ldi	r24, 0x0F	; 15
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	0e 94 82 0c 	call	0x1904	; 0x1904 <CDC_Device_ReceiveByte>
     322:	18 2f       	mov	r17, r24

            if ((byte != 0) && (byte != 0xff))
     324:	81 50       	subi	r24, 0x01	; 1
     326:	8e 3f       	cpi	r24, 0xFE	; 254
     328:	28 f4       	brcc	.+10     	; 0x334 <main+0x50>
                Buffer_StoreElement(&USBtoUSART_Buffer, byte);
     32a:	86 e6       	ldi	r24, 0x66	; 102
     32c:	91 e0       	ldi	r25, 0x01	; 1
     32e:	61 2f       	mov	r22, r17
     330:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <Buffer_StoreElement>


			// Uncomment this to enable echo on console
            // CDC_Device_SendByte(&VirtualSerial_CDC_Interface, byte);

            if (byte == '\n' || byte == '\r')
     334:	1a 30       	cpi	r17, 0x0A	; 10
     336:	11 f0       	breq	.+4      	; 0x33c <main+0x58>
     338:	1d 30       	cpi	r17, 0x0D	; 13
     33a:	31 f4       	brne	.+12     	; 0x348 <main+0x64>
            {
                commands++;
     33c:	80 91 30 01 	lds	r24, 0x0130
     340:	8f 5f       	subi	r24, 0xFF	; 255
     342:	80 93 30 01 	sts	0x0130, r24
     346:	03 c0       	rjmp	.+6      	; 0x34e <main+0x6a>

    //CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);

	for (;;)
	{
		for (uint8_t DataBytesRem = CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface); DataBytesRem != 0; DataBytesRem--)
     348:	01 50       	subi	r16, 0x01	; 1
     34a:	00 23       	and	r16, r16
     34c:	11 f7       	brne	.-60     	; 0x312 <main+0x2e>
                break;
            }
		}

        // Clean up buffer if it's full and there're no commands
        if ((commands == 0) && (!(BUFF_STATICSIZE - USBtoUSART_Buffer.Elements)))
     34e:	80 91 30 01 	lds	r24, 0x0130
     352:	88 23       	and	r24, r24
     354:	d9 f4       	brne	.+54     	; 0x38c <main+0xa8>
     356:	80 91 9a 01 	lds	r24, 0x019A
     35a:	80 33       	cpi	r24, 0x30	; 48
     35c:	b9 f4       	brne	.+46     	; 0x38c <main+0xa8>
              Buffer_GetElement(&USBtoUSART_Buffer);
     35e:	86 e6       	ldi	r24, 0x66	; 102
     360:	91 e0       	ldi	r25, 0x01	; 1
     362:	0e 94 24 0c 	call	0x1848	; 0x1848 <Buffer_GetElement>
     366:	12 c0       	rjmp	.+36     	; 0x38c <main+0xa8>
		

        for (;commands>0;commands--)
        {
            uint8_t res = ParseCommand();
     368:	0e 94 a6 0a 	call	0x154c	; 0x154c <ParseCommand>
            if (res)
     36c:	88 23       	and	r24, r24
     36e:	31 f0       	breq	.+12     	; 0x37c <main+0x98>
            {
                res = ProcessCommand();
     370:	55 d6       	rcall	.+3242   	; 0x101c <ProcessCommand>
				if (res == 0)
     372:	88 23       	and	r24, r24
     374:	31 f4       	brne	.+12     	; 0x382 <main+0x9e>
				{
					FillResultPM(resErr);
     376:	85 ed       	ldi	r24, 0xD5	; 213
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	02 c0       	rjmp	.+4      	; 0x380 <main+0x9c>
				}
            }
            else
            {
                FillResultPM(resSyntax);
     37c:	88 ec       	ldi	r24, 0xC8	; 200
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	02 d6       	rcall	.+3076   	; 0xf86 <FillResultPM>
        // Clean up buffer if it's full and there're no commands
        if ((commands == 0) && (!(BUFF_STATICSIZE - USBtoUSART_Buffer.Elements)))
              Buffer_GetElement(&USBtoUSART_Buffer);
		

        for (;commands>0;commands--)
     382:	80 91 30 01 	lds	r24, 0x0130
     386:	81 50       	subi	r24, 0x01	; 1
     388:	80 93 30 01 	sts	0x0130, r24
     38c:	80 91 30 01 	lds	r24, 0x0130
     390:	88 23       	and	r24, r24
     392:	51 f7       	brne	.-44     	; 0x368 <main+0x84>
                FillResultPM(resSyntax);
            }
        }


		if (USB_DeviceState == DEVICE_STATE_Configured)
     394:	80 91 0e 01 	lds	r24, 0x010E
     398:	84 30       	cpi	r24, 0x04	; 4
     39a:	71 f4       	brne	.+28     	; 0x3b8 <main+0xd4>
     39c:	09 c0       	rjmp	.+18     	; 0x3b0 <main+0xcc>
		{
			/* Read bytes from the USART receive buffer into the USB IN endpoint */
			while (USARTtoUSB_Buffer.Elements)
				CDC_Device_SendByte(&VirtualSerial_CDC_Interface, Buffer_GetElement(&USARTtoUSB_Buffer));
     39e:	81 e3       	ldi	r24, 0x31	; 49
     3a0:	91 e0       	ldi	r25, 0x01	; 1
     3a2:	0e 94 24 0c 	call	0x1848	; 0x1848 <Buffer_GetElement>
     3a6:	68 2f       	mov	r22, r24
     3a8:	8f e0       	ldi	r24, 0x0F	; 15
     3aa:	91 e0       	ldi	r25, 0x01	; 1
     3ac:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <CDC_Device_SendByte>


		if (USB_DeviceState == DEVICE_STATE_Configured)
		{
			/* Read bytes from the USART receive buffer into the USB IN endpoint */
			while (USARTtoUSB_Buffer.Elements)
     3b0:	80 91 65 01 	lds	r24, 0x0165
     3b4:	88 23       	and	r24, r24
     3b6:	99 f7       	brne	.-26     	; 0x39e <main+0xba>
				CDC_Device_SendByte(&VirtualSerial_CDC_Interface, Buffer_GetElement(&USARTtoUSB_Buffer));
		}

        TamerControlAux();
     3b8:	18 d5       	rcall	.+2608   	; 0xdea <TamerControlAux>
		//if (USBtoUSART_Buffer.Elements)
        //  Serial_TxByte(Buffer_GetElement(&USBtoUSART_Buffer));

        //Serial_TxByte(CDC_Device_SendByte(&VirtualSerial_CDC_Interface, '\n'));
		
		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     3ba:	8f e0       	ldi	r24, 0x0F	; 15
     3bc:	91 e0       	ldi	r25, 0x01	; 1
     3be:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <CDC_Device_USBTask>
		USB_USBTask();
     3c2:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <USB_USBTask>
     3c6:	9f cf       	rjmp	.-194    	; 0x306 <main+0x22>

000003c8 <MicrowireInit>:
        MicrowireLatchLMK0X0XX();
}

void MicrowireInit()
{
   MW_DDR |=  (1 << MW_DATA) | (1 << MW_CLK);
     3c8:	8a b1       	in	r24, 0x0a	; 10
     3ca:	83 60       	ori	r24, 0x03	; 3
     3cc:	8a b9       	out	0x0a, r24	; 10
   MW_PORT &= ~(1 << MW_CLK);
     3ce:	59 98       	cbi	0x0b, 1	; 11
   MW_PORT &= ~(1 << MW_DATA);
     3d0:	58 98       	cbi	0x0b, 0	; 11
}
     3d2:	08 95       	ret

000003d4 <MicrowireLatchLMX2531>:

void MicrowireLatchLMX2531()
{
    MW_LE_PORT |= (1 << MW_LE_LMX2531);
     3d4:	2e 9a       	sbi	0x05, 6	; 5
    MW_LE_PORT |= (1 << MW_LE_LMX2531);
     3d6:	2e 9a       	sbi	0x05, 6	; 5
   //_delay_us(1);
    MW_LE_PORT &= ~(1 << MW_LE_LMX2531);
     3d8:	2e 98       	cbi	0x05, 6	; 5
    MW_LE_PORT &= ~(1 << MW_LE_LMX2531);
     3da:	2e 98       	cbi	0x05, 6	; 5
   //_delay_us(1);
}
     3dc:	08 95       	ret

000003de <MicrowireLatchLMK0X0XX>:

void MicrowireLatchLMK0X0XX()
{
    MW_LE_PORT |= (1 << MW_LE_LMK0X0XX);
     3de:	2f 9a       	sbi	0x05, 7	; 5
    MW_LE_PORT |= (1 << MW_LE_LMK0X0XX);
     3e0:	2f 9a       	sbi	0x05, 7	; 5
   //_delay_us(1);
    MW_LE_PORT &= ~(1 << MW_LE_LMK0X0XX);
     3e2:	2f 98       	cbi	0x05, 7	; 5
    MW_LE_PORT &= ~(1 << MW_LE_LMK0X0XX);
     3e4:	2f 98       	cbi	0x05, 7	; 5
   //_delay_us(1);
}
     3e6:	08 95       	ret

000003e8 <BoardInit>:


void BoardInit()
{
   MicrowireInit();
     3e8:	ef df       	rcall	.-34     	; 0x3c8 <MicrowireInit>

   MW_LE_DDR |=  (1 << MW_LE_LMX2531) | (1 << MW_LE_LMK0X0XX);
     3ea:	84 b1       	in	r24, 0x04	; 4
     3ec:	80 6c       	ori	r24, 0xC0	; 192
     3ee:	84 b9       	out	0x04, r24	; 4
   MW_LE_PORT &= ~((1 << MW_LE_LMX2531) | (1 << MW_LE_LMK0X0XX));
     3f0:	85 b1       	in	r24, 0x05	; 5
     3f2:	8f 73       	andi	r24, 0x3F	; 63
     3f4:	85 b9       	out	0x05, r24	; 5

   LmxCeInit();
     3f6:	55 9a       	sbi	0x0a, 5	; 10
   LmxCeClear();
     3f8:	5d 98       	cbi	0x0b, 5	; 11

   LmkCeInit();
     3fa:	87 b1       	in	r24, 0x07	; 7
     3fc:	84 64       	ori	r24, 0x44	; 68
     3fe:	87 b9       	out	0x07, r24	; 7
   LmkSyncClear();
     400:	42 98       	cbi	0x08, 2	; 8
   LmkGoeClear();
     402:	46 98       	cbi	0x08, 6	; 8

   LedInit();
     404:	25 9a       	sbi	0x04, 5	; 4
   LedClear();
     406:	2d 98       	cbi	0x05, 5	; 5
}
     408:	08 95       	ret

0000040a <MicrowireWriteByte>:

void MicrowireWriteByte(uint8_t data)
{
     40a:	98 e0       	ldi	r25, 0x08	; 8
   uint8_t i;

   for (i = 8; i != 0; i--)
   {
      MW_PORT &=  ~(1 << MW_CLK);  //Toggle CLK low
     40c:	59 98       	cbi	0x0b, 1	; 11

      // Use this because of perfomance impact on an embedded device
      if ((data & 0x80) != 0)
     40e:	87 ff       	sbrs	r24, 7
     410:	02 c0       	rjmp	.+4      	; 0x416 <MicrowireWriteByte+0xc>
         MW_PORT |=  (1 << MW_DATA);   //Set DATA bit
     412:	58 9a       	sbi	0x0b, 0	; 11
     414:	01 c0       	rjmp	.+2      	; 0x418 <MicrowireWriteByte+0xe>
      else
         MW_PORT &=  ~(1 << MW_DATA);  //Reset DATA bit
     416:	58 98       	cbi	0x0b, 0	; 11

      data <<= 1;

      MW_PORT |=  (1 << MW_CLK);  //Toggle CLK high
     418:	59 9a       	sbi	0x0b, 1	; 11

void MicrowireWriteByte(uint8_t data)
{
   uint8_t i;

   for (i = 8; i != 0; i--)
     41a:	91 50       	subi	r25, 0x01	; 1
     41c:	11 f0       	breq	.+4      	; 0x422 <MicrowireWriteByte+0x18>
      if ((data & 0x80) != 0)
         MW_PORT |=  (1 << MW_DATA);   //Set DATA bit
      else
         MW_PORT &=  ~(1 << MW_DATA);  //Reset DATA bit

      data <<= 1;
     41e:	88 0f       	add	r24, r24
     420:	f5 cf       	rjmp	.-22     	; 0x40c <MicrowireWriteByte+0x2>

      MW_PORT |=  (1 << MW_CLK);  //Toggle CLK high
   }

   MW_PORT &=  ~(1 << MW_DATA);
     422:	58 98       	cbi	0x0b, 0	; 11
   MW_PORT &=  ~(1 << MW_CLK);
     424:	59 98       	cbi	0x0b, 1	; 11
}
     426:	08 95       	ret

00000428 <write_reg_LMK0X0XX>:
        MicrowireWriteByte(f3);
        MicrowireLatchLMX2531();
}

void write_reg_LMK0X0XX(uint8_t f1, uint8_t f2, uint8_t f3, uint8_t f4)
{
     428:	ff 92       	push	r15
     42a:	0f 93       	push	r16
     42c:	1f 93       	push	r17
     42e:	16 2f       	mov	r17, r22
     430:	04 2f       	mov	r16, r20
     432:	f2 2e       	mov	r15, r18
        MicrowireWriteByte(f1);
     434:	ea df       	rcall	.-44     	; 0x40a <MicrowireWriteByte>
        MicrowireWriteByte(f2);
     436:	81 2f       	mov	r24, r17
     438:	e8 df       	rcall	.-48     	; 0x40a <MicrowireWriteByte>
        MicrowireWriteByte(f3);
     43a:	80 2f       	mov	r24, r16
     43c:	e6 df       	rcall	.-52     	; 0x40a <MicrowireWriteByte>
        MicrowireWriteByte(f4);
     43e:	8f 2d       	mov	r24, r15
     440:	e4 df       	rcall	.-56     	; 0x40a <MicrowireWriteByte>
        MicrowireLatchLMK0X0XX();
     442:	cd df       	rcall	.-102    	; 0x3de <MicrowireLatchLMK0X0XX>
}
     444:	1f 91       	pop	r17
     446:	0f 91       	pop	r16
     448:	ff 90       	pop	r15
     44a:	08 95       	ret

0000044c <write_reg_LMX2531>:
#include "TamerBoard.h"

#include <util/delay.h>

void write_reg_LMX2531(uint8_t f1, uint8_t f2, uint8_t f3)
{
     44c:	0f 93       	push	r16
     44e:	1f 93       	push	r17
     450:	16 2f       	mov	r17, r22
     452:	04 2f       	mov	r16, r20
        MicrowireWriteByte(f1);
     454:	da df       	rcall	.-76     	; 0x40a <MicrowireWriteByte>
        MicrowireWriteByte(f2);
     456:	81 2f       	mov	r24, r17
     458:	d8 df       	rcall	.-80     	; 0x40a <MicrowireWriteByte>
        MicrowireWriteByte(f3);
     45a:	80 2f       	mov	r24, r16
     45c:	d6 df       	rcall	.-84     	; 0x40a <MicrowireWriteByte>
        MicrowireLatchLMX2531();
     45e:	ba df       	rcall	.-140    	; 0x3d4 <MicrowireLatchLMX2531>
}
     460:	1f 91       	pop	r17
     462:	0f 91       	pop	r16
     464:	08 95       	ret

00000466 <InitCounters>:
#ifdef PRESENT_GPS

void InitCounters(void)
{
    //External T1 Source
    TCCR1B = (1 << ICES1) | (1 << CS12) | (1 << CS11) | (1 << CS10);
     466:	87 e4       	ldi	r24, 0x47	; 71
     468:	80 93 81 00 	sts	0x0081, r24

    //Enable input capture interrupt
    TIMSK1 = (1 << ICIE1) | (1 << TOIE1);
     46c:	81 e2       	ldi	r24, 0x21	; 33
     46e:	80 93 6f 00 	sts	0x006F, r24
}
     472:	08 95       	ret

00000474 <__vector_14>:
#define FILTER_EXP_ALPHA        32

#define RESET_OCP_COUNTER       0x80

ISR(TIMER1_CAPT_vect, ISR_BLOCK)
{
     474:	1f 92       	push	r1
     476:	0f 92       	push	r0
     478:	0f b6       	in	r0, 0x3f	; 63
     47a:	0f 92       	push	r0
     47c:	11 24       	eor	r1, r1
     47e:	6f 92       	push	r6
     480:	7f 92       	push	r7
     482:	8f 92       	push	r8
     484:	9f 92       	push	r9
     486:	af 92       	push	r10
     488:	bf 92       	push	r11
     48a:	cf 92       	push	r12
     48c:	df 92       	push	r13
     48e:	ef 92       	push	r14
     490:	ff 92       	push	r15
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	2f 93       	push	r18
     498:	3f 93       	push	r19
     49a:	4f 93       	push	r20
     49c:	5f 93       	push	r21
     49e:	6f 93       	push	r22
     4a0:	7f 93       	push	r23
     4a2:	8f 93       	push	r24
     4a4:	9f 93       	push	r25
     4a6:	af 93       	push	r26
     4a8:	bf 93       	push	r27
     4aa:	ef 93       	push	r30
     4ac:	ff 93       	push	r31
    //TODO Impove this code!!!
    // Situation when counter overflows inside this inturrupt isn't covered

    if (Count1PPS % GpsSync_divider == 0)
     4ae:	e0 91 b4 01 	lds	r30, 0x01B4
     4b2:	f0 91 b5 01 	lds	r31, 0x01B5
     4b6:	60 91 2e 01 	lds	r22, 0x012E
     4ba:	cf 01       	movw	r24, r30
     4bc:	70 e0       	ldi	r23, 0x00	; 0
     4be:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__udivmodhi4>
     4c2:	89 2b       	or	r24, r25
     4c4:	09 f0       	breq	.+2      	; 0x4c8 <__vector_14+0x54>
     4c6:	c1 c0       	rjmp	.+386    	; 0x64a <__stack+0x14b>
    {
        uint32_t prev = LastOCPVal;
     4c8:	e0 90 bb 01 	lds	r14, 0x01BB
     4cc:	f0 90 bc 01 	lds	r15, 0x01BC
     4d0:	00 91 bd 01 	lds	r16, 0x01BD
     4d4:	10 91 be 01 	lds	r17, 0x01BE

        LastOCPVal = ICR1;
     4d8:	80 91 86 00 	lds	r24, 0x0086
     4dc:	90 91 87 00 	lds	r25, 0x0087
        LastOCPVal |= (CounterHHValue << 16);
     4e0:	20 91 9b 01 	lds	r18, 0x019B
     4e4:	30 91 9c 01 	lds	r19, 0x019C
     4e8:	40 91 9d 01 	lds	r20, 0x019D
     4ec:	50 91 9e 01 	lds	r21, 0x019E
     4f0:	a9 01       	movw	r20, r18
     4f2:	33 27       	eor	r19, r19
     4f4:	22 27       	eor	r18, r18
     4f6:	a0 e0       	ldi	r26, 0x00	; 0
     4f8:	b0 e0       	ldi	r27, 0x00	; 0
     4fa:	28 2b       	or	r18, r24
     4fc:	39 2b       	or	r19, r25
     4fe:	4a 2b       	or	r20, r26
     500:	5b 2b       	or	r21, r27
     502:	20 93 bb 01 	sts	0x01BB, r18
     506:	30 93 bc 01 	sts	0x01BC, r19
     50a:	40 93 bd 01 	sts	0x01BD, r20
     50e:	50 93 be 01 	sts	0x01BE, r21
        if (TIFR1 & (1<< TOV1))
     512:	b0 9b       	sbis	0x16, 0	; 22
     514:	0c c0       	rjmp	.+24     	; 0x52e <__stack+0x2f>
            LastOCPVal += 0x010000;
     516:	20 50       	subi	r18, 0x00	; 0
     518:	30 40       	sbci	r19, 0x00	; 0
     51a:	4f 4f       	sbci	r20, 0xFF	; 255
     51c:	5f 4f       	sbci	r21, 0xFF	; 255
     51e:	20 93 bb 01 	sts	0x01BB, r18
     522:	30 93 bc 01 	sts	0x01BC, r19
     526:	40 93 bd 01 	sts	0x01BD, r20
     52a:	50 93 be 01 	sts	0x01BE, r21

        uint32_t delta =  (LastOCPVal - prev);
     52e:	80 91 bb 01 	lds	r24, 0x01BB
     532:	90 91 bc 01 	lds	r25, 0x01BC
     536:	a0 91 bd 01 	lds	r26, 0x01BD
     53a:	b0 91 be 01 	lds	r27, 0x01BE
        int32_t pint = (FilteredVal/FILTER_EXP_ALPHA - delta);
     53e:	60 90 a3 01 	lds	r6, 0x01A3
     542:	70 90 a4 01 	lds	r7, 0x01A4
     546:	80 90 a5 01 	lds	r8, 0x01A5
     54a:	90 90 a6 01 	lds	r9, 0x01A6
        if (pint < 0)
            pint = -pint;

        if ((Count1PPS != 0))
     54e:	30 97       	sbiw	r30, 0x00	; 0
     550:	09 f4       	brne	.+2      	; 0x554 <__stack+0x55>
     552:	76 c0       	rjmp	.+236    	; 0x640 <__stack+0x141>
        LastOCPVal = ICR1;
        LastOCPVal |= (CounterHHValue << 16);
        if (TIFR1 & (1<< TOV1))
            LastOCPVal += 0x010000;

        uint32_t delta =  (LastOCPVal - prev);
     554:	9c 01       	movw	r18, r24
     556:	ad 01       	movw	r20, r26
     558:	2e 19       	sub	r18, r14
     55a:	3f 09       	sbc	r19, r15
     55c:	40 0b       	sbc	r20, r16
     55e:	51 0b       	sbc	r21, r17
        int32_t pint = (FilteredVal/FILTER_EXP_ALPHA - delta);
     560:	84 01       	movw	r16, r8
     562:	73 01       	movw	r14, r6
     564:	b5 e0       	ldi	r27, 0x05	; 5
     566:	16 95       	lsr	r17
     568:	07 95       	ror	r16
     56a:	f7 94       	ror	r15
     56c:	e7 94       	ror	r14
     56e:	ba 95       	dec	r27
     570:	d1 f7       	brne	.-12     	; 0x566 <__stack+0x67>
     572:	57 01       	movw	r10, r14
     574:	68 01       	movw	r12, r16
     576:	a2 1a       	sub	r10, r18
     578:	b3 0a       	sbc	r11, r19
     57a:	c4 0a       	sbc	r12, r20
     57c:	d5 0a       	sbc	r13, r21
     57e:	d7 fe       	sbrs	r13, 7
     580:	08 c0       	rjmp	.+16     	; 0x592 <__stack+0x93>
     582:	d0 94       	com	r13
     584:	c0 94       	com	r12
     586:	b0 94       	com	r11
     588:	a0 94       	com	r10
     58a:	a1 1c       	adc	r10, r1
     58c:	b1 1c       	adc	r11, r1
     58e:	c1 1c       	adc	r12, r1
     590:	d1 1c       	adc	r13, r1
        if (pint < 0)
            pint = -pint;

        if ((Count1PPS != 0))
        {
            if (PPS_skipped == RESET_OCP_COUNTER)
     592:	60 91 bf 01 	lds	r22, 0x01BF
     596:	60 38       	cpi	r22, 0x80	; 128
     598:	21 f4       	brne	.+8      	; 0x5a2 <__stack+0xa3>
            {
                PPS_skipped++;
     59a:	81 e8       	ldi	r24, 0x81	; 129
     59c:	80 93 bf 01 	sts	0x01BF, r24
     5a0:	46 c0       	rjmp	.+140    	; 0x62e <__stack+0x12f>
            }
            else if ((FilteredVal == 0) || (PPS_skipped > 1))
     5a2:	61 14       	cp	r6, r1
     5a4:	71 04       	cpc	r7, r1
     5a6:	81 04       	cpc	r8, r1
     5a8:	91 04       	cpc	r9, r1
     5aa:	11 f0       	breq	.+4      	; 0x5b0 <__stack+0xb1>
     5ac:	62 30       	cpi	r22, 0x02	; 2
     5ae:	90 f0       	brcs	.+36     	; 0x5d4 <__stack+0xd5>
            {
                PPS_skipped = 0;
     5b0:	10 92 bf 01 	sts	0x01BF, r1
                FilteredVal = FILTER_EXP_ALPHA*(delta);
     5b4:	a5 e0       	ldi	r26, 0x05	; 5
     5b6:	22 0f       	add	r18, r18
     5b8:	33 1f       	adc	r19, r19
     5ba:	44 1f       	adc	r20, r20
     5bc:	55 1f       	adc	r21, r21
     5be:	aa 95       	dec	r26
     5c0:	d1 f7       	brne	.-12     	; 0x5b6 <__stack+0xb7>
     5c2:	20 93 a3 01 	sts	0x01A3, r18
     5c6:	30 93 a4 01 	sts	0x01A4, r19
     5ca:	40 93 a5 01 	sts	0x01A5, r20
     5ce:	50 93 a6 01 	sts	0x01A6, r21
     5d2:	2d c0       	rjmp	.+90     	; 0x62e <__stack+0x12f>
            }
            else if ((uint32_t)pint < delta / 524288)
     5d4:	da 01       	movw	r26, r20
     5d6:	c9 01       	movw	r24, r18
     5d8:	73 e1       	ldi	r23, 0x13	; 19
     5da:	b6 95       	lsr	r27
     5dc:	a7 95       	ror	r26
     5de:	97 95       	ror	r25
     5e0:	87 95       	ror	r24
     5e2:	7a 95       	dec	r23
     5e4:	d1 f7       	brne	.-12     	; 0x5da <__stack+0xdb>
     5e6:	a8 16       	cp	r10, r24
     5e8:	b9 06       	cpc	r11, r25
     5ea:	ca 06       	cpc	r12, r26
     5ec:	db 06       	cpc	r13, r27
     5ee:	e0 f4       	brcc	.+56     	; 0x628 <__stack+0x129>
            {
                // TODO Impove this calculation
                FilteredVal = (FILTER_EXP_ALPHA-1)*(FilteredVal/FILTER_EXP_ALPHA) + (delta);
     5f0:	d8 01       	movw	r26, r16
     5f2:	c7 01       	movw	r24, r14
     5f4:	65 e0       	ldi	r22, 0x05	; 5
     5f6:	88 0f       	add	r24, r24
     5f8:	99 1f       	adc	r25, r25
     5fa:	aa 1f       	adc	r26, r26
     5fc:	bb 1f       	adc	r27, r27
     5fe:	6a 95       	dec	r22
     600:	d1 f7       	brne	.-12     	; 0x5f6 <__stack+0xf7>
     602:	8e 19       	sub	r24, r14
     604:	9f 09       	sbc	r25, r15
     606:	a0 0b       	sbc	r26, r16
     608:	b1 0b       	sbc	r27, r17
     60a:	82 0f       	add	r24, r18
     60c:	93 1f       	adc	r25, r19
     60e:	a4 1f       	adc	r26, r20
     610:	b5 1f       	adc	r27, r21
     612:	80 93 a3 01 	sts	0x01A3, r24
     616:	90 93 a4 01 	sts	0x01A4, r25
     61a:	a0 93 a5 01 	sts	0x01A5, r26
     61e:	b0 93 a6 01 	sts	0x01A6, r27

                PPS_skipped = 0;
     622:	10 92 bf 01 	sts	0x01BF, r1
     626:	03 c0       	rjmp	.+6      	; 0x62e <__stack+0x12f>
            }
            else
                PPS_skipped++;
     628:	6f 5f       	subi	r22, 0xFF	; 255
     62a:	60 93 bf 01 	sts	0x01BF, r22

            ddd = pint;
     62e:	a0 92 c5 01 	sts	0x01C5, r10
     632:	b0 92 c6 01 	sts	0x01C6, r11
     636:	c0 92 c7 01 	sts	0x01C7, r12
     63a:	d0 92 c8 01 	sts	0x01C8, r13
     63e:	05 c0       	rjmp	.+10     	; 0x64a <__stack+0x14b>
        }
        else
        {
            PPS_skipped++;
     640:	80 91 bf 01 	lds	r24, 0x01BF
     644:	8f 5f       	subi	r24, 0xFF	; 255
     646:	80 93 bf 01 	sts	0x01BF, r24
        }
    }

    Count1PPS++;
     64a:	31 96       	adiw	r30, 0x01	; 1
     64c:	f0 93 b5 01 	sts	0x01B5, r31
     650:	e0 93 b4 01 	sts	0x01B4, r30

#ifdef BLINK_1PPS
    INFOLED_PORT ^= (1 << INFOLED);
     654:	85 b1       	in	r24, 0x05	; 5
     656:	90 e2       	ldi	r25, 0x20	; 32
     658:	89 27       	eor	r24, r25
     65a:	85 b9       	out	0x05, r24	; 5
#endif
}
     65c:	ff 91       	pop	r31
     65e:	ef 91       	pop	r30
     660:	bf 91       	pop	r27
     662:	af 91       	pop	r26
     664:	9f 91       	pop	r25
     666:	8f 91       	pop	r24
     668:	7f 91       	pop	r23
     66a:	6f 91       	pop	r22
     66c:	5f 91       	pop	r21
     66e:	4f 91       	pop	r20
     670:	3f 91       	pop	r19
     672:	2f 91       	pop	r18
     674:	1f 91       	pop	r17
     676:	0f 91       	pop	r16
     678:	ff 90       	pop	r15
     67a:	ef 90       	pop	r14
     67c:	df 90       	pop	r13
     67e:	cf 90       	pop	r12
     680:	bf 90       	pop	r11
     682:	af 90       	pop	r10
     684:	9f 90       	pop	r9
     686:	8f 90       	pop	r8
     688:	7f 90       	pop	r7
     68a:	6f 90       	pop	r6
     68c:	0f 90       	pop	r0
     68e:	0f be       	out	0x3f, r0	; 63
     690:	0f 90       	pop	r0
     692:	1f 90       	pop	r1
     694:	18 95       	reti

00000696 <__vector_18>:

ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
     696:	1f 92       	push	r1
     698:	0f 92       	push	r0
     69a:	0f b6       	in	r0, 0x3f	; 63
     69c:	0f 92       	push	r0
     69e:	11 24       	eor	r1, r1
     6a0:	8f 93       	push	r24
     6a2:	9f 93       	push	r25
     6a4:	af 93       	push	r26
     6a6:	bf 93       	push	r27

    CounterHHValue++;
     6a8:	80 91 9b 01 	lds	r24, 0x019B
     6ac:	90 91 9c 01 	lds	r25, 0x019C
     6b0:	a0 91 9d 01 	lds	r26, 0x019D
     6b4:	b0 91 9e 01 	lds	r27, 0x019E
     6b8:	01 96       	adiw	r24, 0x01	; 1
     6ba:	a1 1d       	adc	r26, r1
     6bc:	b1 1d       	adc	r27, r1
     6be:	80 93 9b 01 	sts	0x019B, r24
     6c2:	90 93 9c 01 	sts	0x019C, r25
     6c6:	a0 93 9d 01 	sts	0x019D, r26
     6ca:	b0 93 9e 01 	sts	0x019E, r27
}
     6ce:	bf 91       	pop	r27
     6d0:	af 91       	pop	r26
     6d2:	9f 91       	pop	r25
     6d4:	8f 91       	pop	r24
     6d6:	0f 90       	pop	r0
     6d8:	0f be       	out	0x3f, r0	; 63
     6da:	0f 90       	pop	r0
     6dc:	1f 90       	pop	r1
     6de:	18 95       	reti

000006e0 <UpdateOSCValue>:

void UpdateOSCValue(void)
{
     6e0:	2f 92       	push	r2
     6e2:	3f 92       	push	r3
     6e4:	4f 92       	push	r4
     6e6:	5f 92       	push	r5
     6e8:	6f 92       	push	r6
     6ea:	7f 92       	push	r7
     6ec:	8f 92       	push	r8
     6ee:	9f 92       	push	r9
     6f0:	af 92       	push	r10
     6f2:	bf 92       	push	r11
     6f4:	cf 92       	push	r12
     6f6:	df 92       	push	r13
     6f8:	ef 92       	push	r14
     6fa:	ff 92       	push	r15
     6fc:	0f 93       	push	r16
     6fe:	1f 93       	push	r17
    int32_t delta = (int)(FilteredVal/FILTER_EXP_ALPHA) - (int)Fout ;
     700:	60 90 29 01 	lds	r6, 0x0129
     704:	70 90 2a 01 	lds	r7, 0x012A
     708:	80 90 2b 01 	lds	r8, 0x012B
     70c:	90 90 2c 01 	lds	r9, 0x012C
     710:	80 91 a3 01 	lds	r24, 0x01A3
     714:	90 91 a4 01 	lds	r25, 0x01A4
     718:	a0 91 a5 01 	lds	r26, 0x01A5
     71c:	b0 91 a6 01 	lds	r27, 0x01A6
     720:	e5 e0       	ldi	r30, 0x05	; 5
     722:	b6 95       	lsr	r27
     724:	a7 95       	ror	r26
     726:	97 95       	ror	r25
     728:	87 95       	ror	r24
     72a:	ea 95       	dec	r30
     72c:	d1 f7       	brne	.-12     	; 0x722 <UpdateOSCValue+0x42>
     72e:	86 19       	sub	r24, r6
     730:	97 09       	sbc	r25, r7
     732:	5c 01       	movw	r10, r24
     734:	cc 24       	eor	r12, r12
     736:	b7 fc       	sbrc	r11, 7
     738:	c0 94       	com	r12
     73a:	dc 2c       	mov	r13, r12

    uint32_t pdelta = (delta > 0) ? delta : -delta;
     73c:	86 01       	movw	r16, r12
     73e:	75 01       	movw	r14, r10
     740:	d7 fe       	sbrs	r13, 7
     742:	07 c0       	rjmp	.+14     	; 0x752 <UpdateOSCValue+0x72>
     744:	ee 24       	eor	r14, r14
     746:	ff 24       	eor	r15, r15
     748:	87 01       	movw	r16, r14
     74a:	ea 18       	sub	r14, r10
     74c:	fb 08       	sbc	r15, r11
     74e:	0c 09       	sbc	r16, r12
     750:	1d 09       	sbc	r17, r13
    if (pdelta < Fout / 4096)
     752:	d4 01       	movw	r26, r8
     754:	c3 01       	movw	r24, r6
     756:	7c e0       	ldi	r23, 0x0C	; 12
     758:	b6 95       	lsr	r27
     75a:	a7 95       	ror	r26
     75c:	97 95       	ror	r25
     75e:	87 95       	ror	r24
     760:	7a 95       	dec	r23
     762:	d1 f7       	brne	.-12     	; 0x758 <UpdateOSCValue+0x78>
     764:	e8 16       	cp	r14, r24
     766:	f9 06       	cpc	r15, r25
     768:	0a 07       	cpc	r16, r26
     76a:	1b 07       	cpc	r17, r27
     76c:	08 f0       	brcs	.+2      	; 0x770 <UpdateOSCValue+0x90>
     76e:	41 c0       	rjmp	.+130    	; 0x7f2 <UpdateOSCValue+0x112>
    {
        //TODO Make pure div operation instead of this
        uint32_t m = 0x7FFFFFFF / Fosc;
     770:	50 90 25 01 	lds	r5, 0x0125
     774:	40 90 26 01 	lds	r4, 0x0126
     778:	30 90 27 01 	lds	r3, 0x0127
     77c:	20 90 28 01 	lds	r2, 0x0128
     780:	6f ef       	ldi	r22, 0xFF	; 255
     782:	7f ef       	ldi	r23, 0xFF	; 255
     784:	8f ef       	ldi	r24, 0xFF	; 255
     786:	9f e7       	ldi	r25, 0x7F	; 127
     788:	25 2d       	mov	r18, r5
     78a:	34 2d       	mov	r19, r4
     78c:	43 2d       	mov	r20, r3
     78e:	52 2d       	mov	r21, r2
     790:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__udivmodsi4>
     794:	c9 01       	movw	r24, r18
     796:	da 01       	movw	r26, r20
        if (pdelta > m)
     798:	8e 15       	cp	r24, r14
     79a:	9f 05       	cpc	r25, r15
     79c:	a0 07       	cpc	r26, r16
     79e:	b1 07       	cpc	r27, r17
     7a0:	70 f4       	brcc	.+28     	; 0x7be <UpdateOSCValue+0xde>
        {
            delta = (delta > 0) ? m : -m;
     7a2:	1a 14       	cp	r1, r10
     7a4:	1b 04       	cpc	r1, r11
     7a6:	1c 04       	cpc	r1, r12
     7a8:	1d 04       	cpc	r1, r13
     7aa:	3c f0       	brlt	.+14     	; 0x7ba <UpdateOSCValue+0xda>
     7ac:	b0 95       	com	r27
     7ae:	a0 95       	com	r26
     7b0:	90 95       	com	r25
     7b2:	81 95       	neg	r24
     7b4:	9f 4f       	sbci	r25, 0xFF	; 255
     7b6:	af 4f       	sbci	r26, 0xFF	; 255
     7b8:	bf 4f       	sbci	r27, 0xFF	; 255
     7ba:	5c 01       	movw	r10, r24
     7bc:	6d 01       	movw	r12, r26
        }

        Fosc = (uint32_t)((int32_t)Fosc + (delta*(int32_t)Fosc) / (int32_t)Fout);
     7be:	e5 2c       	mov	r14, r5
     7c0:	f4 2c       	mov	r15, r4
     7c2:	03 2d       	mov	r16, r3
     7c4:	12 2d       	mov	r17, r2
     7c6:	c6 01       	movw	r24, r12
     7c8:	b5 01       	movw	r22, r10
     7ca:	a8 01       	movw	r20, r16
     7cc:	97 01       	movw	r18, r14
     7ce:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__mulsi3>
     7d2:	a4 01       	movw	r20, r8
     7d4:	93 01       	movw	r18, r6
     7d6:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__divmodsi4>
     7da:	e2 0e       	add	r14, r18
     7dc:	f3 1e       	adc	r15, r19
     7de:	04 1f       	adc	r16, r20
     7e0:	15 1f       	adc	r17, r21
     7e2:	e0 92 25 01 	sts	0x0125, r14
     7e6:	f0 92 26 01 	sts	0x0126, r15
     7ea:	00 93 27 01 	sts	0x0127, r16
     7ee:	10 93 28 01 	sts	0x0128, r17
    }
}
     7f2:	1f 91       	pop	r17
     7f4:	0f 91       	pop	r16
     7f6:	ff 90       	pop	r15
     7f8:	ef 90       	pop	r14
     7fa:	df 90       	pop	r13
     7fc:	cf 90       	pop	r12
     7fe:	bf 90       	pop	r11
     800:	af 90       	pop	r10
     802:	9f 90       	pop	r9
     804:	8f 90       	pop	r8
     806:	7f 90       	pop	r7
     808:	6f 90       	pop	r6
     80a:	5f 90       	pop	r5
     80c:	4f 90       	pop	r4
     80e:	3f 90       	pop	r3
     810:	2f 90       	pop	r2
     812:	08 95       	ret

00000814 <SetOscillatorMode>:
#define DDR_OSC     DDRD
#define PORT_OSC    PORTD

void SetOscillatorMode(uint8_t mode)
{
    DDR_OSC |= (1 << ENABLE_OSC);
     814:	56 9a       	sbi	0x0a, 6	; 10

    if (mode)
     816:	88 23       	and	r24, r24
     818:	11 f0       	breq	.+4      	; 0x81e <SetOscillatorMode+0xa>
    {
        PORT_OSC |= (1 << ENABLE_OSC);
     81a:	5e 9a       	sbi	0x0b, 6	; 11
     81c:	08 95       	ret
    }
    else
    {
        PORT_OSC &= ~(1 << ENABLE_OSC);
     81e:	5e 98       	cbi	0x0b, 6	; 11
     820:	08 95       	ret

00000822 <SetOscillator>:
    }
}

static void SetOscillator(void)
{
    SetOscillatorMode (EnableOscillator);
     822:	80 91 2f 01 	lds	r24, 0x012F
}
     826:	f6 cf       	rjmp	.-20     	; 0x814 <SetOscillatorMode>

00000828 <SetLMK>:
    return 1;
}


void SetLMK(void)
{
     828:	cf 92       	push	r12
     82a:	df 92       	push	r13
     82c:	ef 92       	push	r14
     82e:	ff 92       	push	r15
     830:	0f 93       	push	r16
     832:	1f 93       	push	r17
     834:	11 e0       	ldi	r17, 0x01	; 1
     836:	00 e0       	ldi	r16, 0x00	; 0
   uint8_t j = 1;
   for (uint8_t i = 0; i < 8; i++, j<<=1)
   {
        if ((j & LMK_OutMask) == j)
     838:	80 91 2d 01 	lds	r24, 0x012D
     83c:	81 23       	and	r24, r17
     83e:	81 17       	cp	r24, r17
     840:	29 f4       	brne	.+10     	; 0x84c <SetLMK+0x24>
            //LMK0X0XX_WRITE(MAKE_LMK(1, 1, LMK_devider, 0, i));
            write_reg_LMK0X0XX(MAKE_LMK_HH(), MAKE_LMK_HL(1, 1), MAKE_LMK_LH(LMK_devider), MAKE_LMK_LL(0, i));
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	63 e0       	ldi	r22, 0x03	; 3
     846:	40 91 c4 01 	lds	r20, 0x01C4
     84a:	03 c0       	rjmp	.+6      	; 0x852 <SetLMK+0x2a>
        else
            //LMK0X0XX_WRITE(0x00000100 | (uint32_t)i);
            write_reg_LMK0X0XX(MAKE_LMK_HH(), MAKE_LMK_HL(0, 0), MAKE_LMK_LH(1), MAKE_LMK_LL(0, i));
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	41 e0       	ldi	r20, 0x01	; 1
     852:	20 2f       	mov	r18, r16
     854:	e9 dd       	rcall	.-1070   	; 0x428 <write_reg_LMK0X0XX>


void SetLMK(void)
{
   uint8_t j = 1;
   for (uint8_t i = 0; i < 8; i++, j<<=1)
     856:	0f 5f       	subi	r16, 0xFF	; 255
     858:	08 30       	cpi	r16, 0x08	; 8
     85a:	11 f0       	breq	.+4      	; 0x860 <SetLMK+0x38>
     85c:	11 0f       	add	r17, r17
     85e:	ec cf       	rjmp	.-40     	; 0x838 <SetLMK+0x10>
            //LMK0X0XX_WRITE(0x00000100 | (uint32_t)i);
            write_reg_LMK0X0XX(MAKE_LMK_HH(), MAKE_LMK_HL(0, 0), MAKE_LMK_LH(1), MAKE_LMK_LL(0, i));
   }

#ifdef PRESENT_GPS
   LMK0X0XX_WRITE(MAKE_LMK(1, 1, GpsSync_divider * LMK_devider, 0, GPS_PORT));
     860:	60 91 2e 01 	lds	r22, 0x012E
     864:	80 91 c4 01 	lds	r24, 0x01C4
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <__mulhi3>
     870:	8c 01       	movw	r16, r24
     872:	13 60       	ori	r17, 0x03	; 3
     874:	22 27       	eor	r18, r18
     876:	17 fd       	sbrc	r17, 7
     878:	20 95       	com	r18
     87a:	32 2f       	mov	r19, r18
     87c:	32 2f       	mov	r19, r18
     87e:	21 2f       	mov	r18, r17
     880:	10 2f       	mov	r17, r16
     882:	00 27       	eor	r16, r16
     884:	82 e0       	ldi	r24, 0x02	; 2
     886:	c8 2e       	mov	r12, r24
     888:	d1 2c       	mov	r13, r1
     88a:	e1 2c       	mov	r14, r1
     88c:	f1 2c       	mov	r15, r1
     88e:	c0 2a       	or	r12, r16
     890:	d1 2a       	or	r13, r17
     892:	e2 2a       	or	r14, r18
     894:	f3 2a       	or	r15, r19
     896:	8f 2d       	mov	r24, r15
     898:	bb 27       	eor	r27, r27
     89a:	87 fd       	sbrc	r24, 7
     89c:	b0 95       	com	r27
     89e:	9b 2f       	mov	r25, r27
     8a0:	ab 2f       	mov	r26, r27
     8a2:	a7 01       	movw	r20, r14
     8a4:	77 27       	eor	r23, r23
     8a6:	57 fd       	sbrc	r21, 7
     8a8:	70 95       	com	r23
     8aa:	67 2f       	mov	r22, r23
     8ac:	cd 2c       	mov	r12, r13
     8ae:	de 2c       	mov	r13, r14
     8b0:	ef 2c       	mov	r14, r15
     8b2:	ff 24       	eor	r15, r15
     8b4:	e7 fc       	sbrc	r14, 7
     8b6:	fa 94       	dec	r15
     8b8:	02 60       	ori	r16, 0x02	; 2
     8ba:	64 2f       	mov	r22, r20
     8bc:	4c 2d       	mov	r20, r12
     8be:	20 2f       	mov	r18, r16
     8c0:	b3 dd       	rcall	.-1178   	; 0x428 <write_reg_LMK0X0XX>
#endif

   LMK0X0XX_WRITE(0x00022A09);
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	62 e0       	ldi	r22, 0x02	; 2
     8c6:	4a e2       	ldi	r20, 0x2A	; 42
     8c8:	29 e0       	ldi	r18, 0x09	; 9
     8ca:	ae dd       	rcall	.-1188   	; 0x428 <write_reg_LMK0X0XX>
   LMK0X0XX_WRITE(0x6800000E);
     8cc:	88 e6       	ldi	r24, 0x68	; 104
     8ce:	60 e0       	ldi	r22, 0x00	; 0
     8d0:	40 e0       	ldi	r20, 0x00	; 0
     8d2:	2e e0       	ldi	r18, 0x0E	; 14
     8d4:	a9 dd       	rcall	.-1198   	; 0x428 <write_reg_LMK0X0XX>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8d6:	80 e2       	ldi	r24, 0x20	; 32
     8d8:	9e e4       	ldi	r25, 0x4E	; 78
     8da:	fc 01       	movw	r30, r24
     8dc:	31 97       	sbiw	r30, 0x01	; 1
     8de:	f1 f7       	brne	.-4      	; 0x8dc <SetLMK+0xb4>



   _delay_ms(10);

    LmkSyncClear();
     8e0:	42 98       	cbi	0x08, 2	; 8
     8e2:	01 97       	sbiw	r24, 0x01	; 1
     8e4:	f1 f7       	brne	.-4      	; 0x8e2 <SetLMK+0xba>

   _delay_ms(10);

    LmkSyncSet();
     8e6:	42 9a       	sbi	0x08, 2	; 8
}
     8e8:	1f 91       	pop	r17
     8ea:	0f 91       	pop	r16
     8ec:	ff 90       	pop	r15
     8ee:	ef 90       	pop	r14
     8f0:	df 90       	pop	r13
     8f2:	cf 90       	pop	r12
     8f4:	08 95       	ret

000008f6 <InitLMK>:
}

void InitLMK(void)
{
    // Enable LMK01000
    LmkGoeSet();
     8f6:	46 9a       	sbi	0x08, 6	; 8
     8f8:	84 ef       	ldi	r24, 0xF4	; 244
     8fa:	91 e0       	ldi	r25, 0x01	; 1
     8fc:	28 ec       	ldi	r18, 0xC8	; 200
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	f9 01       	movw	r30, r18
     902:	31 97       	sbiw	r30, 0x01	; 1
     904:	f1 f7       	brne	.-4      	; 0x902 <InitLMK+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     906:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     908:	d9 f7       	brne	.-10     	; 0x900 <InitLMK+0xa>
    _delay_ms(50);

    LMK0X0XX_WRITE(0x80000100);
     90a:	80 e8       	ldi	r24, 0x80	; 128
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	41 e0       	ldi	r20, 0x01	; 1
     910:	20 e0       	ldi	r18, 0x00	; 0
}
     912:	8a cd       	rjmp	.-1260   	; 0x428 <write_reg_LMK0X0XX>

00000914 <SetLMX2531>:
#endif
}


uint8_t SetLMX2531(uint8_t tuneOnly)
{
     914:	2f 92       	push	r2
     916:	3f 92       	push	r3
     918:	4f 92       	push	r4
     91a:	5f 92       	push	r5
     91c:	6f 92       	push	r6
     91e:	7f 92       	push	r7
     920:	8f 92       	push	r8
     922:	9f 92       	push	r9
     924:	af 92       	push	r10
     926:	bf 92       	push	r11
     928:	cf 92       	push	r12
     92a:	df 92       	push	r13
     92c:	ef 92       	push	r14
     92e:	ff 92       	push	r15
     930:	0f 93       	push	r16
     932:	1f 93       	push	r17
     934:	df 93       	push	r29
     936:	cf 93       	push	r28
     938:	cd b7       	in	r28, 0x3d	; 61
     93a:	de b7       	in	r29, 0x3e	; 62
     93c:	2d 97       	sbiw	r28, 0x0d	; 13
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	f8 94       	cli
     942:	de bf       	out	0x3e, r29	; 62
     944:	0f be       	out	0x3f, r0	; 63
     946:	cd bf       	out	0x3d, r28	; 61
     948:	8d 83       	std	Y+5, r24	; 0x05
    uint32_t num;

    uint8_t r = 1;
    if (Fosc > 14000000ul)
     94a:	20 90 25 01 	lds	r2, 0x0125
     94e:	30 90 26 01 	lds	r3, 0x0126
     952:	40 90 27 01 	lds	r4, 0x0127
     956:	50 90 28 01 	lds	r5, 0x0128
     95a:	21 e8       	ldi	r18, 0x81	; 129
     95c:	22 16       	cp	r2, r18
     95e:	2f e9       	ldi	r18, 0x9F	; 159
     960:	32 06       	cpc	r3, r18
     962:	25 ed       	ldi	r18, 0xD5	; 213
     964:	42 06       	cpc	r4, r18
     966:	20 e0       	ldi	r18, 0x00	; 0
     968:	52 06       	cpc	r5, r18
     96a:	18 f0       	brcs	.+6      	; 0x972 <SetLMX2531+0x5e>
     96c:	32 e0       	ldi	r19, 0x02	; 2
     96e:	a3 2e       	mov	r10, r19
     970:	02 c0       	rjmp	.+4      	; 0x976 <SetLMX2531+0x62>
     972:	aa 24       	eor	r10, r10
     974:	a3 94       	inc	r10
       r = 2;

    uint16_t vco;
    //uint16_t foutmhz = Fout / 1000000;
    uint16_t foutmhz = Fout / 100000;
     976:	c0 90 29 01 	lds	r12, 0x0129
     97a:	d0 90 2a 01 	lds	r13, 0x012A
     97e:	e0 90 2b 01 	lds	r14, 0x012B
     982:	f0 90 2c 01 	lds	r15, 0x012C
     986:	c7 01       	movw	r24, r14
     988:	b6 01       	movw	r22, r12
     98a:	20 ea       	ldi	r18, 0xA0	; 160
     98c:	36 e8       	ldi	r19, 0x86	; 134
     98e:	41 e0       	ldi	r20, 0x01	; 1
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__udivmodsi4>
     996:	89 01       	movw	r16, r18
     998:	9a 01       	movw	r18, r20

    if (foutmhz == 0)
     99a:	01 15       	cp	r16, r1
     99c:	11 05       	cpc	r17, r1
     99e:	09 f4       	brne	.+2      	; 0x9a2 <SetLMX2531+0x8e>
     9a0:	96 c1       	rjmp	.+812    	; 0xcce <SetLMX2531+0x3ba>

    uint16_t i;
#ifdef VCO_FIXED
    if (VCO_MAX > DIVIDER_MAX_FREQ)
    {
        i = (((uint16_t)10*(VCO_MIN + VCO_MAX) / 8) / (foutmhz)) * 4;
     9a2:	86 e6       	ldi	r24, 0x66	; 102
     9a4:	94 e1       	ldi	r25, 0x14	; 20
     9a6:	b8 01       	movw	r22, r16
     9a8:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__udivmodhi4>
     9ac:	cb 01       	movw	r24, r22
     9ae:	88 0f       	add	r24, r24
     9b0:	99 1f       	adc	r25, r25
     9b2:	88 0f       	add	r24, r24
     9b4:	99 1f       	adc	r25, r25
     9b6:	9d 87       	std	Y+13, r25	; 0x0d
     9b8:	8c 87       	std	Y+12, r24	; 0x0c
        vco = (i + 4) * (foutmhz);
     9ba:	fc 01       	movw	r30, r24
     9bc:	34 96       	adiw	r30, 0x04	; 4
     9be:	cf 01       	movw	r24, r30
     9c0:	b8 01       	movw	r22, r16
     9c2:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <__mulhi3>
        if (vco > 10*VCO_MAX)
     9c6:	a8 e5       	ldi	r26, 0x58	; 88
     9c8:	85 3d       	cpi	r24, 0xD5	; 213
     9ca:	9a 07       	cpc	r25, r26
     9cc:	18 f4       	brcc	.+6      	; 0x9d4 <SetLMX2531+0xc0>
     9ce:	fd 87       	std	Y+13, r31	; 0x0d
     9d0:	ec 87       	std	Y+12, r30	; 0x0c
     9d2:	05 c0       	rjmp	.+10     	; 0x9de <SetLMX2531+0xca>
            vco = i * (foutmhz);
     9d4:	8c 85       	ldd	r24, Y+12	; 0x0c
     9d6:	9d 85       	ldd	r25, Y+13	; 0x0d
     9d8:	b8 01       	movw	r22, r16
     9da:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <__mulhi3>
    else
      i += 1<<kk;

#endif

    if (vco < 10*VCO_MIN)
     9de:	80 56       	subi	r24, 0x60	; 96
     9e0:	9a 44       	sbci	r25, 0x4A	; 74
     9e2:	08 f4       	brcc	.+2      	; 0x9e6 <SetLMX2531+0xd2>
     9e4:	74 c1       	rjmp	.+744    	; 0xcce <SetLMX2531+0x3ba>
    {
        return 0;
    }


    uint16_t n = (uint32_t)(i*Fout) / (Fosc / r);
     9e6:	ec 85       	ldd	r30, Y+12	; 0x0c
     9e8:	fd 85       	ldd	r31, Y+13	; 0x0d
     9ea:	bf 01       	movw	r22, r30
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	a7 01       	movw	r20, r14
     9f2:	96 01       	movw	r18, r12
     9f4:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__mulsi3>
     9f8:	7b 01       	movw	r14, r22
     9fa:	8c 01       	movw	r16, r24
     9fc:	6e 83       	std	Y+6, r22	; 0x06
     9fe:	ff 82       	std	Y+7, r15	; 0x07
     a00:	08 87       	std	Y+8, r16	; 0x08
     a02:	19 87       	std	Y+9, r17	; 0x09
     a04:	8a 2d       	mov	r24, r10
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	89 83       	std	Y+1, r24	; 0x01
     a0e:	9a 83       	std	Y+2, r25	; 0x02
     a10:	ab 83       	std	Y+3, r26	; 0x03
     a12:	bc 83       	std	Y+4, r27	; 0x04
     a14:	c2 01       	movw	r24, r4
     a16:	b1 01       	movw	r22, r2
     a18:	29 81       	ldd	r18, Y+1	; 0x01
     a1a:	3a 81       	ldd	r19, Y+2	; 0x02
     a1c:	4b 81       	ldd	r20, Y+3	; 0x03
     a1e:	5c 81       	ldd	r21, Y+4	; 0x04
     a20:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__udivmodsi4>
     a24:	59 01       	movw	r10, r18
     a26:	4a 87       	std	Y+10, r20	; 0x0a
     a28:	5b 87       	std	Y+11, r21	; 0x0b
    uint32_t rem_n = ((uint32_t)(i*Fout))  % (Fosc / r);
     a2a:	b7 01       	movw	r22, r14
     a2c:	c8 01       	movw	r24, r16
     a2e:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__udivmodsi4>
     a32:	ac 01       	movw	r20, r24
     a34:	cb 01       	movw	r24, r22
     a36:	da 01       	movw	r26, r20
     a38:	7c 01       	movw	r14, r24
     a3a:	8d 01       	movw	r16, r26
     a3c:	dd 24       	eor	r13, r13
     a3e:	13 c0       	rjmp	.+38     	; 0xa66 <SetLMX2531+0x152>
            rem1 <<= 1;
            num <<= 1;
        }

        dev1 = (rem1) / ((Fosc / r));
        rem1 = (rem1) % ((Fosc / r));
     a40:	c8 01       	movw	r24, r16
     a42:	b7 01       	movw	r22, r14
     a44:	95 01       	movw	r18, r10
     a46:	4a 85       	ldd	r20, Y+10	; 0x0a
     a48:	5b 85       	ldd	r21, Y+11	; 0x0b
     a4a:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__udivmodsi4>
     a4e:	9b 01       	movw	r18, r22
     a50:	ac 01       	movw	r20, r24
    uint8_t t;
    for (t = 0; t <= den_bit; t++)
    {
        if (t != 0)
        {
            rem1 <<= 1;
     a52:	79 01       	movw	r14, r18
     a54:	8a 01       	movw	r16, r20
     a56:	ee 0c       	add	r14, r14
     a58:	ff 1c       	adc	r15, r15
     a5a:	00 1f       	adc	r16, r16
     a5c:	11 1f       	adc	r17, r17
            num <<= 1;
     a5e:	66 0c       	add	r6, r6
     a60:	77 1c       	adc	r7, r7
     a62:	88 1c       	adc	r8, r8
     a64:	99 1c       	adc	r9, r9
        }

        dev1 = (rem1) / ((Fosc / r));
     a66:	c8 01       	movw	r24, r16
     a68:	b7 01       	movw	r22, r14
     a6a:	95 01       	movw	r18, r10
     a6c:	4a 85       	ldd	r20, Y+10	; 0x0a
     a6e:	5b 85       	ldd	r21, Y+11	; 0x0b
     a70:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__udivmodsi4>
     a74:	c9 01       	movw	r24, r18
     a76:	da 01       	movw	r26, r20
        rem1 = (rem1) % ((Fosc / r));

        if (t == 0)
     a78:	dd 20       	and	r13, r13
     a7a:	19 f4       	brne	.+6      	; 0xa82 <SetLMX2531+0x16e>
     a7c:	3c 01       	movw	r6, r24
     a7e:	4d 01       	movw	r8, r26
     a80:	0c c0       	rjmp	.+24     	; 0xa9a <SetLMX2531+0x186>
            num = dev1;
        else if (dev1 & 1)
     a82:	81 70       	andi	r24, 0x01	; 1
     a84:	90 70       	andi	r25, 0x00	; 0
     a86:	89 2b       	or	r24, r25
     a88:	41 f0       	breq	.+16     	; 0xa9a <SetLMX2531+0x186>
            num |= 1;
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	a0 e0       	ldi	r26, 0x00	; 0
     a90:	b0 e0       	ldi	r27, 0x00	; 0
     a92:	68 2a       	or	r6, r24
     a94:	79 2a       	or	r7, r25
     a96:	8a 2a       	or	r8, r26
     a98:	9b 2a       	or	r9, r27
#else
    {
    uint32_t dev1;
    uint32_t rem1 = rem_n;
    uint8_t t;
    for (t = 0; t <= den_bit; t++)
     a9a:	d3 94       	inc	r13
     a9c:	96 e1       	ldi	r25, 0x16	; 22
     a9e:	d9 16       	cp	r13, r25
     aa0:	79 f6       	brne	.-98     	; 0xa40 <SetLMX2531+0x12c>
#ifdef VCO_FIXED
    if (VCO_MAX > DIVIDER_MAX_FREQ)
#else
    if (kk == 2)
#endif
        i /= 2;
     aa2:	ac 85       	ldd	r26, Y+12	; 0x0c
     aa4:	bd 85       	ldd	r27, Y+13	; 0x0d
     aa6:	b6 95       	lsr	r27
     aa8:	a7 95       	ror	r26
     aaa:	bd 87       	std	Y+13, r27	; 0x0d
     aac:	ac 87       	std	Y+12, r26	; 0x0c

    if (i > 510)
     aae:	af 5f       	subi	r26, 0xFF	; 255
     ab0:	b1 40       	sbci	r27, 0x01	; 1
     ab2:	08 f0       	brcs	.+2      	; 0xab6 <SetLMX2531+0x1a2>
     ab4:	0c c1       	rjmp	.+536    	; 0xcce <SetLMX2531+0x3ba>
        return 0;

    if (!tuneOnly)
     ab6:	fd 81       	ldd	r31, Y+5	; 0x05
     ab8:	ff 23       	and	r31, r31
     aba:	09 f0       	breq	.+2      	; 0xabe <SetLMX2531+0x1aa>
     abc:	78 c0       	rjmp	.+240    	; 0xbae <SetLMX2531+0x29a>
    {
        LMX2531_WRITE( MAKE_R8(LOCKMODE_LINEAR, Fosc/1000) );
     abe:	20 e0       	ldi	r18, 0x00	; 0
     ac0:	22 16       	cp	r2, r18
     ac2:	2a e5       	ldi	r18, 0x5A	; 90
     ac4:	32 06       	cpc	r3, r18
     ac6:	22 e6       	ldi	r18, 0x62	; 98
     ac8:	42 06       	cpc	r4, r18
     aca:	22 e0       	ldi	r18, 0x02	; 2
     acc:	52 06       	cpc	r5, r18
     ace:	10 f0       	brcs	.+4      	; 0xad4 <SetLMX2531+0x1c0>
     ad0:	48 e1       	ldi	r20, 0x18	; 24
     ad2:	01 c0       	rjmp	.+2      	; 0xad6 <SetLMX2531+0x1c2>
     ad4:	48 e0       	ldi	r20, 0x08	; 8
     ad6:	82 e0       	ldi	r24, 0x02	; 2
     ad8:	60 e8       	ldi	r22, 0x80	; 128
     ada:	b8 dc       	rcall	.-1680   	; 0x44c <write_reg_LMX2531>
        //LMX2531_WRITE( MAKE_R7(VCO_Kbit, Fosc/1000) );
        SetLMX2531_R7(Fosc/1000);
     adc:	60 91 25 01 	lds	r22, 0x0125
     ae0:	70 91 26 01 	lds	r23, 0x0126
     ae4:	80 91 27 01 	lds	r24, 0x0127
     ae8:	90 91 28 01 	lds	r25, 0x0128
     aec:	28 ee       	ldi	r18, 0xE8	; 232
     aee:	33 e0       	ldi	r19, 0x03	; 3
     af0:	40 e0       	ldi	r20, 0x00	; 0
     af2:	50 e0       	ldi	r21, 0x00	; 0
     af4:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__udivmodsi4>
     af8:	69 01       	movw	r12, r18
     afa:	7a 01       	movw	r14, r20
     afc:	89 01       	movw	r16, r18

inline static void SetLMX2531_R7(uint16_t fosc)
{
#ifdef UNROLL_MACROSS_LMX2531

  uint16_t xtlman = (0x3ffc & ((((uint32_t)fosc)<<6)/(VCO_Kbit))) ;
     afe:	b9 01       	movw	r22, r18
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	f6 e0       	ldi	r31, 0x06	; 6
     b06:	66 0f       	add	r22, r22
     b08:	77 1f       	adc	r23, r23
     b0a:	88 1f       	adc	r24, r24
     b0c:	99 1f       	adc	r25, r25
     b0e:	fa 95       	dec	r31
     b10:	d1 f7       	brne	.-12     	; 0xb06 <SetLMX2531+0x1f2>
     b12:	24 e9       	ldi	r18, 0x94	; 148
     b14:	31 e1       	ldi	r19, 0x11	; 17
     b16:	40 e0       	ldi	r20, 0x00	; 0
     b18:	50 e0       	ldi	r21, 0x00	; 0
     b1a:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__udivmodsi4>
     b1e:	2c 7f       	andi	r18, 0xFC	; 252
     b20:	3f 73       	andi	r19, 0x3F	; 63
  uint8_t xdiv = ( (fosc) < 40000 ? (((fosc) / 20000)+1) : 3);
     b22:	00 54       	subi	r16, 0x40	; 64
     b24:	1c 49       	sbci	r17, 0x9C	; 156
     b26:	10 f0       	brcs	.+4      	; 0xb2c <SetLMX2531+0x218>
     b28:	63 e0       	ldi	r22, 0x03	; 3
     b2a:	06 c0       	rjmp	.+12     	; 0xb38 <SetLMX2531+0x224>
     b2c:	c6 01       	movw	r24, r12
     b2e:	60 e2       	ldi	r22, 0x20	; 32
     b30:	7e e4       	ldi	r23, 0x4E	; 78
     b32:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__udivmodhi4>
     b36:	6f 5f       	subi	r22, 0xFF	; 255


  write_reg_LMX2531(xtlman >> 8, (uint8_t)xtlman | xdiv, 7);
     b38:	62 2b       	or	r22, r18
     b3a:	83 2f       	mov	r24, r19
     b3c:	47 e0       	ldi	r20, 0x07	; 7
     b3e:	86 dc       	rcall	.-1780   	; 0x44c <write_reg_LMX2531>
    {
        LMX2531_WRITE( MAKE_R8(LOCKMODE_LINEAR, Fosc/1000) );
        //LMX2531_WRITE( MAKE_R7(VCO_Kbit, Fosc/1000) );
        SetLMX2531_R7(Fosc/1000);

        LMX2531_WRITE( MAKE_R6(XTLSEL_MANUAL, VCO_ACI_SEL_M1, 1, R_40, R_10, R_40, R_10, C3_C4_100_100) );
     b40:	88 e4       	ldi	r24, 0x48	; 72
     b42:	66 ee       	ldi	r22, 0xE6	; 230
     b44:	46 e5       	ldi	r20, 0x56	; 86
     b46:	82 dc       	rcall	.-1788   	; 0x44c <write_reg_LMX2531>
        //LMX2531_WRITE( MAKE_R6(CALC_XTSEL(Fosc/1000000), VCO_ACI_SEL_M1, 1, R_40, R_10, R_40, R_10, C3_C4_100_100) );
        LMX2531_WRITE( MAKE_R4(ICP_1X, TOC_DISABLED) );
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	60 e0       	ldi	r22, 0x00	; 0
     b4c:	44 e0       	ldi	r20, 0x04	; 4
     b4e:	7e dc       	rcall	.-1796   	; 0x44c <write_reg_LMX2531>
#ifdef DEBUG_REGS
        LMX2531_WRITE(tmp_r3 = MAKE_R3((VCO_MAX > DIVIDER_MAX_FREQ), FDM_FRACTIONAL, DITHER_STRONG, FRAC_ORDER_4, FOLD_DISABLED, den >> 12) );
     b50:	83 e0       	ldi	r24, 0x03	; 3
     b52:	90 e2       	ldi	r25, 0x20	; 32
     b54:	a0 ee       	ldi	r26, 0xE0	; 224
     b56:	b0 e0       	ldi	r27, 0x00	; 0
     b58:	80 93 a7 01 	sts	0x01A7, r24
     b5c:	90 93 a8 01 	sts	0x01A8, r25
     b60:	a0 93 a9 01 	sts	0x01A9, r26
     b64:	b0 93 aa 01 	sts	0x01AA, r27
     b68:	80 ee       	ldi	r24, 0xE0	; 224
     b6a:	60 e2       	ldi	r22, 0x20	; 32
     b6c:	43 e0       	ldi	r20, 0x03	; 3
     b6e:	6e dc       	rcall	.-1828   	; 0x44c <write_reg_LMX2531>
        LMX2531_WRITE(tmp_r2 = MAKE_R2(den & 0xFFF, r) );
     b70:	29 81       	ldd	r18, Y+1	; 0x01
     b72:	3a 81       	ldd	r19, Y+2	; 0x02
     b74:	4b 81       	ldd	r20, Y+3	; 0x03
     b76:	5c 81       	ldd	r21, Y+4	; 0x04
     b78:	e4 e0       	ldi	r30, 0x04	; 4
     b7a:	22 0f       	add	r18, r18
     b7c:	33 1f       	adc	r19, r19
     b7e:	44 1f       	adc	r20, r20
     b80:	55 1f       	adc	r21, r21
     b82:	ea 95       	dec	r30
     b84:	d1 f7       	brne	.-12     	; 0xb7a <SetLMX2531+0x266>
     b86:	22 60       	ori	r18, 0x02	; 2
     b88:	40 64       	ori	r20, 0x40	; 64
     b8a:	20 93 b0 01 	sts	0x01B0, r18
     b8e:	30 93 b1 01 	sts	0x01B1, r19
     b92:	40 93 b2 01 	sts	0x01B2, r20
     b96:	50 93 b3 01 	sts	0x01B3, r21
     b9a:	ca 01       	movw	r24, r20
     b9c:	aa 27       	eor	r26, r26
     b9e:	bb 27       	eor	r27, r27
     ba0:	e3 2e       	mov	r14, r19
     ba2:	f4 2e       	mov	r15, r20
     ba4:	05 2f       	mov	r16, r21
     ba6:	11 27       	eor	r17, r17
     ba8:	6e 2d       	mov	r22, r14
     baa:	42 2f       	mov	r20, r18
     bac:	4f dc       	rcall	.-1890   	; 0x44c <write_reg_LMX2531>
    {
        return 0;
    }


    uint16_t n = (uint32_t)(i*Fout) / (Fosc / r);
     bae:	6e 81       	ldd	r22, Y+6	; 0x06
     bb0:	7f 81       	ldd	r23, Y+7	; 0x07
     bb2:	88 85       	ldd	r24, Y+8	; 0x08
     bb4:	99 85       	ldd	r25, Y+9	; 0x09
     bb6:	95 01       	movw	r18, r10
     bb8:	4a 85       	ldd	r20, Y+10	; 0x0a
     bba:	5b 85       	ldd	r21, Y+11	; 0x0b
     bbc:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__udivmodsi4>
     bc0:	59 01       	movw	r10, r18
     bc2:	6a 01       	movw	r12, r20
        LMX2531_WRITE( MAKE_R4(ICP_1X, TOC_DISABLED) );
#ifdef DEBUG_REGS
        LMX2531_WRITE(tmp_r3 = MAKE_R3((VCO_MAX > DIVIDER_MAX_FREQ), FDM_FRACTIONAL, DITHER_STRONG, FRAC_ORDER_4, FOLD_DISABLED, den >> 12) );
        LMX2531_WRITE(tmp_r2 = MAKE_R2(den & 0xFFF, r) );
    }
    LMX2531_WRITE(tmp_r1 = MAKE_R1(ICP_1X, n >> 8, num >> 12) );
     bc4:	a4 01       	movw	r20, r8
     bc6:	93 01       	movw	r18, r6
     bc8:	9c e0       	ldi	r25, 0x0C	; 12
     bca:	56 95       	lsr	r21
     bcc:	47 95       	ror	r20
     bce:	37 95       	ror	r19
     bd0:	27 95       	ror	r18
     bd2:	9a 95       	dec	r25
     bd4:	d1 f7       	brne	.-12     	; 0xbca <SetLMX2531+0x2b6>
     bd6:	8b 2d       	mov	r24, r11
     bd8:	99 27       	eor	r25, r25
     bda:	80 68       	ori	r24, 0x80	; 128
     bdc:	a0 e0       	ldi	r26, 0x00	; 0
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	0a e0       	ldi	r16, 0x0A	; 10
     be2:	88 0f       	add	r24, r24
     be4:	99 1f       	adc	r25, r25
     be6:	aa 1f       	adc	r26, r26
     be8:	bb 1f       	adc	r27, r27
     bea:	0a 95       	dec	r16
     bec:	d1 f7       	brne	.-12     	; 0xbe2 <SetLMX2531+0x2ce>
     bee:	28 2b       	or	r18, r24
     bf0:	39 2b       	or	r19, r25
     bf2:	4a 2b       	or	r20, r26
     bf4:	5b 2b       	or	r21, r27
     bf6:	14 e0       	ldi	r17, 0x04	; 4
     bf8:	22 0f       	add	r18, r18
     bfa:	33 1f       	adc	r19, r19
     bfc:	44 1f       	adc	r20, r20
     bfe:	55 1f       	adc	r21, r21
     c00:	1a 95       	dec	r17
     c02:	d1 f7       	brne	.-12     	; 0xbf8 <SetLMX2531+0x2e4>
     c04:	21 60       	ori	r18, 0x01	; 1
     c06:	20 93 c0 01 	sts	0x01C0, r18
     c0a:	30 93 c1 01 	sts	0x01C1, r19
     c0e:	40 93 c2 01 	sts	0x01C2, r20
     c12:	50 93 c3 01 	sts	0x01C3, r21
     c16:	ca 01       	movw	r24, r20
     c18:	aa 27       	eor	r26, r26
     c1a:	bb 27       	eor	r27, r27
     c1c:	e3 2e       	mov	r14, r19
     c1e:	f4 2e       	mov	r15, r20
     c20:	05 2f       	mov	r16, r21
     c22:	11 27       	eor	r17, r17
     c24:	6e 2d       	mov	r22, r14
     c26:	42 2f       	mov	r20, r18
     c28:	11 dc       	rcall	.-2014   	; 0x44c <write_reg_LMX2531>
    LMX2531_WRITE(tmp_r0 = MAKE_R0(n & 0xFF, num & 0xFFF) );
     c2a:	a4 01       	movw	r20, r8
     c2c:	93 01       	movw	r18, r6
     c2e:	3f 70       	andi	r19, 0x0F	; 15
     c30:	40 70       	andi	r20, 0x00	; 0
     c32:	50 70       	andi	r21, 0x00	; 0
     c34:	c5 01       	movw	r24, r10
     c36:	a0 e0       	ldi	r26, 0x00	; 0
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	90 70       	andi	r25, 0x00	; 0
     c3c:	a0 70       	andi	r26, 0x00	; 0
     c3e:	b0 70       	andi	r27, 0x00	; 0
     c40:	fc e0       	ldi	r31, 0x0C	; 12
     c42:	88 0f       	add	r24, r24
     c44:	99 1f       	adc	r25, r25
     c46:	aa 1f       	adc	r26, r26
     c48:	bb 1f       	adc	r27, r27
     c4a:	fa 95       	dec	r31
     c4c:	d1 f7       	brne	.-12     	; 0xc42 <SetLMX2531+0x32e>
     c4e:	28 2b       	or	r18, r24
     c50:	39 2b       	or	r19, r25
     c52:	4a 2b       	or	r20, r26
     c54:	5b 2b       	or	r21, r27
     c56:	e4 e0       	ldi	r30, 0x04	; 4
     c58:	22 0f       	add	r18, r18
     c5a:	33 1f       	adc	r19, r19
     c5c:	44 1f       	adc	r20, r20
     c5e:	55 1f       	adc	r21, r21
     c60:	ea 95       	dec	r30
     c62:	d1 f7       	brne	.-12     	; 0xc58 <SetLMX2531+0x344>
     c64:	20 93 b6 01 	sts	0x01B6, r18
     c68:	30 93 b7 01 	sts	0x01B7, r19
     c6c:	40 93 b8 01 	sts	0x01B8, r20
     c70:	50 93 b9 01 	sts	0x01B9, r21
     c74:	ca 01       	movw	r24, r20
     c76:	aa 27       	eor	r26, r26
     c78:	bb 27       	eor	r27, r27
     c7a:	e3 2e       	mov	r14, r19
     c7c:	f4 2e       	mov	r15, r20
     c7e:	05 2f       	mov	r16, r21
     c80:	11 27       	eor	r17, r17
     c82:	6e 2d       	mov	r22, r14
     c84:	42 2f       	mov	r20, r18
     c86:	e2 db       	rcall	.-2108   	; 0x44c <write_reg_LMX2531>
    //LMX2531_WRITE( MAKE_R0(n & 0xFF, num & 0xFFF) );

    SetLMX2531_R1_R0(num, n);
#endif

    LMK_devider = i/2;
     c88:	0c 85       	ldd	r16, Y+12	; 0x0c
     c8a:	1d 85       	ldd	r17, Y+13	; 0x0d
     c8c:	16 95       	lsr	r17
     c8e:	07 95       	ror	r16
     c90:	00 93 c4 01 	sts	0x01C4, r16

#ifdef PRESENT_GPS
    GpsSync_divider = Fout / GPSSYNC_MAX_FREQ;
     c94:	60 91 29 01 	lds	r22, 0x0129
     c98:	70 91 2a 01 	lds	r23, 0x012A
     c9c:	80 91 2b 01 	lds	r24, 0x012B
     ca0:	90 91 2c 01 	lds	r25, 0x012C
     ca4:	20 ec       	ldi	r18, 0xC0	; 192
     ca6:	36 ec       	ldi	r19, 0xC6	; 198
     ca8:	4d e2       	ldi	r20, 0x2D	; 45
     caa:	50 e0       	ldi	r21, 0x00	; 0
     cac:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__udivmodsi4>
     cb0:	20 93 2e 01 	sts	0x012E, r18
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	80 2f       	mov	r24, r16
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	62 2f       	mov	r22, r18
     cbc:	70 e0       	ldi	r23, 0x00	; 0
     cbe:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <__mulhi3>
     cc2:	8f 3f       	cpi	r24, 0xFF	; 255
     cc4:	91 05       	cpc	r25, r1
     cc6:	09 f0       	breq	.+2      	; 0xcca <SetLMX2531+0x3b6>
     cc8:	18 f4       	brcc	.+6      	; 0xcd0 <SetLMX2531+0x3bc>
     cca:	31 e0       	ldi	r19, 0x01	; 1
     ccc:	01 c0       	rjmp	.+2      	; 0xcd0 <SetLMX2531+0x3bc>
     cce:	30 e0       	ldi	r19, 0x00	; 0
    if (tmp > 255)
        return 0;
#endif

    return 1;
}
     cd0:	83 2f       	mov	r24, r19
     cd2:	2d 96       	adiw	r28, 0x0d	; 13
     cd4:	0f b6       	in	r0, 0x3f	; 63
     cd6:	f8 94       	cli
     cd8:	de bf       	out	0x3e, r29	; 62
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	cd bf       	out	0x3d, r28	; 61
     cde:	cf 91       	pop	r28
     ce0:	df 91       	pop	r29
     ce2:	1f 91       	pop	r17
     ce4:	0f 91       	pop	r16
     ce6:	ff 90       	pop	r15
     ce8:	ef 90       	pop	r14
     cea:	df 90       	pop	r13
     cec:	cf 90       	pop	r12
     cee:	bf 90       	pop	r11
     cf0:	af 90       	pop	r10
     cf2:	9f 90       	pop	r9
     cf4:	8f 90       	pop	r8
     cf6:	7f 90       	pop	r7
     cf8:	6f 90       	pop	r6
     cfa:	5f 90       	pop	r5
     cfc:	4f 90       	pop	r4
     cfe:	3f 90       	pop	r3
     d00:	2f 90       	pop	r2
     d02:	08 95       	ret

00000d04 <TrimClock>:
void TrimClock(void)
{
    //TODO Add atomic read for CounterHHValue

    // Check the mesuarements are stable
    if ((CounterHHValue - LastAutoUpd > 500) && (Count1PPS > 80) && (ddd < 31) && (PPS_skipped == 0))
     d04:	80 91 9b 01 	lds	r24, 0x019B
     d08:	90 91 9c 01 	lds	r25, 0x019C
     d0c:	a0 91 9d 01 	lds	r26, 0x019D
     d10:	b0 91 9e 01 	lds	r27, 0x019E
     d14:	20 91 ab 01 	lds	r18, 0x01AB
     d18:	30 91 ac 01 	lds	r19, 0x01AC
     d1c:	40 91 ad 01 	lds	r20, 0x01AD
     d20:	50 91 ae 01 	lds	r21, 0x01AE
     d24:	82 1b       	sub	r24, r18
     d26:	93 0b       	sbc	r25, r19
     d28:	a4 0b       	sbc	r26, r20
     d2a:	b5 0b       	sbc	r27, r21
     d2c:	85 5f       	subi	r24, 0xF5	; 245
     d2e:	91 40       	sbci	r25, 0x01	; 1
     d30:	a0 40       	sbci	r26, 0x00	; 0
     d32:	b0 40       	sbci	r27, 0x00	; 0
     d34:	08 f4       	brcc	.+2      	; 0xd38 <TrimClock+0x34>
     d36:	58 c0       	rjmp	.+176    	; 0xde8 <TrimClock+0xe4>
     d38:	80 91 b4 01 	lds	r24, 0x01B4
     d3c:	90 91 b5 01 	lds	r25, 0x01B5
     d40:	81 35       	cpi	r24, 0x51	; 81
     d42:	91 05       	cpc	r25, r1
     d44:	08 f4       	brcc	.+2      	; 0xd48 <TrimClock+0x44>
     d46:	50 c0       	rjmp	.+160    	; 0xde8 <TrimClock+0xe4>
     d48:	80 91 c5 01 	lds	r24, 0x01C5
     d4c:	90 91 c6 01 	lds	r25, 0x01C6
     d50:	a0 91 c7 01 	lds	r26, 0x01C7
     d54:	b0 91 c8 01 	lds	r27, 0x01C8
     d58:	4f 97       	sbiw	r24, 0x1f	; 31
     d5a:	a1 05       	cpc	r26, r1
     d5c:	b1 05       	cpc	r27, r1
     d5e:	08 f0       	brcs	.+2      	; 0xd62 <TrimClock+0x5e>
     d60:	43 c0       	rjmp	.+134    	; 0xde8 <TrimClock+0xe4>
     d62:	80 91 bf 01 	lds	r24, 0x01BF
     d66:	88 23       	and	r24, r24
     d68:	09 f0       	breq	.+2      	; 0xd6c <TrimClock+0x68>
     d6a:	3e c0       	rjmp	.+124    	; 0xde8 <TrimClock+0xe4>
    {
        int32_t delta = (int)(FilteredVal/FILTER_EXP_ALPHA) - (int)Fout ;
        uint32_t pdelta = (delta > 0) ? delta : -delta;
        if (pdelta > 2)
     d6c:	80 91 a3 01 	lds	r24, 0x01A3
     d70:	90 91 a4 01 	lds	r25, 0x01A4
     d74:	a0 91 a5 01 	lds	r26, 0x01A5
     d78:	b0 91 a6 01 	lds	r27, 0x01A6
     d7c:	45 e0       	ldi	r20, 0x05	; 5
     d7e:	b6 95       	lsr	r27
     d80:	a7 95       	ror	r26
     d82:	97 95       	ror	r25
     d84:	87 95       	ror	r24
     d86:	4a 95       	dec	r20
     d88:	d1 f7       	brne	.-12     	; 0xd7e <TrimClock+0x7a>
     d8a:	20 91 29 01 	lds	r18, 0x0129
     d8e:	30 91 2a 01 	lds	r19, 0x012A
     d92:	82 1b       	sub	r24, r18
     d94:	93 0b       	sbc	r25, r19
     d96:	9c 01       	movw	r18, r24
     d98:	44 27       	eor	r20, r20
     d9a:	37 fd       	sbrc	r19, 7
     d9c:	40 95       	com	r20
     d9e:	54 2f       	mov	r21, r20
     da0:	57 ff       	sbrs	r21, 7
     da2:	07 c0       	rjmp	.+14     	; 0xdb2 <TrimClock+0xae>
     da4:	50 95       	com	r21
     da6:	40 95       	com	r20
     da8:	30 95       	com	r19
     daa:	21 95       	neg	r18
     dac:	3f 4f       	sbci	r19, 0xFF	; 255
     dae:	4f 4f       	sbci	r20, 0xFF	; 255
     db0:	5f 4f       	sbci	r21, 0xFF	; 255
     db2:	23 30       	cpi	r18, 0x03	; 3
     db4:	31 05       	cpc	r19, r1
     db6:	41 05       	cpc	r20, r1
     db8:	51 05       	cpc	r21, r1
     dba:	b0 f0       	brcs	.+44     	; 0xde8 <TrimClock+0xe4>
        {
            UpdateOSCValue();
     dbc:	91 dc       	rcall	.-1758   	; 0x6e0 <UpdateOSCValue>

            PPS_skipped = RESET_OCP_COUNTER;
     dbe:	80 e8       	ldi	r24, 0x80	; 128
     dc0:	80 93 bf 01 	sts	0x01BF, r24

            LastAutoUpd = CounterHHValue;
     dc4:	80 91 9b 01 	lds	r24, 0x019B
     dc8:	90 91 9c 01 	lds	r25, 0x019C
     dcc:	a0 91 9d 01 	lds	r26, 0x019D
     dd0:	b0 91 9e 01 	lds	r27, 0x019E
     dd4:	80 93 ab 01 	sts	0x01AB, r24
     dd8:	90 93 ac 01 	sts	0x01AC, r25
     ddc:	a0 93 ad 01 	sts	0x01AD, r26
     de0:	b0 93 ae 01 	sts	0x01AE, r27

            SetLMX2531(1);
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	96 cd       	rjmp	.-1236   	; 0x914 <SetLMX2531>
     de8:	08 95       	ret

00000dea <TamerControlAux>:
}

void TamerControlAux(void)
{
#ifdef PRESENT_GPS
    if (AutoUpdateGps)
     dea:	80 91 af 01 	lds	r24, 0x01AF
     dee:	88 23       	and	r24, r24
     df0:	09 f0       	breq	.+2      	; 0xdf4 <TamerControlAux+0xa>
        TrimClock();
     df2:	88 cf       	rjmp	.-240    	; 0xd04 <TrimClock>
     df4:	08 95       	ret

00000df6 <InitLMX2531>:
}

void InitLMX2531(void)
{
    // Enable LMX2531
    LmxCeSet();
     df6:	5d 9a       	sbi	0x0b, 5	; 11
     df8:	84 ef       	ldi	r24, 0xF4	; 244
     dfa:	91 e0       	ldi	r25, 0x01	; 1
     dfc:	28 ec       	ldi	r18, 0xC8	; 200
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	f9 01       	movw	r30, r18
     e02:	31 97       	sbiw	r30, 0x01	; 1
     e04:	f1 f7       	brne	.-4      	; 0xe02 <InitLMX2531+0xc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e06:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e08:	d9 f7       	brne	.-10     	; 0xe00 <InitLMX2531+0xa>

    _delay_ms(50);

    LMX2531_WRITE(LMX2531_R5_INIT1);
     e0a:	84 e8       	ldi	r24, 0x84	; 132
     e0c:	60 e0       	ldi	r22, 0x00	; 0
     e0e:	45 e0       	ldi	r20, 0x05	; 5
     e10:	1d db       	rcall	.-2502   	; 0x44c <write_reg_LMX2531>
    LMX2531_WRITE(LMX2531_R5_INIT2);
     e12:	80 e8       	ldi	r24, 0x80	; 128
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	45 e0       	ldi	r20, 0x05	; 5
     e18:	19 db       	rcall	.-2510   	; 0x44c <write_reg_LMX2531>
    LMX2531_WRITE(LMX2531_R5_INIT3);
     e1a:	80 e8       	ldi	r24, 0x80	; 128
     e1c:	67 e0       	ldi	r22, 0x07	; 7
     e1e:	45 ef       	ldi	r20, 0xF5	; 245
     e20:	15 db       	rcall	.-2518   	; 0x44c <write_reg_LMX2531>
     e22:	80 e2       	ldi	r24, 0x20	; 32
     e24:	9e e4       	ldi	r25, 0x4E	; 78
     e26:	01 97       	sbiw	r24, 0x01	; 1
     e28:	f1 f7       	brne	.-4      	; 0xe26 <InitLMX2531+0x30>

    _delay_ms(10);

    LMX2531_WRITE(LMX2531_R12_INIT);
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	64 e0       	ldi	r22, 0x04	; 4
     e2e:	4c e8       	ldi	r20, 0x8C	; 140
     e30:	0d db       	rcall	.-2534   	; 0x44c <write_reg_LMX2531>
    LMX2531_WRITE(LMX2531_R9_INIT);
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	6b e0       	ldi	r22, 0x0B	; 11
     e36:	49 ea       	ldi	r20, 0xA9	; 169
}
     e38:	09 cb       	rjmp	.-2542   	; 0x44c <write_reg_LMX2531>

00000e3a <FillHead>:
        Buffer_StoreElement(&USARTtoUSB_Buffer, byte);
    }
}

static void FillHead(uint8_t* res, uint8_t idx)
{
     e3a:	cf 93       	push	r28
     e3c:	df 93       	push	r29
     e3e:	fc 01       	movw	r30, r24
    uint8_t byte;
    uint8_t i;

    if (idx > 0xf0)
     e40:	61 3f       	cpi	r22, 0xF1	; 241
     e42:	20 f0       	brcs	.+8      	; 0xe4c <FillHead+0x12>
    {
        Buffer_StoreElement(&USARTtoUSB_Buffer, '?');
     e44:	81 e3       	ldi	r24, 0x31	; 49
     e46:	91 e0       	ldi	r25, 0x01	; 1
     e48:	6f e3       	ldi	r22, 0x3F	; 63
     e4a:	18 c0       	rjmp	.+48     	; 0xe7c <FillHead+0x42>
    }
    else
    {
        res = res + 3*idx;
     e4c:	86 2f       	mov	r24, r22
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	63 e0       	ldi	r22, 0x03	; 3
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	6f d7       	rcall	.+3806   	; 0x1d34 <__mulhi3>
     e56:	e8 0f       	add	r30, r24
     e58:	f9 1f       	adc	r31, r25
        for (i = 0; i < 3; i++)
        {
            byte = pgm_read_byte(res++);
     e5a:	ef 01       	movw	r28, r30
     e5c:	21 96       	adiw	r28, 0x01	; 1
     e5e:	e4 91       	lpm	r30, Z+
            Buffer_StoreElement(&USARTtoUSB_Buffer, byte);
     e60:	81 e3       	ldi	r24, 0x31	; 49
     e62:	91 e0       	ldi	r25, 0x01	; 1
     e64:	6e 2f       	mov	r22, r30
     e66:	a7 d4       	rcall	.+2382   	; 0x17b6 <Buffer_StoreElement>
    else
    {
        res = res + 3*idx;
        for (i = 0; i < 3; i++)
        {
            byte = pgm_read_byte(res++);
     e68:	fe 01       	movw	r30, r28
     e6a:	64 91       	lpm	r22, Z+
            Buffer_StoreElement(&USARTtoUSB_Buffer, byte);
     e6c:	81 e3       	ldi	r24, 0x31	; 49
     e6e:	91 e0       	ldi	r25, 0x01	; 1
     e70:	a2 d4       	rcall	.+2372   	; 0x17b6 <Buffer_StoreElement>
    else
    {
        res = res + 3*idx;
        for (i = 0; i < 3; i++)
        {
            byte = pgm_read_byte(res++);
     e72:	21 96       	adiw	r28, 0x01	; 1
     e74:	fe 01       	movw	r30, r28
     e76:	64 91       	lpm	r22, Z+
            Buffer_StoreElement(&USARTtoUSB_Buffer, byte);
     e78:	81 e3       	ldi	r24, 0x31	; 49
     e7a:	91 e0       	ldi	r25, 0x01	; 1
     e7c:	9c d4       	rcall	.+2360   	; 0x17b6 <Buffer_StoreElement>
        }
    }
}
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	08 95       	ret

00000e84 <FillCmd>:
extern uint8_t pTrg[];
extern uint8_t pDet[];

static void FillCmd(void)
{
    if (command.cmd > 0)
     e84:	60 91 c9 01 	lds	r22, 0x01C9
     e88:	66 23       	and	r22, r22
     e8a:	21 f0       	breq	.+8      	; 0xe94 <FillCmd+0x10>
        FillHead(pCmd, command.cmd - 1);
     e8c:	61 50       	subi	r22, 0x01	; 1
     e8e:	8f e0       	ldi	r24, 0x0F	; 15
     e90:	91 e0       	ldi	r25, 0x01	; 1
     e92:	d3 df       	rcall	.-90     	; 0xe3a <FillHead>
    Buffer_StoreElement(&USARTtoUSB_Buffer, ',');
     e94:	81 e3       	ldi	r24, 0x31	; 49
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	6c e2       	ldi	r22, 0x2C	; 44
     e9a:	8d d4       	rcall	.+2330   	; 0x17b6 <Buffer_StoreElement>
    if (command.type > 0)
     e9c:	60 91 ca 01 	lds	r22, 0x01CA
     ea0:	66 23       	and	r22, r22
     ea2:	21 f0       	breq	.+8      	; 0xeac <FillCmd+0x28>
        FillHead(pTrg, command.type - 1);
     ea4:	61 50       	subi	r22, 0x01	; 1
     ea6:	81 e3       	ldi	r24, 0x31	; 49
     ea8:	91 e0       	ldi	r25, 0x01	; 1
     eaa:	c7 df       	rcall	.-114    	; 0xe3a <FillHead>
    Buffer_StoreElement(&USARTtoUSB_Buffer, ',');
     eac:	81 e3       	ldi	r24, 0x31	; 49
     eae:	91 e0       	ldi	r25, 0x01	; 1
     eb0:	6c e2       	ldi	r22, 0x2C	; 44
     eb2:	81 d4       	rcall	.+2306   	; 0x17b6 <Buffer_StoreElement>
    if (command.details > 0)
     eb4:	60 91 cb 01 	lds	r22, 0x01CB
     eb8:	66 23       	and	r22, r22
     eba:	21 f0       	breq	.+8      	; 0xec4 <FillCmd+0x40>
        FillHead(pDet, command.details - 1);
     ebc:	61 50       	subi	r22, 0x01	; 1
     ebe:	87 e4       	ldi	r24, 0x47	; 71
     ec0:	91 e0       	ldi	r25, 0x01	; 1
     ec2:	bb df       	rcall	.-138    	; 0xe3a <FillHead>
    Buffer_StoreElement(&USARTtoUSB_Buffer, ',');
     ec4:	81 e3       	ldi	r24, 0x31	; 49
     ec6:	91 e0       	ldi	r25, 0x01	; 1
     ec8:	6c e2       	ldi	r22, 0x2C	; 44
}
     eca:	75 c4       	rjmp	.+2282   	; 0x17b6 <Buffer_StoreElement>

00000ecc <FillUint32>:

static void FillUint32(uint32_t val)
{
     ecc:	6f 92       	push	r6
     ece:	7f 92       	push	r7
     ed0:	8f 92       	push	r8
     ed2:	9f 92       	push	r9
     ed4:	af 92       	push	r10
     ed6:	bf 92       	push	r11
     ed8:	cf 92       	push	r12
     eda:	df 92       	push	r13
     edc:	ef 92       	push	r14
     ede:	ff 92       	push	r15
     ee0:	0f 93       	push	r16
     ee2:	1f 93       	push	r17
     ee4:	cf 93       	push	r28
     ee6:	df 93       	push	r29
     ee8:	3b 01       	movw	r6, r22
     eea:	4c 01       	movw	r8, r24
     eec:	a1 2c       	mov	r10, r1
     eee:	5a ec       	ldi	r21, 0xCA	; 202
     ef0:	b5 2e       	mov	r11, r21
     ef2:	5a e9       	ldi	r21, 0x9A	; 154
     ef4:	c5 2e       	mov	r12, r21
     ef6:	5b e3       	ldi	r21, 0x3B	; 59
     ef8:	d5 2e       	mov	r13, r21
     efa:	c0 e0       	ldi	r28, 0x00	; 0
     efc:	d0 e0       	ldi	r29, 0x00	; 0
    uint32_t stv = 1000000000;
    uint8_t f = 0;

    for (;stv > 0; stv/=10)
    {
        uint8_t v = val / stv;
     efe:	c4 01       	movw	r24, r8
     f00:	b3 01       	movw	r22, r6
     f02:	a6 01       	movw	r20, r12
     f04:	95 01       	movw	r18, r10
     f06:	55 d7       	rcall	.+3754   	; 0x1db2 <__udivmodsi4>
     f08:	e2 2e       	mov	r14, r18
       // if ((f) || (v > 0))
        {
            f = 1;
            Buffer_StoreElement(&USARTtoUSB_Buffer, '0' + v);
     f0a:	62 2f       	mov	r22, r18
     f0c:	60 5d       	subi	r22, 0xD0	; 208
     f0e:	81 e3       	ldi	r24, 0x31	; 49
     f10:	91 e0       	ldi	r25, 0x01	; 1
     f12:	51 d4       	rcall	.+2210   	; 0x17b6 <Buffer_StoreElement>
        }
        val -= v*stv;
     f14:	ff 24       	eor	r15, r15
     f16:	00 e0       	ldi	r16, 0x00	; 0
     f18:	10 e0       	ldi	r17, 0x00	; 0
     f1a:	c8 01       	movw	r24, r16
     f1c:	b7 01       	movw	r22, r14
     f1e:	a6 01       	movw	r20, r12
     f20:	95 01       	movw	r18, r10
     f22:	1a d7       	rcall	.+3636   	; 0x1d58 <__mulsi3>
     f24:	66 1a       	sub	r6, r22
     f26:	77 0a       	sbc	r7, r23
     f28:	88 0a       	sbc	r8, r24
     f2a:	99 0a       	sbc	r9, r25
static void FillUint32(uint32_t val)
{
    uint32_t stv = 1000000000;
    uint8_t f = 0;

    for (;stv > 0; stv/=10)
     f2c:	c6 01       	movw	r24, r12
     f2e:	b5 01       	movw	r22, r10
     f30:	2a e0       	ldi	r18, 0x0A	; 10
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	40 e0       	ldi	r20, 0x00	; 0
     f36:	50 e0       	ldi	r21, 0x00	; 0
     f38:	3c d7       	rcall	.+3704   	; 0x1db2 <__udivmodsi4>
     f3a:	c9 01       	movw	r24, r18
     f3c:	da 01       	movw	r26, r20
     f3e:	5c 01       	movw	r10, r24
     f40:	6d 01       	movw	r12, r26
     f42:	21 96       	adiw	r28, 0x01	; 1
     f44:	ca 30       	cpi	r28, 0x0A	; 10
     f46:	d1 05       	cpc	r29, r1
     f48:	d1 f6       	brne	.-76     	; 0xefe <FillUint32+0x32>
        }
        val -= v*stv;
    }
    if (f == 0)
        Buffer_StoreElement(&USARTtoUSB_Buffer, '0');
}
     f4a:	df 91       	pop	r29
     f4c:	cf 91       	pop	r28
     f4e:	1f 91       	pop	r17
     f50:	0f 91       	pop	r16
     f52:	ff 90       	pop	r15
     f54:	ef 90       	pop	r14
     f56:	df 90       	pop	r13
     f58:	cf 90       	pop	r12
     f5a:	bf 90       	pop	r11
     f5c:	af 90       	pop	r10
     f5e:	9f 90       	pop	r9
     f60:	8f 90       	pop	r8
     f62:	7f 90       	pop	r7
     f64:	6f 90       	pop	r6
     f66:	08 95       	ret

00000f68 <FillResultNoNewLinePM>:
    FillResultNoNewLinePM(res);
    FillResultNoNewLinePM(newLine);
}

void FillResultNoNewLinePM(uint8_t* res)
{
     f68:	cf 93       	push	r28
     f6a:	df 93       	push	r29
     f6c:	ec 01       	movw	r28, r24
     f6e:	03 c0       	rjmp	.+6      	; 0xf76 <FillResultNoNewLinePM+0xe>
    uint8_t byte;
    while ((byte = pgm_read_byte(res++)))
    {
        Buffer_StoreElement(&USARTtoUSB_Buffer, byte);
     f70:	81 e3       	ldi	r24, 0x31	; 49
     f72:	91 e0       	ldi	r25, 0x01	; 1
     f74:	20 d4       	rcall	.+2112   	; 0x17b6 <Buffer_StoreElement>
     f76:	fe 01       	movw	r30, r28
}

void FillResultNoNewLinePM(uint8_t* res)
{
    uint8_t byte;
    while ((byte = pgm_read_byte(res++)))
     f78:	21 96       	adiw	r28, 0x01	; 1
     f7a:	64 91       	lpm	r22, Z+
     f7c:	66 23       	and	r22, r22
     f7e:	c1 f7       	brne	.-16     	; 0xf70 <FillResultNoNewLinePM+0x8>
    {
        Buffer_StoreElement(&USARTtoUSB_Buffer, byte);
    }
}
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	08 95       	ret

00000f86 <FillResultPM>:

void FillResultNoNewLinePM(uint8_t* res);

void FillResultPM(uint8_t* res)
{
    FillResultNoNewLinePM(res);
     f86:	f0 df       	rcall	.-32     	; 0xf68 <FillResultNoNewLinePM>
    FillResultNoNewLinePM(newLine);
     f88:	8f ed       	ldi	r24, 0xDF	; 223
     f8a:	90 e0       	ldi	r25, 0x00	; 0
}
     f8c:	ed cf       	rjmp	.-38     	; 0xf68 <FillResultNoNewLinePM>

00000f8e <LoadEEPROM>:

uint8_t  eeEnableOscillator  EEMEM = 1;

static void LoadEEPROM(void)
{
    Fosc = eeprom_read_dword(&eeFosc);
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	54 d7       	rcall	.+3752   	; 0x1e3c <__eerd_dword_m32u2>
     f94:	60 93 25 01 	sts	0x0125, r22
     f98:	70 93 26 01 	sts	0x0126, r23
     f9c:	80 93 27 01 	sts	0x0127, r24
     fa0:	90 93 28 01 	sts	0x0128, r25
    Fout = eeprom_read_dword(&eeFout);
     fa4:	84 e0       	ldi	r24, 0x04	; 4
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	49 d7       	rcall	.+3730   	; 0x1e3c <__eerd_dword_m32u2>
     faa:	60 93 29 01 	sts	0x0129, r22
     fae:	70 93 2a 01 	sts	0x012A, r23
     fb2:	80 93 2b 01 	sts	0x012B, r24
     fb6:	90 93 2c 01 	sts	0x012C, r25
    VCO_MIN = eeprom_read_word(&eeVCO_MIN);
    VCO_MAX = eeprom_read_word(&eeVCO_MAX);
    VCO_Kbit = eeprom_read_word(&eeVCO_Kbit);
#endif

    LMK_OutMask = eeprom_read_byte(&eeLMK_OutMask);
     fba:	8e e0       	ldi	r24, 0x0E	; 14
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	36 d7       	rcall	.+3692   	; 0x1e2c <__eerd_byte_m32u2>
     fc0:	80 93 2d 01 	sts	0x012D, r24
    AutoFreq = eeprom_read_byte(&eeAutoFreq);
     fc4:	8f e0       	ldi	r24, 0x0F	; 15
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	31 d7       	rcall	.+3682   	; 0x1e2c <__eerd_byte_m32u2>
     fca:	80 93 ba 01 	sts	0x01BA, r24
#ifdef PRESENT_DAC12
    DacValue = eeprom_read_word(&eeDacValue);
#endif

#ifdef PRESENT_GPS
    AutoUpdateGps = eeprom_read_byte(&eeAutoGPSSync);
     fce:	82 e1       	ldi	r24, 0x12	; 18
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	2c d7       	rcall	.+3672   	; 0x1e2c <__eerd_byte_m32u2>
     fd4:	80 93 af 01 	sts	0x01AF, r24
#endif

#if TAMER_VER >= 12
    EnableOscillator = eeprom_read_byte(&eeEnableOscillator);
     fd8:	83 e1       	ldi	r24, 0x13	; 19
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	27 d7       	rcall	.+3662   	; 0x1e2c <__eerd_byte_m32u2>
     fde:	80 93 2f 01 	sts	0x012F, r24
#endif
}
     fe2:	08 95       	ret

00000fe4 <AutoStartControl>:
    DacSyncInit();
    DacSyncSet();
#endif

#ifdef PRESENT_GPS
    InitCounters();
     fe4:	40 da       	rcall	.-2944   	; 0x466 <InitCounters>
#endif



    AutoFreq = eeprom_read_byte(&eeAutoFreq);
     fe6:	8f e0       	ldi	r24, 0x0F	; 15
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	20 d7       	rcall	.+3648   	; 0x1e2c <__eerd_byte_m32u2>
     fec:	80 93 ba 01 	sts	0x01BA, r24
    if (AutoFreq)
     ff0:	88 23       	and	r24, r24
     ff2:	91 f0       	breq	.+36     	; 0x1018 <AutoStartControl+0x34>
    {
        LoadEEPROM();
     ff4:	cc df       	rcall	.-104    	; 0xf8e <LoadEEPROM>

#if TAMER_VER >= 12
        SetOscillator();
     ff6:	15 dc       	rcall	.-2006   	; 0x822 <SetOscillator>
#endif

        InitLMX2531();
     ff8:	fe de       	rcall	.-516    	; 0xdf6 <InitLMX2531>

        InitLMK();
     ffa:	7d dc       	rcall	.-1798   	; 0x8f6 <InitLMK>
     ffc:	84 ef       	ldi	r24, 0xF4	; 244
     ffe:	91 e0       	ldi	r25, 0x01	; 1
    1000:	28 ec       	ldi	r18, 0xC8	; 200
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	f9 01       	movw	r30, r18
    1006:	31 97       	sbiw	r30, 0x01	; 1
    1008:	f1 f7       	brne	.-4      	; 0x1006 <AutoStartControl+0x22>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    100a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    100c:	d9 f7       	brne	.-10     	; 0x1004 <AutoStartControl+0x20>

        _delay_ms(50);

        if (SetLMX2531(0))
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	81 dc       	rcall	.-1790   	; 0x914 <SetLMX2531>
    1012:	88 23       	and	r24, r24
    1014:	11 f0       	breq	.+4      	; 0x101a <AutoStartControl+0x36>
        {
            SetLMK();
    1016:	08 cc       	rjmp	.-2032   	; 0x828 <SetLMK>
        }
    }
#if TAMER_VER >= 12
    else
        SetOscillator();
    1018:	04 cc       	rjmp	.-2040   	; 0x822 <SetOscillator>
    101a:	08 95       	ret

0000101c <ProcessCommand>:
    return 0;
}
#endif

uint8_t ProcessCommand(void)
{
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
    switch(command.cmd)
    1020:	80 91 c9 01 	lds	r24, 0x01C9
    1024:	86 30       	cpi	r24, 0x06	; 6
    1026:	09 f4       	brne	.+2      	; 0x102a <ProcessCommand+0xe>
    1028:	db c0       	rjmp	.+438    	; 0x11e0 <ProcessCommand+0x1c4>
    102a:	87 30       	cpi	r24, 0x07	; 7
    102c:	58 f4       	brcc	.+22     	; 0x1044 <ProcessCommand+0x28>
    102e:	81 30       	cpi	r24, 0x01	; 1
    1030:	e1 f0       	breq	.+56     	; 0x106a <ProcessCommand+0x4e>
    1032:	81 30       	cpi	r24, 0x01	; 1
    1034:	08 f4       	brcc	.+2      	; 0x1038 <ProcessCommand+0x1c>
    1036:	e0 c1       	rjmp	.+960    	; 0x13f8 <ProcessCommand+0x3dc>
    1038:	82 30       	cpi	r24, 0x02	; 2
    103a:	89 f1       	breq	.+98     	; 0x109e <ProcessCommand+0x82>
    103c:	83 30       	cpi	r24, 0x03	; 3
    103e:	09 f0       	breq	.+2      	; 0x1042 <ProcessCommand+0x26>
    1040:	33 c2       	rjmp	.+1126   	; 0x14a8 <ProcessCommand+0x48c>
    1042:	5a c0       	rjmp	.+180    	; 0x10f8 <ProcessCommand+0xdc>
    1044:	89 30       	cpi	r24, 0x09	; 9
    1046:	09 f4       	brne	.+2      	; 0x104a <ProcessCommand+0x2e>
    1048:	e9 c1       	rjmp	.+978    	; 0x141c <ProcessCommand+0x400>
    104a:	8a 30       	cpi	r24, 0x0A	; 10
    104c:	38 f4       	brcc	.+14     	; 0x105c <ProcessCommand+0x40>
    104e:	87 30       	cpi	r24, 0x07	; 7
    1050:	09 f4       	brne	.+2      	; 0x1054 <ProcessCommand+0x38>
    1052:	f7 c1       	rjmp	.+1006   	; 0x1442 <ProcessCommand+0x426>
    1054:	88 30       	cpi	r24, 0x08	; 8
    1056:	09 f0       	breq	.+2      	; 0x105a <ProcessCommand+0x3e>
    1058:	27 c2       	rjmp	.+1102   	; 0x14a8 <ProcessCommand+0x48c>
    105a:	e3 c1       	rjmp	.+966    	; 0x1422 <ProcessCommand+0x406>
    105c:	8a 30       	cpi	r24, 0x0A	; 10
    105e:	09 f4       	brne	.+2      	; 0x1062 <ProcessCommand+0x46>
    1060:	f3 c1       	rjmp	.+998    	; 0x1448 <ProcessCommand+0x42c>
    1062:	8b 30       	cpi	r24, 0x0B	; 11
    1064:	09 f0       	breq	.+2      	; 0x1068 <ProcessCommand+0x4c>
    1066:	20 c2       	rjmp	.+1088   	; 0x14a8 <ProcessCommand+0x48c>
    1068:	f1 c1       	rjmp	.+994    	; 0x144c <ProcessCommand+0x430>

#ifndef NO_CMDREG
        case cmdREGISTER:
        {

            switch (command.type)
    106a:	80 91 ca 01 	lds	r24, 0x01CA
    106e:	81 30       	cpi	r24, 0x01	; 1
    1070:	21 f0       	breq	.+8      	; 0x107a <ProcessCommand+0x5e>
    1072:	82 30       	cpi	r24, 0x02	; 2
    1074:	09 f0       	breq	.+2      	; 0x1078 <ProcessCommand+0x5c>
    1076:	18 c2       	rjmp	.+1072   	; 0x14a8 <ProcessCommand+0x48c>
    1078:	0a c0       	rjmp	.+20     	; 0x108e <ProcessCommand+0x72>
            {
                case trgLMK:
                    write_reg_LMK0X0XX(command.data[3], command.data[2], command.data[1], command.data[0]);
    107a:	80 91 cf 01 	lds	r24, 0x01CF
    107e:	60 91 ce 01 	lds	r22, 0x01CE
    1082:	40 91 cd 01 	lds	r20, 0x01CD
    1086:	20 91 cc 01 	lds	r18, 0x01CC
    108a:	ce d9       	rcall	.-3172   	; 0x428 <write_reg_LMK0X0XX>
    108c:	09 c2       	rjmp	.+1042   	; 0x14a0 <ProcessCommand+0x484>
                    FillResultPM(resOk);
                    return 1;

                case trgLMX:
                    write_reg_LMX2531(command.data[2], command.data[1], command.data[0]);
    108e:	80 91 ce 01 	lds	r24, 0x01CE
    1092:	60 91 cd 01 	lds	r22, 0x01CD
    1096:	40 91 cc 01 	lds	r20, 0x01CC
    109a:	d8 d9       	rcall	.-3152   	; 0x44c <write_reg_LMX2531>
    109c:	01 c2       	rjmp	.+1026   	; 0x14a0 <ProcessCommand+0x484>
        }
#endif
#ifndef NO_CMDPIN
        case cmdPIN:
        {
            switch (command.type)
    109e:	80 91 ca 01 	lds	r24, 0x01CA
    10a2:	82 30       	cpi	r24, 0x02	; 2
    10a4:	a1 f0       	breq	.+40     	; 0x10ce <ProcessCommand+0xb2>
    10a6:	84 30       	cpi	r24, 0x04	; 4
    10a8:	f9 f0       	breq	.+62     	; 0x10e8 <ProcessCommand+0xcc>
    10aa:	81 30       	cpi	r24, 0x01	; 1
    10ac:	09 f0       	breq	.+2      	; 0x10b0 <ProcessCommand+0x94>
    10ae:	fc c1       	rjmp	.+1016   	; 0x14a8 <ProcessCommand+0x48c>
            {
                case trgLMK:
                {
                    switch (command.details)
    10b0:	80 91 cb 01 	lds	r24, 0x01CB
    10b4:	82 30       	cpi	r24, 0x02	; 2
    10b6:	19 f0       	breq	.+6      	; 0x10be <ProcessCommand+0xa2>
    10b8:	83 30       	cpi	r24, 0x03	; 3
    10ba:	09 f0       	breq	.+2      	; 0x10be <ProcessCommand+0xa2>
    10bc:	f5 c1       	rjmp	.+1002   	; 0x14a8 <ProcessCommand+0x48c>
                                LmkGoeSet();
                            else
                                LmkGoeClear();
                            break;
                        case detSYN:
                            if (command.data[0])
    10be:	80 91 cc 01 	lds	r24, 0x01CC
    10c2:	88 23       	and	r24, r24
    10c4:	11 f0       	breq	.+4      	; 0x10ca <ProcessCommand+0xae>
                                LmkGoeSet();
    10c6:	46 9a       	sbi	0x08, 6	; 8
    10c8:	eb c1       	rjmp	.+982    	; 0x14a0 <ProcessCommand+0x484>
                            else
                                LmkGoeClear();
    10ca:	46 98       	cbi	0x08, 6	; 8
    10cc:	e9 c1       	rjmp	.+978    	; 0x14a0 <ProcessCommand+0x484>
                    FillResultPM(resOk);
                    return 1;
                }
                case trgLMX:
                {
                    switch (command.details)
    10ce:	80 91 cb 01 	lds	r24, 0x01CB
    10d2:	81 30       	cpi	r24, 0x01	; 1
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <ProcessCommand+0xbc>
    10d6:	e8 c1       	rjmp	.+976    	; 0x14a8 <ProcessCommand+0x48c>
                    {
                        case detEN:
                            if (command.data[0])
    10d8:	80 91 cc 01 	lds	r24, 0x01CC
    10dc:	88 23       	and	r24, r24
    10de:	11 f0       	breq	.+4      	; 0x10e4 <ProcessCommand+0xc8>
                                LmxCeSet();
    10e0:	5d 9a       	sbi	0x0b, 5	; 11
    10e2:	de c1       	rjmp	.+956    	; 0x14a0 <ProcessCommand+0x484>
                            else
                                LmxCeClear();
    10e4:	5d 98       	cbi	0x0b, 5	; 11
    10e6:	dc c1       	rjmp	.+952    	; 0x14a0 <ProcessCommand+0x484>
                    return 1;
                }

                case trgLED:
                {
                    if (command.data[0])
    10e8:	80 91 cc 01 	lds	r24, 0x01CC
    10ec:	88 23       	and	r24, r24
    10ee:	11 f0       	breq	.+4      	; 0x10f4 <ProcessCommand+0xd8>
                        LedSet();
    10f0:	2d 9a       	sbi	0x05, 5	; 5
    10f2:	d6 c1       	rjmp	.+940    	; 0x14a0 <ProcessCommand+0x484>
                    else
                        LedClear();
    10f4:	2d 98       	cbi	0x05, 5	; 5
    10f6:	d4 c1       	rjmp	.+936    	; 0x14a0 <ProcessCommand+0x484>
        }
#endif

        case cmdSET:
        {
            switch (command.type)
    10f8:	80 91 ca 01 	lds	r24, 0x01CA
    10fc:	81 30       	cpi	r24, 0x01	; 1
    10fe:	09 f4       	brne	.+2      	; 0x1102 <ProcessCommand+0xe6>
    1100:	55 c0       	rjmp	.+170    	; 0x11ac <ProcessCommand+0x190>
    1102:	81 30       	cpi	r24, 0x01	; 1
    1104:	38 f0       	brcs	.+14     	; 0x1114 <ProcessCommand+0xf8>
    1106:	86 30       	cpi	r24, 0x06	; 6
    1108:	09 f4       	brne	.+2      	; 0x110c <ProcessCommand+0xf0>
    110a:	5b c0       	rjmp	.+182    	; 0x11c2 <ProcessCommand+0x1a6>
    110c:	87 30       	cpi	r24, 0x07	; 7
    110e:	09 f0       	breq	.+2      	; 0x1112 <ProcessCommand+0xf6>
    1110:	cb c1       	rjmp	.+918    	; 0x14a8 <ProcessCommand+0x48c>
    1112:	3c c0       	rjmp	.+120    	; 0x118c <ProcessCommand+0x170>
            {
                case trgNONE:
                {
                    switch (command.details)
    1114:	80 91 cb 01 	lds	r24, 0x01CB
    1118:	84 30       	cpi	r24, 0x04	; 4
    111a:	e1 f0       	breq	.+56     	; 0x1154 <ProcessCommand+0x138>
    111c:	85 30       	cpi	r24, 0x05	; 5
    111e:	18 f4       	brcc	.+6      	; 0x1126 <ProcessCommand+0x10a>
    1120:	88 23       	and	r24, r24
    1122:	69 f1       	breq	.+90     	; 0x117e <ProcessCommand+0x162>
    1124:	c1 c1       	rjmp	.+898    	; 0x14a8 <ProcessCommand+0x48c>
    1126:	85 30       	cpi	r24, 0x05	; 5
    1128:	21 f0       	breq	.+8      	; 0x1132 <ProcessCommand+0x116>
    112a:	8b 30       	cpi	r24, 0x0B	; 11
    112c:	09 f0       	breq	.+2      	; 0x1130 <ProcessCommand+0x114>
    112e:	bc c1       	rjmp	.+888    	; 0x14a8 <ProcessCommand+0x48c>
    1130:	22 c0       	rjmp	.+68     	; 0x1176 <ProcessCommand+0x15a>
                    {
                        case trgNONE:
                            break;
                        case detOUT:
                            Fout = command.u32data;
    1132:	80 91 cc 01 	lds	r24, 0x01CC
    1136:	90 91 cd 01 	lds	r25, 0x01CD
    113a:	a0 91 ce 01 	lds	r26, 0x01CE
    113e:	b0 91 cf 01 	lds	r27, 0x01CF
    1142:	80 93 29 01 	sts	0x0129, r24
    1146:	90 93 2a 01 	sts	0x012A, r25
    114a:	a0 93 2b 01 	sts	0x012B, r26
    114e:	b0 93 2c 01 	sts	0x012C, r27
    1152:	15 c0       	rjmp	.+42     	; 0x117e <ProcessCommand+0x162>
                            break;
                        case detOSC:
                            Fosc = command.u32data;
    1154:	80 91 cc 01 	lds	r24, 0x01CC
    1158:	90 91 cd 01 	lds	r25, 0x01CD
    115c:	a0 91 ce 01 	lds	r26, 0x01CE
    1160:	b0 91 cf 01 	lds	r27, 0x01CF
    1164:	80 93 25 01 	sts	0x0125, r24
    1168:	90 93 26 01 	sts	0x0126, r25
    116c:	a0 93 27 01 	sts	0x0127, r26
    1170:	b0 93 28 01 	sts	0x0128, r27
    1174:	04 c0       	rjmp	.+8      	; 0x117e <ProcessCommand+0x162>
                            break;
                        case detAUTO:
                            AutoFreq = command.data[0];
    1176:	80 91 cc 01 	lds	r24, 0x01CC
    117a:	80 93 ba 01 	sts	0x01BA, r24
                            break;
                        default:
                            return 0;
                    }

                    uint8_t r = SetLMX2531(0);
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	c9 db       	rcall	.-2158   	; 0x914 <SetLMX2531>
                    if (r)
    1182:	88 23       	and	r24, r24
    1184:	e1 f4       	brne	.+56     	; 0x11be <ProcessCommand+0x1a2>
                        SetLMK();
                        FillResultPM(resOk);
                    }
                    else
                    {
                        FillResultPM(resBadRange);
    1186:	8e ef       	ldi	r24, 0xFE	; 254
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	8c c1       	rjmp	.+792    	; 0x14a4 <ProcessCommand+0x488>
                    return 1;
                }
#if TAMER_VER >= 12
                case trgIOS:
                {
                    if (command.details == detEN)
    118c:	90 91 cb 01 	lds	r25, 0x01CB
    1190:	91 30       	cpi	r25, 0x01	; 1
    1192:	09 f0       	breq	.+2      	; 0x1196 <ProcessCommand+0x17a>
    1194:	89 c1       	rjmp	.+786    	; 0x14a8 <ProcessCommand+0x48c>
                    {
                        if (command.data[0])
    1196:	80 91 cc 01 	lds	r24, 0x01CC
    119a:	88 23       	and	r24, r24
    119c:	19 f0       	breq	.+6      	; 0x11a4 <ProcessCommand+0x188>
                            EnableOscillator = 1;
    119e:	90 93 2f 01 	sts	0x012F, r25
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <ProcessCommand+0x18c>
                        else
                            EnableOscillator = 0;
    11a4:	10 92 2f 01 	sts	0x012F, r1

                        SetOscillator();
    11a8:	3c db       	rcall	.-2440   	; 0x822 <SetOscillator>
    11aa:	7a c1       	rjmp	.+756    	; 0x14a0 <ProcessCommand+0x484>

                    FillResultPM(resOk);
                    return 1;

                case trgLMK:
                    switch (command.details)
    11ac:	80 91 cb 01 	lds	r24, 0x01CB
    11b0:	86 30       	cpi	r24, 0x06	; 6
    11b2:	09 f0       	breq	.+2      	; 0x11b6 <ProcessCommand+0x19a>
    11b4:	79 c1       	rjmp	.+754    	; 0x14a8 <ProcessCommand+0x48c>
                    {
                        case detPORTS:
                            LMK_OutMask = command.data[0];
    11b6:	80 91 cc 01 	lds	r24, 0x01CC
    11ba:	80 93 2d 01 	sts	0x012D, r24

                        default:
                            return 0;
                    }

                    SetLMK();
    11be:	34 db       	rcall	.-2456   	; 0x828 <SetLMK>
    11c0:	6f c1       	rjmp	.+734    	; 0x14a0 <ProcessCommand+0x484>
#endif

#ifdef PRESENT_GPS
                case trgGPS:
                {
                    switch (command.details)
    11c2:	80 91 cb 01 	lds	r24, 0x01CB
    11c6:	83 30       	cpi	r24, 0x03	; 3
    11c8:	21 f0       	breq	.+8      	; 0x11d2 <ProcessCommand+0x1b6>
    11ca:	8b 30       	cpi	r24, 0x0B	; 11
    11cc:	09 f0       	breq	.+2      	; 0x11d0 <ProcessCommand+0x1b4>
    11ce:	6c c1       	rjmp	.+728    	; 0x14a8 <ProcessCommand+0x48c>
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <ProcessCommand+0x1ba>
                    {
                        case detSYN:    UpdateOSCValue(); break;
    11d2:	86 da       	rcall	.-2804   	; 0x6e0 <UpdateOSCValue>
    11d4:	65 c1       	rjmp	.+714    	; 0x14a0 <ProcessCommand+0x484>
                        case detAUTO:   AutoUpdateGps = command.data[0]; break;
    11d6:	80 91 cc 01 	lds	r24, 0x01CC
    11da:	80 93 af 01 	sts	0x01AF, r24
    11de:	60 c1       	rjmp	.+704    	; 0x14a0 <ProcessCommand+0x484>
            return 0;
        }
#ifndef NO_CMDINFO
        case cmdINFO:
        {
            switch (command.type)
    11e0:	80 91 ca 01 	lds	r24, 0x01CA
    11e4:	85 30       	cpi	r24, 0x05	; 5
    11e6:	09 f4       	brne	.+2      	; 0x11ea <ProcessCommand+0x1ce>
    11e8:	a4 c0       	rjmp	.+328    	; 0x1332 <ProcessCommand+0x316>
    11ea:	86 30       	cpi	r24, 0x06	; 6
    11ec:	38 f4       	brcc	.+14     	; 0x11fc <ProcessCommand+0x1e0>
    11ee:	88 23       	and	r24, r24
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <ProcessCommand+0x1d8>
    11f2:	7d c0       	rjmp	.+250    	; 0x12ee <ProcessCommand+0x2d2>
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	09 f0       	breq	.+2      	; 0x11fa <ProcessCommand+0x1de>
    11f8:	57 c1       	rjmp	.+686    	; 0x14a8 <ProcessCommand+0x48c>
    11fa:	00 c1       	rjmp	.+512    	; 0x13fc <ProcessCommand+0x3e0>
    11fc:	86 30       	cpi	r24, 0x06	; 6
    11fe:	61 f0       	breq	.+24     	; 0x1218 <ProcessCommand+0x1fc>
    1200:	87 30       	cpi	r24, 0x07	; 7
    1202:	09 f0       	breq	.+2      	; 0x1206 <ProcessCommand+0x1ea>
    1204:	51 c1       	rjmp	.+674    	; 0x14a8 <ProcessCommand+0x48c>
            {
#if TAMER_VER >= 12
                case trgIOS:
                {
                    if (command.details == detEN)
    1206:	80 91 cb 01 	lds	r24, 0x01CB
    120a:	81 30       	cpi	r24, 0x01	; 1
    120c:	09 f0       	breq	.+2      	; 0x1210 <ProcessCommand+0x1f4>
    120e:	4c c1       	rjmp	.+664    	; 0x14a8 <ProcessCommand+0x48c>
                    {
                        FillCmd();  FillUint16(EnableOscillator); FillResultNoNewLinePM(newLine); return 1;
    1210:	39 de       	rcall	.-910    	; 0xe84 <FillCmd>
    1212:	60 91 2f 01 	lds	r22, 0x012F
    1216:	2b c0       	rjmp	.+86     	; 0x126e <ProcessCommand+0x252>
                }
#endif
#ifdef PRESENT_GPS
                case trgGPS:
                {
                    switch (command.details)
    1218:	80 91 cb 01 	lds	r24, 0x01CB
    121c:	8b 30       	cpi	r24, 0x0B	; 11
    121e:	09 f4       	brne	.+2      	; 0x1222 <ProcessCommand+0x206>
    1220:	58 c0       	rjmp	.+176    	; 0x12d2 <ProcessCommand+0x2b6>
    1222:	8c 30       	cpi	r24, 0x0C	; 12
    1224:	78 f4       	brcc	.+30     	; 0x1244 <ProcessCommand+0x228>
    1226:	88 30       	cpi	r24, 0x08	; 8
    1228:	09 f4       	brne	.+2      	; 0x122c <ProcessCommand+0x210>
    122a:	49 c0       	rjmp	.+146    	; 0x12be <ProcessCommand+0x2a2>
    122c:	89 30       	cpi	r24, 0x09	; 9
    122e:	20 f4       	brcc	.+8      	; 0x1238 <ProcessCommand+0x21c>
    1230:	87 30       	cpi	r24, 0x07	; 7
    1232:	09 f0       	breq	.+2      	; 0x1236 <ProcessCommand+0x21a>
    1234:	39 c1       	rjmp	.+626    	; 0x14a8 <ProcessCommand+0x48c>
    1236:	51 c0       	rjmp	.+162    	; 0x12da <ProcessCommand+0x2be>
    1238:	89 30       	cpi	r24, 0x09	; 9
    123a:	b1 f0       	breq	.+44     	; 0x1268 <ProcessCommand+0x24c>
    123c:	8a 30       	cpi	r24, 0x0A	; 10
    123e:	09 f0       	breq	.+2      	; 0x1242 <ProcessCommand+0x226>
    1240:	33 c1       	rjmp	.+614    	; 0x14a8 <ProcessCommand+0x48c>
    1242:	0e c0       	rjmp	.+28     	; 0x1260 <ProcessCommand+0x244>
    1244:	8e 30       	cpi	r24, 0x0E	; 14
    1246:	09 f1       	breq	.+66     	; 0x128a <ProcessCommand+0x26e>
    1248:	8f 30       	cpi	r24, 0x0F	; 15
    124a:	20 f4       	brcc	.+8      	; 0x1254 <ProcessCommand+0x238>
    124c:	8d 30       	cpi	r24, 0x0D	; 13
    124e:	09 f0       	breq	.+2      	; 0x1252 <ProcessCommand+0x236>
    1250:	2b c1       	rjmp	.+598    	; 0x14a8 <ProcessCommand+0x48c>
    1252:	11 c0       	rjmp	.+34     	; 0x1276 <ProcessCommand+0x25a>
    1254:	8f 30       	cpi	r24, 0x0F	; 15
    1256:	f9 f0       	breq	.+62     	; 0x1296 <ProcessCommand+0x27a>
    1258:	80 31       	cpi	r24, 0x10	; 16
    125a:	09 f0       	breq	.+2      	; 0x125e <ProcessCommand+0x242>
    125c:	25 c1       	rjmp	.+586    	; 0x14a8 <ProcessCommand+0x48c>
    125e:	25 c0       	rjmp	.+74     	; 0x12aa <ProcessCommand+0x28e>
                    {
                        case detDIVIDERS: FillCmd();  FillUint16(GpsSync_divider);  FillResultNoNewLinePM(newLine); break;
    1260:	11 de       	rcall	.-990    	; 0xe84 <FillCmd>
    1262:	60 91 2e 01 	lds	r22, 0x012E
    1266:	03 c0       	rjmp	.+6      	; 0x126e <ProcessCommand+0x252>
                        case detKBIT:     FillCmd();  FillUint16(PPS_skipped);      FillResultNoNewLinePM(newLine); break;
    1268:	0d de       	rcall	.-998    	; 0xe84 <FillCmd>
    126a:	60 91 bf 01 	lds	r22, 0x01BF
    126e:	70 e0       	ldi	r23, 0x00	; 0
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	bd c0       	rjmp	.+378    	; 0x13f0 <ProcessCommand+0x3d4>
                        case detR00:      FillCmd();  FillUint32(CounterHHValue);   FillResultNoNewLinePM(newLine); break;
    1276:	06 de       	rcall	.-1012   	; 0xe84 <FillCmd>
    1278:	60 91 9b 01 	lds	r22, 0x019B
    127c:	70 91 9c 01 	lds	r23, 0x019C
    1280:	80 91 9d 01 	lds	r24, 0x019D
    1284:	90 91 9e 01 	lds	r25, 0x019E
    1288:	b3 c0       	rjmp	.+358    	; 0x13f0 <ProcessCommand+0x3d4>
                        case detR01:      FillCmd();  FillUint16(Count1PPS);        FillResultNoNewLinePM(newLine); break;
    128a:	fc dd       	rcall	.-1032   	; 0xe84 <FillCmd>
    128c:	60 91 b4 01 	lds	r22, 0x01B4
    1290:	70 91 b5 01 	lds	r23, 0x01B5
    1294:	ed cf       	rjmp	.-38     	; 0x1270 <ProcessCommand+0x254>
                        case detR02:      FillCmd();  FillUint32(LastOCPVal);       FillResultNoNewLinePM(newLine); break;
    1296:	f6 dd       	rcall	.-1044   	; 0xe84 <FillCmd>
    1298:	60 91 bb 01 	lds	r22, 0x01BB
    129c:	70 91 bc 01 	lds	r23, 0x01BC
    12a0:	80 91 bd 01 	lds	r24, 0x01BD
    12a4:	90 91 be 01 	lds	r25, 0x01BE
    12a8:	a3 c0       	rjmp	.+326    	; 0x13f0 <ProcessCommand+0x3d4>
                        case detR03:      FillCmd();  FillUint32(FilteredVal);      FillResultNoNewLinePM(newLine); break;
    12aa:	ec dd       	rcall	.-1064   	; 0xe84 <FillCmd>
    12ac:	60 91 a3 01 	lds	r22, 0x01A3
    12b0:	70 91 a4 01 	lds	r23, 0x01A4
    12b4:	80 91 a5 01 	lds	r24, 0x01A5
    12b8:	90 91 a6 01 	lds	r25, 0x01A6
    12bc:	99 c0       	rjmp	.+306    	; 0x13f0 <ProcessCommand+0x3d4>
                        case detMAX:      FillCmd();  FillUint32(ddd);              FillResultNoNewLinePM(newLine); break;
    12be:	e2 dd       	rcall	.-1084   	; 0xe84 <FillCmd>
    12c0:	60 91 c5 01 	lds	r22, 0x01C5
    12c4:	70 91 c6 01 	lds	r23, 0x01C6
    12c8:	80 91 c7 01 	lds	r24, 0x01C7
    12cc:	90 91 c8 01 	lds	r25, 0x01C8
    12d0:	8f c0       	rjmp	.+286    	; 0x13f0 <ProcessCommand+0x3d4>
                        case detAUTO:     FillCmd();  FillUint16(AutoUpdateGps);    FillResultNoNewLinePM(newLine); break;
    12d2:	d8 dd       	rcall	.-1104   	; 0xe84 <FillCmd>
    12d4:	60 91 af 01 	lds	r22, 0x01AF
    12d8:	ca cf       	rjmp	.-108    	; 0x126e <ProcessCommand+0x252>
                        case detMIN:      FillCmd();  FillUint32(LastAutoUpd);      FillResultNoNewLinePM(newLine); break;
    12da:	d4 dd       	rcall	.-1112   	; 0xe84 <FillCmd>
    12dc:	60 91 ab 01 	lds	r22, 0x01AB
    12e0:	70 91 ac 01 	lds	r23, 0x01AC
    12e4:	80 91 ad 01 	lds	r24, 0x01AD
    12e8:	90 91 ae 01 	lds	r25, 0x01AE
    12ec:	81 c0       	rjmp	.+258    	; 0x13f0 <ProcessCommand+0x3d4>
                    return 1;
                }
#endif
                case trgNONE:
                {
                    switch (command.details)
    12ee:	80 91 cb 01 	lds	r24, 0x01CB
    12f2:	85 30       	cpi	r24, 0x05	; 5
    12f4:	31 f0       	breq	.+12     	; 0x1302 <ProcessCommand+0x2e6>
    12f6:	8b 30       	cpi	r24, 0x0B	; 11
    12f8:	c1 f0       	breq	.+48     	; 0x132a <ProcessCommand+0x30e>
    12fa:	84 30       	cpi	r24, 0x04	; 4
    12fc:	09 f0       	breq	.+2      	; 0x1300 <ProcessCommand+0x2e4>
    12fe:	d4 c0       	rjmp	.+424    	; 0x14a8 <ProcessCommand+0x48c>
    1300:	0a c0       	rjmp	.+20     	; 0x1316 <ProcessCommand+0x2fa>
                    {
                        case detOUT:   FillCmd();  FillUint32(Fout);      FillResultNoNewLinePM(newLine); break;
    1302:	c0 dd       	rcall	.-1152   	; 0xe84 <FillCmd>
    1304:	60 91 29 01 	lds	r22, 0x0129
    1308:	70 91 2a 01 	lds	r23, 0x012A
    130c:	80 91 2b 01 	lds	r24, 0x012B
    1310:	90 91 2c 01 	lds	r25, 0x012C
    1314:	6d c0       	rjmp	.+218    	; 0x13f0 <ProcessCommand+0x3d4>
                        case detOSC:   FillCmd();  FillUint32(Fosc);      FillResultNoNewLinePM(newLine); break;
    1316:	b6 dd       	rcall	.-1172   	; 0xe84 <FillCmd>
    1318:	60 91 25 01 	lds	r22, 0x0125
    131c:	70 91 26 01 	lds	r23, 0x0126
    1320:	80 91 27 01 	lds	r24, 0x0127
    1324:	90 91 28 01 	lds	r25, 0x0128
    1328:	63 c0       	rjmp	.+198    	; 0x13f0 <ProcessCommand+0x3d4>
                        case detAUTO:  FillCmd();  FillUint16(AutoFreq);  FillResultNoNewLinePM(newLine); break;
    132a:	ac dd       	rcall	.-1192   	; 0xe84 <FillCmd>
    132c:	60 91 ba 01 	lds	r22, 0x01BA
    1330:	9e cf       	rjmp	.-196    	; 0x126e <ProcessCommand+0x252>
                    return 1;
                }

                case trgVCO:
                {
                    switch (command.details)
    1332:	80 91 cb 01 	lds	r24, 0x01CB
    1336:	89 30       	cpi	r24, 0x09	; 9
    1338:	21 f1       	breq	.+72     	; 0x1382 <ProcessCommand+0x366>
    133a:	8a 30       	cpi	r24, 0x0A	; 10
    133c:	40 f4       	brcc	.+16     	; 0x134e <ProcessCommand+0x332>
    133e:	87 30       	cpi	r24, 0x07	; 7
    1340:	a1 f0       	breq	.+40     	; 0x136a <ProcessCommand+0x34e>
    1342:	88 30       	cpi	r24, 0x08	; 8
    1344:	c0 f4       	brcc	.+48     	; 0x1376 <ProcessCommand+0x35a>
    1346:	81 30       	cpi	r24, 0x01	; 1
    1348:	09 f0       	breq	.+2      	; 0x134c <ProcessCommand+0x330>
    134a:	ae c0       	rjmp	.+348    	; 0x14a8 <ProcessCommand+0x48c>
    134c:	48 c0       	rjmp	.+144    	; 0x13de <ProcessCommand+0x3c2>
    134e:	8e 30       	cpi	r24, 0x0E	; 14
    1350:	41 f1       	breq	.+80     	; 0x13a2 <ProcessCommand+0x386>
    1352:	8f 30       	cpi	r24, 0x0F	; 15
    1354:	20 f4       	brcc	.+8      	; 0x135e <ProcessCommand+0x342>
    1356:	8d 30       	cpi	r24, 0x0D	; 13
    1358:	09 f0       	breq	.+2      	; 0x135c <ProcessCommand+0x340>
    135a:	a6 c0       	rjmp	.+332    	; 0x14a8 <ProcessCommand+0x48c>
    135c:	18 c0       	rjmp	.+48     	; 0x138e <ProcessCommand+0x372>
    135e:	8f 30       	cpi	r24, 0x0F	; 15
    1360:	51 f1       	breq	.+84     	; 0x13b6 <ProcessCommand+0x39a>
    1362:	80 31       	cpi	r24, 0x10	; 16
    1364:	09 f0       	breq	.+2      	; 0x1368 <ProcessCommand+0x34c>
    1366:	a0 c0       	rjmp	.+320    	; 0x14a8 <ProcessCommand+0x48c>
    1368:	30 c0       	rjmp	.+96     	; 0x13ca <ProcessCommand+0x3ae>
                    {
                        case detMIN:   FillCmd();  FillUint16(VCO_MIN);   FillResultNoNewLinePM(newLine); break;
    136a:	8c dd       	rcall	.-1256   	; 0xe84 <FillCmd>
    136c:	60 e7       	ldi	r22, 0x70	; 112
    136e:	77 e0       	ldi	r23, 0x07	; 7
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	3d c0       	rjmp	.+122    	; 0x13f0 <ProcessCommand+0x3d4>
                        case detMAX:   FillCmd();  FillUint16(VCO_MAX);   FillResultNoNewLinePM(newLine); break;
    1376:	86 dd       	rcall	.-1268   	; 0xe84 <FillCmd>
    1378:	62 ee       	ldi	r22, 0xE2	; 226
    137a:	78 e0       	ldi	r23, 0x08	; 8
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	37 c0       	rjmp	.+110    	; 0x13f0 <ProcessCommand+0x3d4>
                        case detKBIT:  FillCmd();  FillUint16(VCO_Kbit);  FillResultNoNewLinePM(newLine); break;
    1382:	80 dd       	rcall	.-1280   	; 0xe84 <FillCmd>
    1384:	64 e9       	ldi	r22, 0x94	; 148
    1386:	71 e1       	ldi	r23, 0x11	; 17
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	31 c0       	rjmp	.+98     	; 0x13f0 <ProcessCommand+0x3d4>
#ifdef DEBUG_REGS
                        case detR00:   FillCmd();  FillUint32(tmp_r0);      FillResultNoNewLinePM(newLine); break;
    138e:	7a dd       	rcall	.-1292   	; 0xe84 <FillCmd>
    1390:	60 91 b6 01 	lds	r22, 0x01B6
    1394:	70 91 b7 01 	lds	r23, 0x01B7
    1398:	80 91 b8 01 	lds	r24, 0x01B8
    139c:	90 91 b9 01 	lds	r25, 0x01B9
    13a0:	27 c0       	rjmp	.+78     	; 0x13f0 <ProcessCommand+0x3d4>
                        case detR01:   FillCmd();  FillUint32(tmp_r1);      FillResultNoNewLinePM(newLine); break;
    13a2:	70 dd       	rcall	.-1312   	; 0xe84 <FillCmd>
    13a4:	60 91 c0 01 	lds	r22, 0x01C0
    13a8:	70 91 c1 01 	lds	r23, 0x01C1
    13ac:	80 91 c2 01 	lds	r24, 0x01C2
    13b0:	90 91 c3 01 	lds	r25, 0x01C3
    13b4:	1d c0       	rjmp	.+58     	; 0x13f0 <ProcessCommand+0x3d4>
                        case detR02:   FillCmd();  FillUint32(tmp_r2);      FillResultNoNewLinePM(newLine); break;
    13b6:	66 dd       	rcall	.-1332   	; 0xe84 <FillCmd>
    13b8:	60 91 b0 01 	lds	r22, 0x01B0
    13bc:	70 91 b1 01 	lds	r23, 0x01B1
    13c0:	80 91 b2 01 	lds	r24, 0x01B2
    13c4:	90 91 b3 01 	lds	r25, 0x01B3
    13c8:	13 c0       	rjmp	.+38     	; 0x13f0 <ProcessCommand+0x3d4>
                        case detR03:   FillCmd();  FillUint32(tmp_r3);      FillResultNoNewLinePM(newLine); break;
    13ca:	5c dd       	rcall	.-1352   	; 0xe84 <FillCmd>
    13cc:	60 91 a7 01 	lds	r22, 0x01A7
    13d0:	70 91 a8 01 	lds	r23, 0x01A8
    13d4:	80 91 a9 01 	lds	r24, 0x01A9
    13d8:	90 91 aa 01 	lds	r25, 0x01AA
    13dc:	09 c0       	rjmp	.+18     	; 0x13f0 <ProcessCommand+0x3d4>
                        case detEN:    FillCmd();  FillUint32(tmp_lmk);     FillResultNoNewLinePM(newLine); break;
    13de:	52 dd       	rcall	.-1372   	; 0xe84 <FillCmd>
    13e0:	60 91 9f 01 	lds	r22, 0x019F
    13e4:	70 91 a0 01 	lds	r23, 0x01A0
    13e8:	80 91 a1 01 	lds	r24, 0x01A1
    13ec:	90 91 a2 01 	lds	r25, 0x01A2
    13f0:	6d dd       	rcall	.-1318   	; 0xecc <FillUint32>
    13f2:	8f ed       	ldi	r24, 0xDF	; 223
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	b8 dd       	rcall	.-1168   	; 0xf68 <FillResultNoNewLinePM>
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	57 c0       	rjmp	.+174    	; 0x14aa <ProcessCommand+0x48e>
                    return 1;
                }

                case trgLMK:
                {
                    switch (command.details)
    13fc:	80 91 cb 01 	lds	r24, 0x01CB
    1400:	86 30       	cpi	r24, 0x06	; 6
    1402:	21 f0       	breq	.+8      	; 0x140c <ProcessCommand+0x3f0>
    1404:	8a 30       	cpi	r24, 0x0A	; 10
    1406:	09 f0       	breq	.+2      	; 0x140a <ProcessCommand+0x3ee>
    1408:	4f c0       	rjmp	.+158    	; 0x14a8 <ProcessCommand+0x48c>
    140a:	04 c0       	rjmp	.+8      	; 0x1414 <ProcessCommand+0x3f8>
                    {
                        case detPORTS:    FillCmd();  FillUint16(LMK_OutMask);  FillResultNoNewLinePM(newLine); break;
    140c:	3b dd       	rcall	.-1418   	; 0xe84 <FillCmd>
    140e:	60 91 2d 01 	lds	r22, 0x012D
    1412:	2d cf       	rjmp	.-422    	; 0x126e <ProcessCommand+0x252>
                        case detDIVIDERS: FillCmd();  FillUint16(LMK_devider);  FillResultNoNewLinePM(newLine); break;
    1414:	37 dd       	rcall	.-1426   	; 0xe84 <FillCmd>
    1416:	60 91 c4 01 	lds	r22, 0x01C4
    141a:	29 cf       	rjmp	.-430    	; 0x126e <ProcessCommand+0x252>
            return 0;
        }
#endif
        case cmdRESET:
        {
            InitLMX2531();
    141c:	ec dc       	rcall	.-1576   	; 0xdf6 <InitLMX2531>
            InitLMK();
    141e:	6b da       	rcall	.-2858   	; 0x8f6 <InitLMK>
    1420:	3f c0       	rjmp	.+126    	; 0x14a0 <ProcessCommand+0x484>
            FillResultPM(resOk);
            return 1;
    1422:	cb e9       	ldi	r28, 0x9B	; 155
    1424:	d1 e0       	ldi	r29, 0x01	; 1
static void LoadHwInfo(void)
{
    int i;
    for (i=0; i<HWI_LEN; i++)
    {
        char c = eeprom_read_byte(&eeHWInfo[i]);
    1426:	ce 01       	movw	r24, r28
    1428:	01 d5       	rcall	.+2562   	; 0x1e2c <__eerd_byte_m32u2>
    142a:	68 2f       	mov	r22, r24
        if (c == 0)
    142c:	88 23       	and	r24, r24
    142e:	09 f3       	breq	.-62     	; 0x13f2 <ProcessCommand+0x3d6>
            break;
        Buffer_StoreElement(&USARTtoUSB_Buffer, c);
    1430:	81 e3       	ldi	r24, 0x31	; 49
    1432:	91 e0       	ldi	r25, 0x01	; 1
    1434:	c0 d1       	rcall	.+896    	; 0x17b6 <Buffer_StoreElement>
    1436:	21 96       	adiw	r28, 0x01	; 1
}

static void LoadHwInfo(void)
{
    int i;
    for (i=0; i<HWI_LEN; i++)
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	cf 3f       	cpi	r28, 0xFF	; 255
    143c:	d8 07       	cpc	r29, r24
    143e:	99 f7       	brne	.-26     	; 0x1426 <ProcessCommand+0x40a>
    1440:	d8 cf       	rjmp	.-80     	; 0x13f2 <ProcessCommand+0x3d6>
            return 1;
#endif

#ifndef NO_VERSION
        case cmdVERSION:
            FillResultPM(resVersion);
    1442:	85 ee       	ldi	r24, 0xE5	; 229
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	2e c0       	rjmp	.+92     	; 0x14a4 <ProcessCommand+0x488>
            return 1;
#endif

#ifndef NO_CMDEELOAD
        case cmdLOAD_EEPROM:
            LoadEEPROM();
    1448:	a2 dd       	rcall	.-1212   	; 0xf8e <LoadEEPROM>
    144a:	2a c0       	rjmp	.+84     	; 0x14a0 <ProcessCommand+0x484>
#endif
}

static void StoreEEPROM(void)
{
    eeprom_write_dword(&eeFosc, Fosc);
    144c:	40 91 25 01 	lds	r20, 0x0125
    1450:	50 91 26 01 	lds	r21, 0x0126
    1454:	60 91 27 01 	lds	r22, 0x0127
    1458:	70 91 28 01 	lds	r23, 0x0128
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	00 d5       	rcall	.+2560   	; 0x1e62 <__eewr_dword_m32u2>
    eeprom_write_dword(&eeFout, Fout);
    1462:	40 91 29 01 	lds	r20, 0x0129
    1466:	50 91 2a 01 	lds	r21, 0x012A
    146a:	60 91 2b 01 	lds	r22, 0x012B
    146e:	70 91 2c 01 	lds	r23, 0x012C
    1472:	84 e0       	ldi	r24, 0x04	; 4
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	f5 d4       	rcall	.+2538   	; 0x1e62 <__eewr_dword_m32u2>
#ifndef VCO_FIXED
    eeprom_write_word(&eeVCO_MIN, VCO_MIN);
    eeprom_write_word(&eeVCO_MAX, VCO_MAX);
    eeprom_write_word(&eeVCO_Kbit, VCO_Kbit);
#endif
    eeprom_write_byte(&eeLMK_OutMask, LMK_OutMask);
    1478:	8e e0       	ldi	r24, 0x0E	; 14
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	60 91 2d 01 	lds	r22, 0x012D
    1480:	e2 d4       	rcall	.+2500   	; 0x1e46 <__eewr_byte_m32u2>
    eeprom_write_byte(&eeAutoFreq, AutoFreq);
    1482:	8f e0       	ldi	r24, 0x0F	; 15
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	60 91 ba 01 	lds	r22, 0x01BA
    148a:	dd d4       	rcall	.+2490   	; 0x1e46 <__eewr_byte_m32u2>
#ifdef PRESENT_DAC12
    eeprom_write_byte(&eeDacValue, DacValue);
#endif

#ifdef PRESENT_GPS
    eeprom_write_byte(&eeAutoGPSSync, AutoUpdateGps);
    148c:	82 e1       	ldi	r24, 0x12	; 18
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	60 91 af 01 	lds	r22, 0x01AF
    1494:	d8 d4       	rcall	.+2480   	; 0x1e46 <__eewr_byte_m32u2>
#endif

#if TAMER_VER >= 12
    eeprom_write_byte(&eeEnableOscillator, EnableOscillator);
    1496:	83 e1       	ldi	r24, 0x13	; 19
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	60 91 2f 01 	lds	r22, 0x012F
    149e:	d3 d4       	rcall	.+2470   	; 0x1e46 <__eewr_byte_m32u2>
            return 1;
#endif

        case cmdSTORE_EEPROM:
            StoreEEPROM();
            FillResultPM(resOk);
    14a0:	82 ee       	ldi	r24, 0xE2	; 226
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	70 dd       	rcall	.-1312   	; 0xf86 <FillResultPM>
    14a6:	a8 cf       	rjmp	.-176    	; 0x13f8 <ProcessCommand+0x3dc>
            return 1;
    14a8:	80 e0       	ldi	r24, 0x00	; 0
        default:
            return 0;

    }
	return 0;
}
    14aa:	df 91       	pop	r29
    14ac:	cf 91       	pop	r28
    14ae:	08 95       	ret

000014b0 <__vector_22>:
extern uint8_t commands;
extern RingBuff_t USBtoUSART_Buffer;
extern RingBuff_t USARTtoUSB_Buffer;

ISR(SPI_STC_vect, ISR_BLOCK)
{
    14b0:	1f 92       	push	r1
    14b2:	0f 92       	push	r0
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	0f 92       	push	r0
    14b8:	11 24       	eor	r1, r1
    14ba:	2f 93       	push	r18
    14bc:	3f 93       	push	r19
    14be:	4f 93       	push	r20
    14c0:	5f 93       	push	r21
    14c2:	6f 93       	push	r22
    14c4:	7f 93       	push	r23
    14c6:	8f 93       	push	r24
    14c8:	9f 93       	push	r25
    14ca:	af 93       	push	r26
    14cc:	bf 93       	push	r27
    14ce:	ef 93       	push	r30
    14d0:	ff 93       	push	r31
//	if (USB_DeviceState != DEVICE_STATE_Configured)
//	{
		if (USARTtoUSB_Buffer.Elements)
    14d2:	80 91 65 01 	lds	r24, 0x0165
    14d6:	88 23       	and	r24, r24
    14d8:	21 f0       	breq	.+8      	; 0x14e2 <__vector_22+0x32>
			SPDR = Buffer_GetElement(&USARTtoUSB_Buffer);
    14da:	81 e3       	ldi	r24, 0x31	; 49
    14dc:	91 e0       	ldi	r25, 0x01	; 1
    14de:	b4 d1       	rcall	.+872    	; 0x1848 <Buffer_GetElement>
    14e0:	01 c0       	rjmp	.+2      	; 0x14e4 <__vector_22+0x34>
		else
			SPDR = 0xff;
    14e2:	8f ef       	ldi	r24, 0xFF	; 255
    14e4:	8e bd       	out	0x2e, r24	; 46


	   	uint8_t byte = SPDR;
    14e6:	6e b5       	in	r22, 0x2e	; 46
  	  	if (byte == '\n' || byte == '\r')
    14e8:	6a 30       	cpi	r22, 0x0A	; 10
    14ea:	11 f0       	breq	.+4      	; 0x14f0 <__vector_22+0x40>
    14ec:	6d 30       	cpi	r22, 0x0D	; 13
    14ee:	29 f4       	brne	.+10     	; 0x14fa <__vector_22+0x4a>
   		 	commands++;
    14f0:	80 91 30 01 	lds	r24, 0x0130
    14f4:	8f 5f       	subi	r24, 0xFF	; 255
    14f6:	80 93 30 01 	sts	0x0130, r24

		if ((byte != 0) && (byte != 0xff))
    14fa:	86 2f       	mov	r24, r22
    14fc:	81 50       	subi	r24, 0x01	; 1
    14fe:	8e 3f       	cpi	r24, 0xFE	; 254
    1500:	18 f4       	brcc	.+6      	; 0x1508 <__vector_22+0x58>
			Buffer_StoreElement(&USBtoUSART_Buffer, byte);
    1502:	86 e6       	ldi	r24, 0x66	; 102
    1504:	91 e0       	ldi	r25, 0x01	; 1
    1506:	57 d1       	rcall	.+686    	; 0x17b6 <Buffer_StoreElement>
//	else
//	{
//		SPDR = 0xff;
//	}
	
}
    1508:	ff 91       	pop	r31
    150a:	ef 91       	pop	r30
    150c:	bf 91       	pop	r27
    150e:	af 91       	pop	r26
    1510:	9f 91       	pop	r25
    1512:	8f 91       	pop	r24
    1514:	7f 91       	pop	r23
    1516:	6f 91       	pop	r22
    1518:	5f 91       	pop	r21
    151a:	4f 91       	pop	r20
    151c:	3f 91       	pop	r19
    151e:	2f 91       	pop	r18
    1520:	0f 90       	pop	r0
    1522:	0f be       	out	0x3f, r0	; 63
    1524:	0f 90       	pop	r0
    1526:	1f 90       	pop	r1
    1528:	18 95       	reti

0000152a <ParseValueD>:
    }
}

static uint8_t ParseValueD(uint8_t w1)
{
    if (w1 >= '0' && w1 <= '9')
    152a:	80 53       	subi	r24, 0x30	; 48
    152c:	8a 30       	cpi	r24, 0x0A	; 10
    152e:	08 f0       	brcs	.+2      	; 0x1532 <ParseValueD+0x8>
    1530:	80 e1       	ldi	r24, 0x10	; 16
        return w1 - '0';

    return 0x10;
}
    1532:	08 95       	ret

00001534 <IsCommandSeparator>:
    return 0x10;
}
#endif

uint8_t IsCommandSeparator(uint8_t byte)
{
    1534:	98 2f       	mov	r25, r24
	if (byte == 0 || byte == '\r' || byte == '\n')
    1536:	88 23       	and	r24, r24
    1538:	39 f0       	breq	.+14     	; 0x1548 <IsCommandSeparator+0x14>
    153a:	8d 30       	cpi	r24, 0x0D	; 13
    153c:	29 f0       	breq	.+10     	; 0x1548 <IsCommandSeparator+0x14>
    153e:	80 e0       	ldi	r24, 0x00	; 0
    1540:	9a 30       	cpi	r25, 0x0A	; 10
    1542:	19 f4       	brne	.+6      	; 0x154a <IsCommandSeparator+0x16>
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	08 95       	ret
    1548:	81 e0       	ldi	r24, 0x01	; 1
    	return 1;

	return 0;
}
    154a:	08 95       	ret

0000154c <ParseCommand>:

uint8_t ParseCommand(void)
{
    154c:	df 92       	push	r13
    154e:	ef 92       	push	r14
    1550:	ff 92       	push	r15
    1552:	0f 93       	push	r16
    1554:	1f 93       	push	r17
    1556:	cf 93       	push	r28
    1558:	df 93       	push	r29

    uint8_t step = 0;
    uint8_t val = 0;


    command.cmd = 0;
    155a:	10 92 c9 01 	sts	0x01C9, r1
    command.type = 0;
    155e:	10 92 ca 01 	sts	0x01CA, r1
    command.details = 0;
    1562:	10 92 cb 01 	sts	0x01CB, r1
    command.u32data = 0;
    1566:	10 92 cc 01 	sts	0x01CC, r1
    156a:	10 92 cd 01 	sts	0x01CD, r1
    156e:	10 92 ce 01 	sts	0x01CE, r1
    1572:	10 92 cf 01 	sts	0x01CF, r1
    1576:	00 e0       	ldi	r16, 0x00	; 0
    for (; step < 4; )
    {
        // Skip white spaces
        do
        {
            byte = getbyte();
    1578:	86 e6       	ldi	r24, 0x66	; 102
    157a:	91 e0       	ldi	r25, 0x01	; 1
    157c:	65 d1       	rcall	.+714    	; 0x1848 <Buffer_GetElement>
    157e:	18 2f       	mov	r17, r24
        } while (byte == ' ');
    1580:	80 32       	cpi	r24, 0x20	; 32
    1582:	d1 f3       	breq	.-12     	; 0x1578 <ParseCommand+0x2c>

        if (byte == ',')
    1584:	8c 32       	cpi	r24, 0x2C	; 44
    1586:	11 f4       	brne	.+4      	; 0x158c <ParseCommand+0x40>
        {
            step++;
    1588:	0f 5f       	subi	r16, 0xFF	; 255
    158a:	d1 c0       	rjmp	.+418    	; 0x172e <ParseCommand+0x1e2>
            val = 0;
            continue;
        }

        if (IsCommandSeparator(byte))
    158c:	d3 df       	rcall	.-90     	; 0x1534 <IsCommandSeparator>
    158e:	88 23       	and	r24, r24
    1590:	09 f0       	breq	.+2      	; 0x1594 <ParseCommand+0x48>
    1592:	cb c0       	rjmp	.+406    	; 0x172a <ParseCommand+0x1de>
            return 1;


        if (step < 3)
    1594:	03 30       	cpi	r16, 0x03	; 3
    1596:	09 f4       	brne	.+2      	; 0x159a <ParseCommand+0x4e>
    1598:	49 c0       	rjmp	.+146    	; 0x162c <ParseCommand+0xe0>
        {
            byte2 = getbyte();
    159a:	86 e6       	ldi	r24, 0x66	; 102
    159c:	91 e0       	ldi	r25, 0x01	; 1
    159e:	54 d1       	rcall	.+680    	; 0x1848 <Buffer_GetElement>
    15a0:	d8 2e       	mov	r13, r24
            byte3 = getbyte();
    15a2:	86 e6       	ldi	r24, 0x66	; 102
    15a4:	91 e0       	ldi	r25, 0x01	; 1
    15a6:	50 d1       	rcall	.+672    	; 0x1848 <Buffer_GetElement>
    15a8:	e8 2e       	mov	r14, r24

			if (IsCommandSeparator(byte2) || IsCommandSeparator(byte3))
    15aa:	8d 2d       	mov	r24, r13
    15ac:	c3 df       	rcall	.-122    	; 0x1534 <IsCommandSeparator>
    15ae:	88 23       	and	r24, r24
    15b0:	09 f0       	breq	.+2      	; 0x15b4 <ParseCommand+0x68>
    15b2:	c0 c0       	rjmp	.+384    	; 0x1734 <ParseCommand+0x1e8>
    15b4:	8e 2d       	mov	r24, r14
    15b6:	be df       	rcall	.-132    	; 0x1534 <IsCommandSeparator>
    15b8:	88 23       	and	r24, r24
    15ba:	09 f0       	breq	.+2      	; 0x15be <ParseCommand+0x72>
    15bc:	bb c0       	rjmp	.+374    	; 0x1734 <ParseCommand+0x1e8>
				return 0; 

            uint8_t* mem;
            switch (step)
    15be:	01 30       	cpi	r16, 0x01	; 1
    15c0:	41 f0       	breq	.+16     	; 0x15d2 <ParseCommand+0x86>
    15c2:	01 30       	cpi	r16, 0x01	; 1
    15c4:	18 f0       	brcs	.+6      	; 0x15cc <ParseCommand+0x80>
    15c6:	02 30       	cpi	r16, 0x02	; 2
    15c8:	49 f4       	brne	.+18     	; 0x15dc <ParseCommand+0x90>
    15ca:	06 c0       	rjmp	.+12     	; 0x15d8 <ParseCommand+0x8c>
    15cc:	cf e0       	ldi	r28, 0x0F	; 15
    15ce:	d1 e0       	ldi	r29, 0x01	; 1
    15d0:	05 c0       	rjmp	.+10     	; 0x15dc <ParseCommand+0x90>
    15d2:	c1 e3       	ldi	r28, 0x31	; 49
    15d4:	d1 e0       	ldi	r29, 0x01	; 1
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <ParseCommand+0x90>
            {
                case 0: mem = pCmd; break;
                case 1: mem = pTrg; break;
    15d8:	c7 e4       	ldi	r28, 0x47	; 71
    15da:	d1 e0       	ldi	r29, 0x01	; 1
    15dc:	ce 01       	movw	r24, r28
    15de:	21 e0       	ldi	r18, 0x01	; 1
{
    uint8_t i = 1;

    for (;;i++)
    {
        uint8_t o1 = pgm_read_byte(table++);
    15e0:	fc 01       	movw	r30, r24
    15e2:	34 91       	lpm	r19, Z+
        uint8_t o2 = pgm_read_byte(table++);
    15e4:	01 96       	adiw	r24, 0x01	; 1
    15e6:	fc 01       	movw	r30, r24
    15e8:	54 91       	lpm	r21, Z+
    15ea:	01 97       	sbiw	r24, 0x01	; 1
    15ec:	fc 01       	movw	r30, r24
    15ee:	32 96       	adiw	r30, 0x02	; 2
    15f0:	03 96       	adiw	r24, 0x03	; 3
        uint8_t o3 = pgm_read_byte(table++);
    15f2:	44 91       	lpm	r20, Z+

        if ((o1 == 0) /*|| (o2 == 0) || (o3 == 0)*/)
    15f4:	33 23       	and	r19, r19
    15f6:	41 f0       	breq	.+16     	; 0x1608 <ParseCommand+0xbc>
            return 0xff;

        if ((o1 == w1) && (o2 == w2) && (o3 == w3))
    15f8:	31 17       	cp	r19, r17
    15fa:	21 f4       	brne	.+8      	; 0x1604 <ParseCommand+0xb8>
    15fc:	5d 15       	cp	r21, r13
    15fe:	11 f4       	brne	.+4      	; 0x1604 <ParseCommand+0xb8>
    1600:	4e 15       	cp	r20, r14
    1602:	19 f0       	breq	.+6      	; 0x160a <ParseCommand+0xbe>

static inline uint8_t ParseParam(uint8_t w1, uint8_t w2, uint8_t w3, uint8_t* table)
{
    uint8_t i = 1;

    for (;;i++)
    1604:	2f 5f       	subi	r18, 0xFF	; 255
    1606:	ec cf       	rjmp	.-40     	; 0x15e0 <ParseCommand+0x94>
    1608:	2f ef       	ldi	r18, 0xFF	; 255
                case 0: mem = pCmd; break;
                case 1: mem = pTrg; break;
                case 2: mem = pDet; break;
            }
            val = ParseParam(byte, byte2, byte3, mem);
            switch (step)
    160a:	01 30       	cpi	r16, 0x01	; 1
    160c:	49 f0       	breq	.+18     	; 0x1620 <ParseCommand+0xd4>
    160e:	01 30       	cpi	r16, 0x01	; 1
    1610:	20 f0       	brcs	.+8      	; 0x161a <ParseCommand+0xce>
    1612:	02 30       	cpi	r16, 0x02	; 2
    1614:	09 f0       	breq	.+2      	; 0x1618 <ParseCommand+0xcc>
    1616:	8b c0       	rjmp	.+278    	; 0x172e <ParseCommand+0x1e2>
    1618:	06 c0       	rjmp	.+12     	; 0x1626 <ParseCommand+0xda>
            {
                case 0: command.cmd = val;     break;
    161a:	20 93 c9 01 	sts	0x01C9, r18
    161e:	ac cf       	rjmp	.-168    	; 0x1578 <ParseCommand+0x2c>
                case 1: command.type = val;    break;
    1620:	20 93 ca 01 	sts	0x01CA, r18
    1624:	a9 cf       	rjmp	.-174    	; 0x1578 <ParseCommand+0x2c>
                case 2: command.details = val; break;
    1626:	20 93 cb 01 	sts	0x01CB, r18
    162a:	a6 cf       	rjmp	.-180    	; 0x1578 <ParseCommand+0x2c>
        {
            uint8_t b1;
            uint8_t j;

#ifndef NO_HEXVALUES
            if ((byte == 'x') || (byte == 'X'))
    162c:	18 37       	cpi	r17, 0x78	; 120
    162e:	11 f0       	breq	.+4      	; 0x1634 <ParseCommand+0xe8>
    1630:	18 35       	cpi	r17, 0x58	; 88
    1632:	d1 f5       	brne	.+116    	; 0x16a8 <ParseCommand+0x15c>
    1634:	00 e0       	ldi	r16, 0x00	; 0
            {

              for (j = 0; j < 8; j++)
              {
                b1 = ParseValue((byte = getbyte()));
    1636:	86 e6       	ldi	r24, 0x66	; 102
    1638:	91 e0       	ldi	r25, 0x01	; 1
    163a:	06 d1       	rcall	.+524    	; 0x1848 <Buffer_GetElement>
    163c:	18 2f       	mov	r17, r24
}

#ifndef NO_HEXVALUES
static uint8_t ParseValue(uint8_t w1)
{
    if (w1 >= '0' && w1 <= '9')
    163e:	28 2f       	mov	r18, r24
    1640:	20 53       	subi	r18, 0x30	; 48
    1642:	2a 30       	cpi	r18, 0x0A	; 10
    1644:	78 f0       	brcs	.+30     	; 0x1664 <ParseCommand+0x118>
        return w1 - '0';
    if (w1 >= 'a' && w1 <= 'f')
    1646:	81 56       	subi	r24, 0x61	; 97
    1648:	86 30       	cpi	r24, 0x06	; 6
    164a:	10 f4       	brcc	.+4      	; 0x1650 <ParseCommand+0x104>
        return 10 + w1 - 'a';
    164c:	27 52       	subi	r18, 0x27	; 39
    164e:	07 c0       	rjmp	.+14     	; 0x165e <ParseCommand+0x112>
    if (w1 >= 'A' && w1 <= 'F')
    1650:	81 2f       	mov	r24, r17
    1652:	81 54       	subi	r24, 0x41	; 65
    1654:	86 30       	cpi	r24, 0x06	; 6
    1656:	08 f0       	brcs	.+2      	; 0x165a <ParseCommand+0x10e>
    1658:	64 c0       	rjmp	.+200    	; 0x1722 <ParseCommand+0x1d6>
        return 10 + w1 - 'A';
    165a:	21 2f       	mov	r18, r17
    165c:	27 53       	subi	r18, 0x37	; 55
            {

              for (j = 0; j < 8; j++)
              {
                b1 = ParseValue((byte = getbyte()));
                if (b1 == 0x10)
    165e:	20 31       	cpi	r18, 0x10	; 16
    1660:	09 f4       	brne	.+2      	; 0x1664 <ParseCommand+0x118>
    1662:	5f c0       	rjmp	.+190    	; 0x1722 <ParseCommand+0x1d6>
                    goto skip;

                command.u32data = (command.u32data << 4) | b1;
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	40 e0       	ldi	r20, 0x00	; 0
    1668:	50 e0       	ldi	r21, 0x00	; 0
    166a:	80 91 cc 01 	lds	r24, 0x01CC
    166e:	90 91 cd 01 	lds	r25, 0x01CD
    1672:	a0 91 ce 01 	lds	r26, 0x01CE
    1676:	b0 91 cf 01 	lds	r27, 0x01CF
    167a:	64 e0       	ldi	r22, 0x04	; 4
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	aa 1f       	adc	r26, r26
    1682:	bb 1f       	adc	r27, r27
    1684:	6a 95       	dec	r22
    1686:	d1 f7       	brne	.-12     	; 0x167c <ParseCommand+0x130>
    1688:	28 2b       	or	r18, r24
    168a:	39 2b       	or	r19, r25
    168c:	4a 2b       	or	r20, r26
    168e:	5b 2b       	or	r21, r27
    1690:	20 93 cc 01 	sts	0x01CC, r18
    1694:	30 93 cd 01 	sts	0x01CD, r19
    1698:	40 93 ce 01 	sts	0x01CE, r20
    169c:	50 93 cf 01 	sts	0x01CF, r21

#ifndef NO_HEXVALUES
            if ((byte == 'x') || (byte == 'X'))
            {

              for (j = 0; j < 8; j++)
    16a0:	0f 5f       	subi	r16, 0xFF	; 255
    16a2:	08 30       	cpi	r16, 0x08	; 8
    16a4:	41 f6       	brne	.-112    	; 0x1636 <ParseCommand+0xea>
    16a6:	39 c0       	rjmp	.+114    	; 0x171a <ParseCommand+0x1ce>
              }
            }
            else
#endif
            {
              b1 = ParseValueD(byte);
    16a8:	81 2f       	mov	r24, r17
    16aa:	3f df       	rcall	.-386    	; 0x152a <ParseValueD>
              if (b1 == 0x10)
    16ac:	80 31       	cpi	r24, 0x10	; 16
    16ae:	c9 f1       	breq	.+114    	; 0x1722 <ParseCommand+0x1d6>
                    goto skip;
              command.u32data = b1;
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	a0 e0       	ldi	r26, 0x00	; 0
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	80 93 cc 01 	sts	0x01CC, r24
    16ba:	90 93 cd 01 	sts	0x01CD, r25
    16be:	a0 93 ce 01 	sts	0x01CE, r26
    16c2:	b0 93 cf 01 	sts	0x01CF, r27
    16c6:	dd 24       	eor	r13, r13
    16c8:	d3 94       	inc	r13

              for (j = 1; j < 10; j++)
              {
                b1 = ParseValueD((byte = getbyte()));
    16ca:	86 e6       	ldi	r24, 0x66	; 102
    16cc:	91 e0       	ldi	r25, 0x01	; 1
    16ce:	bc d0       	rcall	.+376    	; 0x1848 <Buffer_GetElement>
    16d0:	18 2f       	mov	r17, r24
    16d2:	2b df       	rcall	.-426    	; 0x152a <ParseValueD>
                if (b1 == 0x10)
    16d4:	80 31       	cpi	r24, 0x10	; 16
    16d6:	29 f1       	breq	.+74     	; 0x1722 <ParseCommand+0x1d6>
                    goto skip;

                command.u32data = (command.u32data * 10u) + b1;
    16d8:	e8 2e       	mov	r14, r24
    16da:	ff 24       	eor	r15, r15
    16dc:	00 e0       	ldi	r16, 0x00	; 0
    16de:	10 e0       	ldi	r17, 0x00	; 0
    16e0:	60 91 cc 01 	lds	r22, 0x01CC
    16e4:	70 91 cd 01 	lds	r23, 0x01CD
    16e8:	80 91 ce 01 	lds	r24, 0x01CE
    16ec:	90 91 cf 01 	lds	r25, 0x01CF
    16f0:	2a e0       	ldi	r18, 0x0A	; 10
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	40 e0       	ldi	r20, 0x00	; 0
    16f6:	50 e0       	ldi	r21, 0x00	; 0
    16f8:	2f d3       	rcall	.+1630   	; 0x1d58 <__mulsi3>
    16fa:	e6 0e       	add	r14, r22
    16fc:	f7 1e       	adc	r15, r23
    16fe:	08 1f       	adc	r16, r24
    1700:	19 1f       	adc	r17, r25
    1702:	e0 92 cc 01 	sts	0x01CC, r14
    1706:	f0 92 cd 01 	sts	0x01CD, r15
    170a:	00 93 ce 01 	sts	0x01CE, r16
    170e:	10 93 cf 01 	sts	0x01CF, r17
              b1 = ParseValueD(byte);
              if (b1 == 0x10)
                    goto skip;
              command.u32data = b1;

              for (j = 1; j < 10; j++)
    1712:	d3 94       	inc	r13
    1714:	fa e0       	ldi	r31, 0x0A	; 10
    1716:	df 16       	cp	r13, r31
    1718:	c1 f6       	brne	.-80     	; 0x16ca <ParseCommand+0x17e>
                    goto skip;

                command.u32data = (command.u32data * 10u) + b1;
              }
            }
            byte = getbyte();
    171a:	86 e6       	ldi	r24, 0x66	; 102
    171c:	91 e0       	ldi	r25, 0x01	; 1
    171e:	94 d0       	rcall	.+296    	; 0x1848 <Buffer_GetElement>
    1720:	18 2f       	mov	r17, r24
        skip:
            if (IsCommandSeparator(byte))
    1722:	81 2f       	mov	r24, r17
    1724:	07 df       	rcall	.-498    	; 0x1534 <IsCommandSeparator>
    1726:	88 23       	and	r24, r24
    1728:	31 f0       	breq	.+12     	; 0x1736 <ParseCommand+0x1ea>
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	04 c0       	rjmp	.+8      	; 0x1736 <ParseCommand+0x1ea>
    command.cmd = 0;
    command.type = 0;
    command.details = 0;
    command.u32data = 0;

    for (; step < 4; )
    172e:	04 30       	cpi	r16, 0x04	; 4
    1730:	08 f4       	brcc	.+2      	; 0x1734 <ParseCommand+0x1e8>
    1732:	22 cf       	rjmp	.-444    	; 0x1578 <ParseCommand+0x2c>
    1734:	80 e0       	ldi	r24, 0x00	; 0
            return 0;
         }
    }

    return 0;
}
    1736:	df 91       	pop	r29
    1738:	cf 91       	pop	r28
    173a:	1f 91       	pop	r17
    173c:	0f 91       	pop	r16
    173e:	ff 90       	pop	r15
    1740:	ef 90       	pop	r14
    1742:	df 90       	pop	r13
    1744:	08 95       	ret

00001746 <CALLBACK_NONDFU_USB_GetDescriptor>:

uint16_t CALLBACK_NONDFU_USB_GetDescriptor(const uint16_t wValue, const uint8_t wIndex, void** const DescriptorAddress)

//uint16_t TRAP_NAME(1) (const uint16_t wValue, const uint8_t wIndex, void** const DescriptorAddress);
//uint16_t TRAP_NAME(1) (const uint16_t wValue, const uint8_t wIndex, void** const DescriptorAddress)
{
    1746:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;

        switch (DescriptorType)
    1748:	92 30       	cpi	r25, 0x02	; 2
    174a:	49 f0       	breq	.+18     	; 0x175e <CALLBACK_NONDFU_USB_GetDescriptor+0x18>
    174c:	93 30       	cpi	r25, 0x03	; 3
    174e:	61 f0       	breq	.+24     	; 0x1768 <CALLBACK_NONDFU_USB_GetDescriptor+0x22>
    1750:	91 30       	cpi	r25, 0x01	; 1
    1752:	f9 f4       	brne	.+62     	; 0x1792 <CALLBACK_NONDFU_USB_GetDescriptor+0x4c>
    1754:	e8 e7       	ldi	r30, 0x78	; 120
    1756:	f1 e0       	ldi	r31, 0x01	; 1
    1758:	22 e1       	ldi	r18, 0x12	; 18
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	1e c0       	rjmp	.+60     	; 0x179a <CALLBACK_NONDFU_USB_GetDescriptor+0x54>
    175e:	ea e8       	ldi	r30, 0x8A	; 138
    1760:	f1 e0       	ldi	r31, 0x01	; 1
    1762:	23 e4       	ldi	r18, 0x43	; 67
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	19 c0       	rjmp	.+50     	; 0x179a <CALLBACK_NONDFU_USB_GetDescriptor+0x54>
            case DTYPE_Configuration:
                Address = (void*)&ConfigurationDescriptor;
                Size    = sizeof(USB_Descriptor_Configuration_t);
                break;
            case DTYPE_String:
                switch (DescriptorNumber)
    1768:	81 30       	cpi	r24, 0x01	; 1
    176a:	49 f0       	breq	.+18     	; 0x177e <CALLBACK_NONDFU_USB_GetDescriptor+0x38>
    176c:	81 30       	cpi	r24, 0x01	; 1
    176e:	18 f0       	brcs	.+6      	; 0x1776 <CALLBACK_NONDFU_USB_GetDescriptor+0x30>
    1770:	82 30       	cpi	r24, 0x02	; 2
    1772:	79 f4       	brne	.+30     	; 0x1792 <CALLBACK_NONDFU_USB_GetDescriptor+0x4c>
    1774:	08 c0       	rjmp	.+16     	; 0x1786 <CALLBACK_NONDFU_USB_GetDescriptor+0x40>
                {
                    case 0x00:
                        Address = (void*)&LanguageString;
                        Size    = pgm_read_byte(&LanguageString.Header.Size);
    1776:	eb ec       	ldi	r30, 0xCB	; 203
    1778:	fe e3       	ldi	r31, 0x3E	; 62
    177a:	84 91       	lpm	r24, Z+
    177c:	07 c0       	rjmp	.+14     	; 0x178c <CALLBACK_NONDFU_USB_GetDescriptor+0x46>
                        break;
                    case 0x01:
                        Address = (void*)&ManufacturerString;
                        Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    177e:	ed ec       	ldi	r30, 0xCD	; 205
    1780:	f1 e0       	ldi	r31, 0x01	; 1
    1782:	84 91       	lpm	r24, Z+
    1784:	03 c0       	rjmp	.+6      	; 0x178c <CALLBACK_NONDFU_USB_GetDescriptor+0x46>
                        break;
                    case 0x02:
                        Address = (void*)&ProductString;
                        Size    = pgm_read_byte(&ProductString.Header.Size);
    1786:	e7 ee       	ldi	r30, 0xE7	; 231
    1788:	f1 e0       	ldi	r31, 0x01	; 1
    178a:	84 91       	lpm	r24, Z+
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	04 c0       	rjmp	.+8      	; 0x179a <CALLBACK_NONDFU_USB_GetDescriptor+0x54>
    1792:	e0 e0       	ldi	r30, 0x00	; 0
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	30 e0       	ldi	r19, 0x00	; 0
                }

                break;
        }
	
	*DescriptorAddress = Address;
    179a:	ed 93       	st	X+, r30
    179c:	fc 93       	st	X, r31
	return Size;
}
    179e:	c9 01       	movw	r24, r18
    17a0:	08 95       	ret

000017a2 <Buffer_Initialize>:
#include <stdint.h>
#endif
#include "RingBuff.h"

void Buffer_Initialize(RingBuff_t* Buffer)
{
    17a2:	fc 01       	movw	r30, r24
	BUFF_ATOMIC_BLOCK
    17a4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    17a6:	f8 94       	cli
	{
		Buffer->InPtr    = (RingBuff_Data_t*)&Buffer->Buffer;
    17a8:	f1 ab       	std	Z+49, r31	; 0x31
    17aa:	e0 ab       	std	Z+48, r30	; 0x30
		Buffer->OutPtr   = (RingBuff_Data_t*)&Buffer->Buffer;
    17ac:	f3 ab       	std	Z+51, r31	; 0x33
    17ae:	e2 ab       	std	Z+50, r30	; 0x32
		Buffer->Elements = 0;
    17b0:	14 aa       	std	Z+52, r1	; 0x34
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    17b2:	8f bf       	out	0x3f, r24	; 63
	}
}
    17b4:	08 95       	ret

000017b6 <Buffer_StoreElement>:

void Buffer_StoreElement(RingBuff_t* Buffer, RingBuff_Data_t Data)
{
    17b6:	dc 01       	movw	r26, r24
	BUFF_ATOMIC_BLOCK
    17b8:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    17ba:	f8 94       	cli
	{
	#if defined(BUFF_DROPOLD)
		if (Buffer->Elements == BUFF_LENGTH)
    17bc:	d4 96       	adiw	r26, 0x34	; 52
    17be:	8c 91       	ld	r24, X
    17c0:	d4 97       	sbiw	r26, 0x34	; 52
    17c2:	80 33       	cpi	r24, 0x30	; 48
    17c4:	d1 f4       	brne	.+52     	; 0x17fa <Buffer_StoreElement+0x44>
		{
			Buffer->OutPtr++;
    17c6:	d2 96       	adiw	r26, 0x32	; 50
    17c8:	8d 91       	ld	r24, X+
    17ca:	9c 91       	ld	r25, X
    17cc:	d3 97       	sbiw	r26, 0x33	; 51
    17ce:	01 96       	adiw	r24, 0x01	; 1
    17d0:	d3 96       	adiw	r26, 0x33	; 51
    17d2:	9c 93       	st	X, r25
    17d4:	8e 93       	st	-X, r24
    17d6:	d2 97       	sbiw	r26, 0x32	; 50
	
			if (Buffer->OutPtr == &Buffer->Buffer[BUFF_LENGTH])
    17d8:	d2 96       	adiw	r26, 0x32	; 50
    17da:	2d 91       	ld	r18, X+
    17dc:	3c 91       	ld	r19, X
    17de:	d3 97       	sbiw	r26, 0x33	; 51
    17e0:	cd 01       	movw	r24, r26
    17e2:	c0 96       	adiw	r24, 0x30	; 48
    17e4:	28 17       	cp	r18, r24
    17e6:	39 07       	cpc	r19, r25
    17e8:	79 f4       	brne	.+30     	; 0x1808 <Buffer_StoreElement+0x52>
			  Buffer->OutPtr = (RingBuff_Data_t*)&Buffer->Buffer;
    17ea:	0a 2e       	mov	r0, r26
    17ec:	1b 2e       	mov	r1, r27
    17ee:	d3 96       	adiw	r26, 0x33	; 51
    17f0:	1c 92       	st	X, r1
    17f2:	0e 92       	st	-X, r0
    17f4:	11 24       	eor	r1, r1
    17f6:	d2 97       	sbiw	r26, 0x32	; 50
    17f8:	07 c0       	rjmp	.+14     	; 0x1808 <Buffer_StoreElement+0x52>
		}
		else
		{
			Buffer->Elements++;
    17fa:	d4 96       	adiw	r26, 0x34	; 52
    17fc:	8c 91       	ld	r24, X
    17fe:	d4 97       	sbiw	r26, 0x34	; 52
    1800:	8f 5f       	subi	r24, 0xFF	; 255
    1802:	d4 96       	adiw	r26, 0x34	; 52
    1804:	8c 93       	st	X, r24
    1806:	d4 97       	sbiw	r26, 0x34	; 52
		  Buffer->Elements++;
	#elif defined(BUFF_NODROPCHECK)
		  Buffer->Elements++;
	#endif
	
		*(Buffer->InPtr) = Data;
    1808:	d0 96       	adiw	r26, 0x30	; 48
    180a:	ed 91       	ld	r30, X+
    180c:	fc 91       	ld	r31, X
    180e:	d1 97       	sbiw	r26, 0x31	; 49
    1810:	60 83       	st	Z, r22
		Buffer->InPtr++;
    1812:	d0 96       	adiw	r26, 0x30	; 48
    1814:	8d 91       	ld	r24, X+
    1816:	9c 91       	ld	r25, X
    1818:	d1 97       	sbiw	r26, 0x31	; 49
    181a:	01 96       	adiw	r24, 0x01	; 1
    181c:	d1 96       	adiw	r26, 0x31	; 49
    181e:	9c 93       	st	X, r25
    1820:	8e 93       	st	-X, r24
    1822:	d0 97       	sbiw	r26, 0x30	; 48
	
		if (Buffer->InPtr == &Buffer->Buffer[BUFF_LENGTH])
    1824:	d0 96       	adiw	r26, 0x30	; 48
    1826:	2d 91       	ld	r18, X+
    1828:	3c 91       	ld	r19, X
    182a:	d1 97       	sbiw	r26, 0x31	; 49
    182c:	cd 01       	movw	r24, r26
    182e:	c0 96       	adiw	r24, 0x30	; 48
    1830:	28 17       	cp	r18, r24
    1832:	39 07       	cpc	r19, r25
    1834:	39 f4       	brne	.+14     	; 0x1844 <Buffer_StoreElement+0x8e>
		  Buffer->InPtr = (RingBuff_Data_t*)&Buffer->Buffer;
    1836:	0a 2e       	mov	r0, r26
    1838:	1b 2e       	mov	r1, r27
    183a:	d1 96       	adiw	r26, 0x31	; 49
    183c:	1c 92       	st	X, r1
    183e:	0e 92       	st	-X, r0
    1840:	11 24       	eor	r1, r1
    1842:	d0 97       	sbiw	r26, 0x30	; 48
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1844:	4f bf       	out	0x3f, r20	; 63
	}
}
    1846:	08 95       	ret

00001848 <Buffer_GetElement>:

RingBuff_Data_t Buffer_GetElement(RingBuff_t* Buffer)
{
    1848:	dc 01       	movw	r26, r24
	RingBuff_Data_t BuffData;
	
	BUFF_ATOMIC_BLOCK
    184a:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    184c:	f8 94       	cli
	{
#if defined(BUFF_EMPTYRETURNSZERO)
		if (!(Buffer->Elements))
    184e:	d4 96       	adiw	r26, 0x34	; 52
    1850:	8c 91       	ld	r24, X
    1852:	d4 97       	sbiw	r26, 0x34	; 52
    1854:	88 23       	and	r24, r24
    1856:	19 f4       	brne	.+6      	; 0x185e <Buffer_GetElement+0x16>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1858:	4f bf       	out	0x3f, r20	; 63
    __asm__ volatile ("" ::: "memory");
    185a:	e0 e0       	ldi	r30, 0x00	; 0
    185c:	26 c0       	rjmp	.+76     	; 0x18aa <Buffer_GetElement+0x62>
		  return 0;
#elif !defined(BUFF_NOEMPTYCHECK)
	#error No empty buffer check behavior specified.
#endif

		BuffData = *(Buffer->OutPtr);
    185e:	d2 96       	adiw	r26, 0x32	; 50
    1860:	ed 91       	ld	r30, X+
    1862:	fc 91       	ld	r31, X
    1864:	d3 97       	sbiw	r26, 0x33	; 51
    1866:	e0 81       	ld	r30, Z
	
		Buffer->OutPtr++;
    1868:	d2 96       	adiw	r26, 0x32	; 50
    186a:	8d 91       	ld	r24, X+
    186c:	9c 91       	ld	r25, X
    186e:	d3 97       	sbiw	r26, 0x33	; 51
    1870:	01 96       	adiw	r24, 0x01	; 1
    1872:	d3 96       	adiw	r26, 0x33	; 51
    1874:	9c 93       	st	X, r25
    1876:	8e 93       	st	-X, r24
    1878:	d2 97       	sbiw	r26, 0x32	; 50
		Buffer->Elements--;
    187a:	d4 96       	adiw	r26, 0x34	; 52
    187c:	8c 91       	ld	r24, X
    187e:	d4 97       	sbiw	r26, 0x34	; 52
    1880:	81 50       	subi	r24, 0x01	; 1
    1882:	d4 96       	adiw	r26, 0x34	; 52
    1884:	8c 93       	st	X, r24
    1886:	d4 97       	sbiw	r26, 0x34	; 52
	
		if (Buffer->OutPtr == &Buffer->Buffer[BUFF_LENGTH])
    1888:	d2 96       	adiw	r26, 0x32	; 50
    188a:	2d 91       	ld	r18, X+
    188c:	3c 91       	ld	r19, X
    188e:	d3 97       	sbiw	r26, 0x33	; 51
    1890:	cd 01       	movw	r24, r26
    1892:	c0 96       	adiw	r24, 0x30	; 48
    1894:	28 17       	cp	r18, r24
    1896:	39 07       	cpc	r19, r25
    1898:	39 f4       	brne	.+14     	; 0x18a8 <Buffer_GetElement+0x60>
		  Buffer->OutPtr = (RingBuff_Data_t*)&Buffer->Buffer;
    189a:	0a 2e       	mov	r0, r26
    189c:	1b 2e       	mov	r1, r27
    189e:	d3 96       	adiw	r26, 0x33	; 51
    18a0:	1c 92       	st	X, r1
    18a2:	0e 92       	st	-X, r0
    18a4:	11 24       	eor	r1, r1
    18a6:	d2 97       	sbiw	r26, 0x32	; 50
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    18a8:	4f bf       	out	0x3f, r20	; 63
	}
	
	return BuffData;
}
    18aa:	8e 2f       	mov	r24, r30
    18ac:	08 95       	ret

000018ae <CDC_Device_Event_Stub>:
#include "CDC.h"

void CDC_Device_Event_Stub(void)
{

}
    18ae:	08 95       	ret

000018b0 <CDC_Device_BytesReceived>:
	
	return ENDPOINT_READYWAIT_NoError;
}

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    18b0:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    18b2:	80 91 0e 01 	lds	r24, 0x010E
    18b6:	84 30       	cpi	r24, 0x04	; 4
    18b8:	09 f5       	brne	.+66     	; 0x18fc <CDC_Device_BytesReceived+0x4c>
    18ba:	87 85       	ldd	r24, Z+15	; 0x0f
    18bc:	90 89       	ldd	r25, Z+16	; 0x10
    18be:	a1 89       	ldd	r26, Z+17	; 0x11
    18c0:	b2 89       	ldd	r27, Z+18	; 0x12
    18c2:	00 97       	sbiw	r24, 0x00	; 0
    18c4:	a1 05       	cpc	r26, r1
    18c6:	b1 05       	cpc	r27, r1
    18c8:	c9 f0       	breq	.+50     	; 0x18fc <CDC_Device_BytesReceived+0x4c>
	  return 0;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
    18ca:	85 81       	ldd	r24, Z+5	; 0x05
    18cc:	80 93 e9 00 	sts	0x00E9, r24

	if (Endpoint_IsOUTReceived() && !(Endpoint_BytesInEndpoint()))
    18d0:	80 91 e8 00 	lds	r24, 0x00E8
    18d4:	82 ff       	sbrs	r24, 2
    18d6:	0d c0       	rjmp	.+26     	; 0x18f2 <CDC_Device_BytesReceived+0x42>
    18d8:	80 91 f2 00 	lds	r24, 0x00F2
    18dc:	88 23       	and	r24, r24
    18de:	49 f4       	brne	.+18     	; 0x18f2 <CDC_Device_BytesReceived+0x42>
	  Endpoint_ClearOUT();
    18e0:	80 91 e8 00 	lds	r24, 0x00E8
    18e4:	98 2f       	mov	r25, r24
    18e6:	9b 7f       	andi	r25, 0xFB	; 251
    18e8:	90 93 e8 00 	sts	0x00E8, r25
    18ec:	8f 77       	andi	r24, 0x7F	; 127
    18ee:	80 93 e8 00 	sts	0x00E8, r24

	return Endpoint_BytesInEndpoint();
    18f2:	80 91 f2 00 	lds	r24, 0x00F2
    18f6:	28 2f       	mov	r18, r24
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	02 c0       	rjmp	.+4      	; 0x1900 <CDC_Device_BytesReceived+0x50>
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
}
    1900:	c9 01       	movw	r24, r18
    1902:	08 95       	ret

00001904 <CDC_Device_ReceiveByte>:

uint8_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* CDCInterfaceInfo)
{
    1904:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1906:	80 91 0e 01 	lds	r24, 0x010E
    190a:	84 30       	cpi	r24, 0x04	; 4
    190c:	d9 f4       	brne	.+54     	; 0x1944 <CDC_Device_ReceiveByte+0x40>
    190e:	87 85       	ldd	r24, Z+15	; 0x0f
    1910:	90 89       	ldd	r25, Z+16	; 0x10
    1912:	a1 89       	ldd	r26, Z+17	; 0x11
    1914:	b2 89       	ldd	r27, Z+18	; 0x12
    1916:	00 97       	sbiw	r24, 0x00	; 0
    1918:	a1 05       	cpc	r26, r1
    191a:	b1 05       	cpc	r27, r1
    191c:	99 f0       	breq	.+38     	; 0x1944 <CDC_Device_ReceiveByte+0x40>
	  return 0;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
    191e:	85 81       	ldd	r24, Z+5	; 0x05
    1920:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Next byte in the currently selected endpoint's FIFO buffer
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    1924:	20 91 f1 00 	lds	r18, 0x00F1
	
	uint8_t DataByte = Endpoint_Read_Byte();
	
	if (!(Endpoint_BytesInEndpoint()))
    1928:	80 91 f2 00 	lds	r24, 0x00F2
    192c:	88 23       	and	r24, r24
    192e:	59 f4       	brne	.+22     	; 0x1946 <CDC_Device_ReceiveByte+0x42>
	  Endpoint_ClearOUT();
    1930:	80 91 e8 00 	lds	r24, 0x00E8
    1934:	98 2f       	mov	r25, r24
    1936:	9b 7f       	andi	r25, 0xFB	; 251
    1938:	90 93 e8 00 	sts	0x00E8, r25
    193c:	8f 77       	andi	r24, 0x7F	; 127
    193e:	80 93 e8 00 	sts	0x00E8, r24
    1942:	01 c0       	rjmp	.+2      	; 0x1946 <CDC_Device_ReceiveByte+0x42>
    1944:	20 e0       	ldi	r18, 0x00	; 0
	  
	return DataByte;
}
    1946:	82 2f       	mov	r24, r18
    1948:	08 95       	ret

0000194a <CDC_Device_Flush>:
	Endpoint_Write_Byte(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    194a:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    194c:	80 91 0e 01 	lds	r24, 0x010E
    1950:	84 30       	cpi	r24, 0x04	; 4
    1952:	51 f5       	brne	.+84     	; 0x19a8 <CDC_Device_Flush+0x5e>
    1954:	87 85       	ldd	r24, Z+15	; 0x0f
    1956:	90 89       	ldd	r25, Z+16	; 0x10
    1958:	a1 89       	ldd	r26, Z+17	; 0x11
    195a:	b2 89       	ldd	r27, Z+18	; 0x12
    195c:	00 97       	sbiw	r24, 0x00	; 0
    195e:	a1 05       	cpc	r26, r1
    1960:	b1 05       	cpc	r27, r1
    1962:	11 f1       	breq	.+68     	; 0x19a8 <CDC_Device_Flush+0x5e>
	  return ENDPOINT_READYWAIT_NoError;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
    1964:	81 81       	ldd	r24, Z+1	; 0x01
    1966:	80 93 e9 00 	sts	0x00E9, r24

	if (!(Endpoint_BytesInEndpoint()))
    196a:	80 91 f2 00 	lds	r24, 0x00F2
    196e:	88 23       	and	r24, r24
    1970:	d9 f0       	breq	.+54     	; 0x19a8 <CDC_Device_Flush+0x5e>
	  return ENDPOINT_READYWAIT_NoError;
	
	bool BankFull = !(Endpoint_IsReadWriteAllowed());
    1972:	80 91 e8 00 	lds	r24, 0x00E8
	
	Endpoint_ClearIN();
    1976:	90 91 e8 00 	lds	r25, 0x00E8
    197a:	29 2f       	mov	r18, r25
    197c:	2e 7f       	andi	r18, 0xFE	; 254
    197e:	20 93 e8 00 	sts	0x00E8, r18
    1982:	9f 77       	andi	r25, 0x7F	; 127
    1984:	90 93 e8 00 	sts	0x00E8, r25
	
	if (BankFull)
    1988:	85 fd       	sbrc	r24, 5
    198a:	0e c0       	rjmp	.+28     	; 0x19a8 <CDC_Device_Flush+0x5e>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    198c:	09 d1       	rcall	.+530    	; 0x1ba0 <Endpoint_WaitUntilReady>
    198e:	28 2f       	mov	r18, r24
    1990:	88 23       	and	r24, r24
    1992:	59 f4       	brne	.+22     	; 0x19aa <CDC_Device_Flush+0x60>
		  return ErrorCode;

		Endpoint_ClearIN();
    1994:	80 91 e8 00 	lds	r24, 0x00E8
    1998:	98 2f       	mov	r25, r24
    199a:	9e 7f       	andi	r25, 0xFE	; 254
    199c:	90 93 e8 00 	sts	0x00E8, r25
    19a0:	8f 77       	andi	r24, 0x7F	; 127
    19a2:	80 93 e8 00 	sts	0x00E8, r24
    19a6:	01 c0       	rjmp	.+2      	; 0x19aa <CDC_Device_Flush+0x60>
    19a8:	20 e0       	ldi	r18, 0x00	; 0
	}
	
	return ENDPOINT_READYWAIT_NoError;
}
    19aa:	82 2f       	mov	r24, r18
    19ac:	08 95       	ret

000019ae <CDC_Device_USBTask>:

	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* CDCInterfaceInfo)
{
    19ae:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    19b0:	80 91 0e 01 	lds	r24, 0x010E
    19b4:	84 30       	cpi	r24, 0x04	; 4
    19b6:	f1 f4       	brne	.+60     	; 0x19f4 <CDC_Device_USBTask+0x46>
    19b8:	87 85       	ldd	r24, Z+15	; 0x0f
    19ba:	90 89       	ldd	r25, Z+16	; 0x10
    19bc:	a1 89       	ldd	r26, Z+17	; 0x11
    19be:	b2 89       	ldd	r27, Z+18	; 0x12
    19c0:	00 97       	sbiw	r24, 0x00	; 0
    19c2:	a1 05       	cpc	r26, r1
    19c4:	b1 05       	cpc	r27, r1
    19c6:	b1 f0       	breq	.+44     	; 0x19f4 <CDC_Device_USBTask+0x46>
	  return;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
    19c8:	85 81       	ldd	r24, Z+5	; 0x05
    19ca:	80 93 e9 00 	sts	0x00E9, r24

	if (Endpoint_IsOUTReceived() && !(Endpoint_BytesInEndpoint()))
    19ce:	80 91 e8 00 	lds	r24, 0x00E8
    19d2:	82 ff       	sbrs	r24, 2
    19d4:	0d c0       	rjmp	.+26     	; 0x19f0 <CDC_Device_USBTask+0x42>
    19d6:	80 91 f2 00 	lds	r24, 0x00F2
    19da:	88 23       	and	r24, r24
    19dc:	49 f4       	brne	.+18     	; 0x19f0 <CDC_Device_USBTask+0x42>
	  Endpoint_ClearOUT();
    19de:	80 91 e8 00 	lds	r24, 0x00E8
    19e2:	98 2f       	mov	r25, r24
    19e4:	9b 7f       	andi	r25, 0xFB	; 251
    19e6:	90 93 e8 00 	sts	0x00E8, r25
    19ea:	8f 77       	andi	r24, 0x7F	; 127
    19ec:	80 93 e8 00 	sts	0x00E8, r24
	  
	CDC_Device_Flush(CDCInterfaceInfo);
    19f0:	cf 01       	movw	r24, r30
    19f2:	ab cf       	rjmp	.-170    	; 0x194a <CDC_Device_Flush>
    19f4:	08 95       	ret

000019f6 <CDC_Device_SendByte>:
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
	return Endpoint_Write_Stream_LE(Data, Length, NO_STREAM_CALLBACK);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo, const uint8_t Data)
{
    19f6:	1f 93       	push	r17
    19f8:	fc 01       	movw	r30, r24
    19fa:	16 2f       	mov	r17, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    19fc:	80 91 0e 01 	lds	r24, 0x010E
    1a00:	84 30       	cpi	r24, 0x04	; 4
    1a02:	e9 f4       	brne	.+58     	; 0x1a3e <CDC_Device_SendByte+0x48>
    1a04:	87 85       	ldd	r24, Z+15	; 0x0f
    1a06:	90 89       	ldd	r25, Z+16	; 0x10
    1a08:	a1 89       	ldd	r26, Z+17	; 0x11
    1a0a:	b2 89       	ldd	r27, Z+18	; 0x12
    1a0c:	00 97       	sbiw	r24, 0x00	; 0
    1a0e:	a1 05       	cpc	r26, r1
    1a10:	b1 05       	cpc	r27, r1
    1a12:	a9 f0       	breq	.+42     	; 0x1a3e <CDC_Device_SendByte+0x48>
	  return ENDPOINT_READYWAIT_NoError;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
    1a14:	81 81       	ldd	r24, Z+1	; 0x01
    1a16:	80 93 e9 00 	sts	0x00E9, r24

	if (!(Endpoint_IsReadWriteAllowed()))
    1a1a:	80 91 e8 00 	lds	r24, 0x00E8
    1a1e:	85 fd       	sbrc	r24, 5
    1a20:	0c c0       	rjmp	.+24     	; 0x1a3a <CDC_Device_SendByte+0x44>
	{	
		Endpoint_ClearIN();
    1a22:	80 91 e8 00 	lds	r24, 0x00E8
    1a26:	98 2f       	mov	r25, r24
    1a28:	9e 7f       	andi	r25, 0xFE	; 254
    1a2a:	90 93 e8 00 	sts	0x00E8, r25
    1a2e:	8f 77       	andi	r24, 0x7F	; 127
    1a30:	80 93 e8 00 	sts	0x00E8, r24

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    1a34:	b5 d0       	rcall	.+362    	; 0x1ba0 <Endpoint_WaitUntilReady>
    1a36:	88 23       	and	r24, r24
    1a38:	19 f4       	brne	.+6      	; 0x1a40 <CDC_Device_SendByte+0x4a>
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    1a3a:	10 93 f1 00 	sts	0x00F1, r17
		  return ErrorCode;
	}

	Endpoint_Write_Byte(Data);
	return ENDPOINT_READYWAIT_NoError;
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
}
    1a40:	1f 91       	pop	r17
    1a42:	08 95       	ret

00001a44 <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* CDCInterfaceInfo)
{
    1a44:	0f 93       	push	r16
    1a46:	1f 93       	push	r17
    1a48:	cf 93       	push	r28
    1a4a:	df 93       	push	r29
    1a4c:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    1a4e:	0d 96       	adiw	r24, 0x0d	; 13
    1a50:	fc 01       	movw	r30, r24
    1a52:	89 e0       	ldi	r24, 0x09	; 9
    1a54:	df 01       	movw	r26, r30
    1a56:	1d 92       	st	X+, r1
    1a58:	8a 95       	dec	r24
    1a5a:	e9 f7       	brne	.-6      	; 0x1a56 <CDC_Device_ConfigureEndpoints+0x12>

	if (!(Endpoint_ConfigureEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber, EP_TYPE_BULK,
    1a5c:	09 81       	ldd	r16, Y+1	; 0x01
    1a5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a60:	88 23       	and	r24, r24
    1a62:	11 f4       	brne	.+4      	; 0x1a68 <CDC_Device_ConfigureEndpoints+0x24>
    1a64:	12 e0       	ldi	r17, 0x02	; 2
    1a66:	01 c0       	rjmp	.+2      	; 0x1a6a <CDC_Device_ConfigureEndpoints+0x26>
    1a68:	16 e0       	ldi	r17, 0x06	; 6
    1a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a6e:	0e 94 61 18 	call	0x30c2	; 0x30c2 <Endpoint_BytesToEPSizeMaskDynamic>
    1a72:	18 2b       	or	r17, r24
    1a74:	80 2f       	mov	r24, r16
    1a76:	61 e8       	ldi	r22, 0x81	; 129
    1a78:	41 2f       	mov	r20, r17
    1a7a:	0e 94 6f 18 	call	0x30de	; 0x30de <Endpoint_ConfigureEndpoint_Prv>
    1a7e:	88 23       	and	r24, r24
    1a80:	41 f1       	breq	.+80     	; 0x1ad2 <CDC_Device_ConfigureEndpoints+0x8e>
							         CDCInterfaceInfo->Config.DataINEndpointDoubleBank ? ENDPOINT_BANK_DOUBLE : ENDPOINT_BANK_SINGLE)))
	{
		return false;
	}

	if (!(Endpoint_ConfigureEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber, EP_TYPE_BULK,
    1a82:	0d 81       	ldd	r16, Y+5	; 0x05
    1a84:	88 85       	ldd	r24, Y+8	; 0x08
    1a86:	88 23       	and	r24, r24
    1a88:	11 f4       	brne	.+4      	; 0x1a8e <CDC_Device_ConfigureEndpoints+0x4a>
    1a8a:	12 e0       	ldi	r17, 0x02	; 2
    1a8c:	01 c0       	rjmp	.+2      	; 0x1a90 <CDC_Device_ConfigureEndpoints+0x4c>
    1a8e:	16 e0       	ldi	r17, 0x06	; 6
    1a90:	8e 81       	ldd	r24, Y+6	; 0x06
    1a92:	9f 81       	ldd	r25, Y+7	; 0x07
    1a94:	0e 94 61 18 	call	0x30c2	; 0x30c2 <Endpoint_BytesToEPSizeMaskDynamic>
    1a98:	18 2b       	or	r17, r24
    1a9a:	80 2f       	mov	r24, r16
    1a9c:	60 e8       	ldi	r22, 0x80	; 128
    1a9e:	41 2f       	mov	r20, r17
    1aa0:	0e 94 6f 18 	call	0x30de	; 0x30de <Endpoint_ConfigureEndpoint_Prv>
    1aa4:	88 23       	and	r24, r24
    1aa6:	a9 f0       	breq	.+42     	; 0x1ad2 <CDC_Device_ConfigureEndpoints+0x8e>
	                                 CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank ? ENDPOINT_BANK_DOUBLE : ENDPOINT_BANK_SINGLE)))
	{
		return false;
	}

	if (!(Endpoint_ConfigureEndpoint(CDCInterfaceInfo->Config.NotificationEndpointNumber, EP_TYPE_INTERRUPT,
    1aa8:	09 85       	ldd	r16, Y+9	; 0x09
    1aaa:	8c 85       	ldd	r24, Y+12	; 0x0c
    1aac:	88 23       	and	r24, r24
    1aae:	11 f4       	brne	.+4      	; 0x1ab4 <CDC_Device_ConfigureEndpoints+0x70>
    1ab0:	12 e0       	ldi	r17, 0x02	; 2
    1ab2:	01 c0       	rjmp	.+2      	; 0x1ab6 <CDC_Device_ConfigureEndpoints+0x72>
    1ab4:	16 e0       	ldi	r17, 0x06	; 6
    1ab6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ab8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1aba:	0e 94 61 18 	call	0x30c2	; 0x30c2 <Endpoint_BytesToEPSizeMaskDynamic>
    1abe:	18 2b       	or	r17, r24
    1ac0:	80 2f       	mov	r24, r16
    1ac2:	61 ec       	ldi	r22, 0xC1	; 193
    1ac4:	41 2f       	mov	r20, r17
    1ac6:	0e 94 6f 18 	call	0x30de	; 0x30de <Endpoint_ConfigureEndpoint_Prv>
    1aca:	88 23       	and	r24, r24
    1acc:	19 f0       	breq	.+6      	; 0x1ad4 <CDC_Device_ConfigureEndpoints+0x90>
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	01 c0       	rjmp	.+2      	; 0x1ad4 <CDC_Device_ConfigureEndpoints+0x90>
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
	{
		return false;
	}

	return true;
}
    1ad4:	df 91       	pop	r29
    1ad6:	cf 91       	pop	r28
    1ad8:	1f 91       	pop	r17
    1ada:	0f 91       	pop	r16
    1adc:	08 95       	ret

00001ade <CDC_Device_ProcessControlRequest>:
{

}

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* CDCInterfaceInfo)
{
    1ade:	cf 93       	push	r28
    1ae0:	df 93       	push	r29
    1ae2:	ec 01       	movw	r28, r24
	if (!(Endpoint_IsSETUPReceived()))
    1ae4:	80 91 e8 00 	lds	r24, 0x00E8
    1ae8:	83 ff       	sbrs	r24, 3
    1aea:	57 c0       	rjmp	.+174    	; 0x1b9a <CDC_Device_ProcessControlRequest+0xbc>
	  return;
	  
	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    1aec:	88 81       	ld	r24, Y
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	20 91 0a 01 	lds	r18, 0x010A
    1af4:	30 91 0b 01 	lds	r19, 0x010B
    1af8:	28 17       	cp	r18, r24
    1afa:	39 07       	cpc	r19, r25
    1afc:	09 f0       	breq	.+2      	; 0x1b00 <CDC_Device_ProcessControlRequest+0x22>
    1afe:	4d c0       	rjmp	.+154    	; 0x1b9a <CDC_Device_ProcessControlRequest+0xbc>
	  return;

	switch (USB_ControlRequest.bRequest)
    1b00:	80 91 07 01 	lds	r24, 0x0107
    1b04:	81 32       	cpi	r24, 0x21	; 33
    1b06:	31 f0       	breq	.+12     	; 0x1b14 <CDC_Device_ProcessControlRequest+0x36>
    1b08:	82 32       	cpi	r24, 0x22	; 34
    1b0a:	b9 f1       	breq	.+110    	; 0x1b7a <CDC_Device_ProcessControlRequest+0x9c>
    1b0c:	80 32       	cpi	r24, 0x20	; 32
    1b0e:	09 f0       	breq	.+2      	; 0x1b12 <CDC_Device_ProcessControlRequest+0x34>
    1b10:	44 c0       	rjmp	.+136    	; 0x1b9a <CDC_Device_ProcessControlRequest+0xbc>
    1b12:	19 c0       	rjmp	.+50     	; 0x1b46 <CDC_Device_ProcessControlRequest+0x68>
	{
		case REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1b14:	80 91 06 01 	lds	r24, 0x0106
    1b18:	81 3a       	cpi	r24, 0xA1	; 161
    1b1a:	09 f0       	breq	.+2      	; 0x1b1e <CDC_Device_ProcessControlRequest+0x40>
    1b1c:	3e c0       	rjmp	.+124    	; 0x1b9a <CDC_Device_ProcessControlRequest+0xbc>
			{
				Endpoint_ClearSETUP();
    1b1e:	80 91 e8 00 	lds	r24, 0x00E8
    1b22:	87 7f       	andi	r24, 0xF7	; 247
    1b24:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_Write_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
    1b28:	ce 01       	movw	r24, r28
    1b2a:	0f 96       	adiw	r24, 0x0f	; 15
    1b2c:	67 e0       	ldi	r22, 0x07	; 7
    1b2e:	70 e0       	ldi	r23, 0x00	; 0
    1b30:	62 d0       	rcall	.+196    	; 0x1bf6 <Endpoint_Write_Control_Stream_LE>
				Endpoint_ClearOUT();
    1b32:	80 91 e8 00 	lds	r24, 0x00E8
    1b36:	98 2f       	mov	r25, r24
    1b38:	9b 7f       	andi	r25, 0xFB	; 251
    1b3a:	90 93 e8 00 	sts	0x00E8, r25
    1b3e:	8f 77       	andi	r24, 0x7F	; 127
    1b40:	80 93 e8 00 	sts	0x00E8, r24
    1b44:	2a c0       	rjmp	.+84     	; 0x1b9a <CDC_Device_ProcessControlRequest+0xbc>
			}
			
			break;
		case REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1b46:	80 91 06 01 	lds	r24, 0x0106
    1b4a:	81 32       	cpi	r24, 0x21	; 33
    1b4c:	31 f5       	brne	.+76     	; 0x1b9a <CDC_Device_ProcessControlRequest+0xbc>
			{
				Endpoint_ClearSETUP();
    1b4e:	80 91 e8 00 	lds	r24, 0x00E8
    1b52:	87 7f       	andi	r24, 0xF7	; 247
    1b54:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_Read_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
    1b58:	ce 01       	movw	r24, r28
    1b5a:	0f 96       	adiw	r24, 0x0f	; 15
    1b5c:	67 e0       	ldi	r22, 0x07	; 7
    1b5e:	70 e0       	ldi	r23, 0x00	; 0
    1b60:	a8 d0       	rcall	.+336    	; 0x1cb2 <Endpoint_Read_Control_Stream_LE>
				Endpoint_ClearIN();
    1b62:	80 91 e8 00 	lds	r24, 0x00E8
    1b66:	98 2f       	mov	r25, r24
    1b68:	9e 7f       	andi	r25, 0xFE	; 254
    1b6a:	90 93 e8 00 	sts	0x00E8, r25
    1b6e:	8f 77       	andi	r24, 0x7F	; 127
    1b70:	80 93 e8 00 	sts	0x00E8, r24

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    1b74:	ce 01       	movw	r24, r28
    1b76:	9b de       	rcall	.-714    	; 0x18ae <CDC_Device_Event_Stub>
    1b78:	10 c0       	rjmp	.+32     	; 0x1b9a <CDC_Device_ProcessControlRequest+0xbc>
			}
	
			break;
		case REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1b7a:	80 91 06 01 	lds	r24, 0x0106
    1b7e:	81 32       	cpi	r24, 0x21	; 33
    1b80:	61 f4       	brne	.+24     	; 0x1b9a <CDC_Device_ProcessControlRequest+0xbc>
			{				
				Endpoint_ClearSETUP();
    1b82:	80 91 e8 00 	lds	r24, 0x00E8
    1b86:	87 7f       	andi	r24, 0xF7	; 247
    1b88:	80 93 e8 00 	sts	0x00E8, r24
				
				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    1b8c:	80 91 08 01 	lds	r24, 0x0108
    1b90:	8d 87       	std	Y+13, r24	; 0x0d
				
				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    1b92:	ce 01       	movw	r24, r28
    1b94:	8c de       	rcall	.-744    	; 0x18ae <CDC_Device_Event_Stub>

				Endpoint_ClearStatusStage();
    1b96:	0e 94 99 18 	call	0x3132	; 0x3132 <Endpoint_ClearStatusStage>
			}
	
			break;
	}
}
    1b9a:	df 91       	pop	r29
    1b9c:	cf 91       	pop	r28
    1b9e:	08 95       	ret

00001ba0 <Endpoint_WaitUntilReady>:
}
#endif

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
    1ba0:	94 e6       	ldi	r25, 0x64	; 100
	uint16_t TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
	#endif

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
    1ba2:	80 91 ec 00 	lds	r24, 0x00EC
    1ba6:	80 ff       	sbrs	r24, 0
    1ba8:	05 c0       	rjmp	.+10     	; 0x1bb4 <Endpoint_WaitUntilReady+0x14>
		{
			if (Endpoint_IsINReady())
    1baa:	80 91 e8 00 	lds	r24, 0x00E8
    1bae:	80 ff       	sbrs	r24, 0
    1bb0:	05 c0       	rjmp	.+10     	; 0x1bbc <Endpoint_WaitUntilReady+0x1c>
    1bb2:	1f c0       	rjmp	.+62     	; 0x1bf2 <Endpoint_WaitUntilReady+0x52>
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1bb4:	80 91 e8 00 	lds	r24, 0x00E8
    1bb8:	82 fd       	sbrc	r24, 2
    1bba:	1b c0       	rjmp	.+54     	; 0x1bf2 <Endpoint_WaitUntilReady+0x52>
			  return ENDPOINT_READYWAIT_NoError;		
		}
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
    1bbc:	80 91 0e 01 	lds	r24, 0x010E
    1bc0:	88 23       	and	r24, r24
    1bc2:	11 f4       	brne	.+4      	; 0x1bc8 <Endpoint_WaitUntilReady+0x28>
    1bc4:	82 e0       	ldi	r24, 0x02	; 2
    1bc6:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (Endpoint_IsStalled())
    1bc8:	80 91 eb 00 	lds	r24, 0x00EB
    1bcc:	85 ff       	sbrs	r24, 5
    1bce:	02 c0       	rjmp	.+4      	; 0x1bd4 <Endpoint_WaitUntilReady+0x34>
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
			  
		if (USB_INT_HasOccurred(USB_INT_SOFI))
    1bd4:	80 91 e1 00 	lds	r24, 0x00E1
    1bd8:	82 ff       	sbrs	r24, 2
    1bda:	e3 cf       	rjmp	.-58     	; 0x1ba2 <Endpoint_WaitUntilReady+0x2>
		{
			USB_INT_Clear(USB_INT_SOFI);
    1bdc:	80 91 e1 00 	lds	r24, 0x00E1
    1be0:	8b 7f       	andi	r24, 0xFB	; 251
    1be2:	80 93 e1 00 	sts	0x00E1, r24

			if (!(TimeoutMSRem--))
    1be6:	99 23       	and	r25, r25
    1be8:	11 f4       	brne	.+4      	; 0x1bee <Endpoint_WaitUntilReady+0x4e>
    1bea:	83 e0       	ldi	r24, 0x03	; 3
    1bec:	08 95       	ret
    1bee:	91 50       	subi	r25, 0x01	; 1
    1bf0:	d8 cf       	rjmp	.-80     	; 0x1ba2 <Endpoint_WaitUntilReady+0x2>
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1bf4:	08 95       	ret

00001bf6 <Endpoint_Write_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer, uint16_t Length)
{
    1bf6:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;
	
	if (Length > USB_ControlRequest.wLength)
    1bf8:	40 91 0c 01 	lds	r20, 0x010C
    1bfc:	50 91 0d 01 	lds	r21, 0x010D
    1c00:	46 17       	cp	r20, r22
    1c02:	57 07       	cpc	r21, r23
    1c04:	28 f4       	brcc	.+10     	; 0x1c10 <Endpoint_Write_Control_Stream_LE+0x1a>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer, uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1c06:	f9 01       	movw	r30, r18
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
			}
			
			LastPacketFull = (Endpoint_BytesInEndpoint() == USB_ControlEndpointSize);
    1c08:	30 91 00 01 	lds	r19, 0x0100
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	3f c0       	rjmp	.+126    	; 0x1c8e <Endpoint_Write_Control_Stream_LE+0x98>
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;
	
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1c10:	61 15       	cp	r22, r1
    1c12:	71 05       	cpc	r23, r1
    1c14:	11 f0       	breq	.+4      	; 0x1c1a <Endpoint_Write_Control_Stream_LE+0x24>
    1c16:	ab 01       	movw	r20, r22
    1c18:	f6 cf       	rjmp	.-20     	; 0x1c06 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();
    1c1a:	80 91 e8 00 	lds	r24, 0x00E8
    1c1e:	98 2f       	mov	r25, r24
    1c20:	9e 7f       	andi	r25, 0xFE	; 254
    1c22:	90 93 e8 00 	sts	0x00E8, r25
    1c26:	8f 77       	andi	r24, 0x7F	; 127
    1c28:	80 93 e8 00 	sts	0x00E8, r24
    1c2c:	40 e0       	ldi	r20, 0x00	; 0
    1c2e:	50 e0       	ldi	r21, 0x00	; 0
    1c30:	ea cf       	rjmp	.-44     	; 0x1c06 <Endpoint_Write_Control_Stream_LE+0x10>

	while (Length || LastPacketFull)
	{
		if (Endpoint_IsSETUPReceived())
    1c32:	80 91 e8 00 	lds	r24, 0x00E8
    1c36:	83 ff       	sbrs	r24, 3
    1c38:	02 c0       	rjmp	.+4      	; 0x1c3e <Endpoint_Write_Control_Stream_LE+0x48>
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    1c3e:	80 91 e8 00 	lds	r24, 0x00E8
    1c42:	82 fd       	sbrc	r24, 2
    1c44:	2e c0       	rjmp	.+92     	; 0x1ca2 <Endpoint_Write_Control_Stream_LE+0xac>
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
    1c46:	80 91 0e 01 	lds	r24, 0x010E
    1c4a:	88 23       	and	r24, r24
    1c4c:	81 f1       	breq	.+96     	; 0x1cae <Endpoint_Write_Control_Stream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		  
		if (Endpoint_IsINReady())
    1c4e:	80 91 e8 00 	lds	r24, 0x00E8
    1c52:	80 ff       	sbrs	r24, 0
    1c54:	1c c0       	rjmp	.+56     	; 0x1c8e <Endpoint_Write_Control_Stream_LE+0x98>
    1c56:	05 c0       	rjmp	.+10     	; 0x1c62 <Endpoint_Write_Control_Stream_LE+0x6c>
		{
			while (Length && (Endpoint_BytesInEndpoint() < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1c58:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    1c5a:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
    1c5e:	41 50       	subi	r20, 0x01	; 1
    1c60:	50 40       	sbci	r21, 0x00	; 0
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		  
		if (Endpoint_IsINReady())
		{
			while (Length && (Endpoint_BytesInEndpoint() < USB_ControlEndpointSize))
    1c62:	41 15       	cp	r20, r1
    1c64:	51 05       	cpc	r21, r1
    1c66:	21 f0       	breq	.+8      	; 0x1c70 <Endpoint_Write_Control_Stream_LE+0x7a>
    1c68:	80 91 f2 00 	lds	r24, 0x00F2
    1c6c:	83 17       	cp	r24, r19
    1c6e:	a0 f3       	brcs	.-24     	; 0x1c58 <Endpoint_Write_Control_Stream_LE+0x62>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
			}
			
			LastPacketFull = (Endpoint_BytesInEndpoint() == USB_ControlEndpointSize);
    1c70:	80 91 f2 00 	lds	r24, 0x00F2
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	83 17       	cp	r24, r19
    1c78:	09 f4       	brne	.+2      	; 0x1c7c <Endpoint_Write_Control_Stream_LE+0x86>
    1c7a:	21 e0       	ldi	r18, 0x01	; 1
			Endpoint_ClearIN();
    1c7c:	80 91 e8 00 	lds	r24, 0x00E8
    1c80:	98 2f       	mov	r25, r24
    1c82:	9e 7f       	andi	r25, 0xFE	; 254
    1c84:	90 93 e8 00 	sts	0x00E8, r25
    1c88:	8f 77       	andi	r24, 0x7F	; 127
    1c8a:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1c8e:	41 15       	cp	r20, r1
    1c90:	51 05       	cpc	r21, r1
    1c92:	79 f6       	brne	.-98     	; 0x1c32 <Endpoint_Write_Control_Stream_LE+0x3c>
    1c94:	22 23       	and	r18, r18
    1c96:	69 f6       	brne	.-102    	; 0x1c32 <Endpoint_Write_Control_Stream_LE+0x3c>
    1c98:	04 c0       	rjmp	.+8      	; 0x1ca2 <Endpoint_Write_Control_Stream_LE+0xac>
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
    1c9a:	80 91 0e 01 	lds	r24, 0x010E
    1c9e:	88 23       	and	r24, r24
    1ca0:	31 f0       	breq	.+12     	; 0x1cae <Endpoint_Write_Control_Stream_LE+0xb8>
			LastPacketFull = (Endpoint_BytesInEndpoint() == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
    1ca2:	80 91 e8 00 	lds	r24, 0x00E8
    1ca6:	82 ff       	sbrs	r24, 2
    1ca8:	f8 cf       	rjmp	.-16     	; 0x1c9a <Endpoint_Write_Control_Stream_LE+0xa4>
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	08 95       	ret
    1cae:	82 e0       	ldi	r24, 0x02	; 2
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;	
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1cb0:	08 95       	ret

00001cb2 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* Buffer, uint16_t Length)
{
    1cb2:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	
	if (!(Length))
    1cb4:	61 15       	cp	r22, r1
    1cb6:	71 05       	cpc	r23, r1
    1cb8:	49 f4       	brne	.+18     	; 0x1ccc <Endpoint_Read_Control_Stream_LE+0x1a>
	  Endpoint_ClearOUT();
    1cba:	80 91 e8 00 	lds	r24, 0x00E8
    1cbe:	98 2f       	mov	r25, r24
    1cc0:	9b 7f       	andi	r25, 0xFB	; 251
    1cc2:	90 93 e8 00 	sts	0x00E8, r25
    1cc6:	8f 77       	andi	r24, 0x7F	; 127
    1cc8:	80 93 e8 00 	sts	0x00E8, r24
uint8_t TEMPLATE_FUNC_NAME (void* Buffer, uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1ccc:	f9 01       	movw	r30, r18
    1cce:	22 c0       	rjmp	.+68     	; 0x1d14 <Endpoint_Read_Control_Stream_LE+0x62>
	if (!(Length))
	  Endpoint_ClearOUT();
	
	while (Length)
	{
		if (Endpoint_IsSETUPReceived())
    1cd0:	80 91 e8 00 	lds	r24, 0x00E8
    1cd4:	83 ff       	sbrs	r24, 3
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <Endpoint_Read_Control_Stream_LE+0x2a>
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (USB_DeviceState == DEVICE_STATE_Unattached)
    1cdc:	80 91 0e 01 	lds	r24, 0x010E
    1ce0:	88 23       	and	r24, r24
    1ce2:	31 f1       	breq	.+76     	; 0x1d30 <Endpoint_Read_Control_Stream_LE+0x7e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		  
		if (Endpoint_IsOUTReceived())
    1ce4:	80 91 e8 00 	lds	r24, 0x00E8
    1ce8:	82 ff       	sbrs	r24, 2
    1cea:	f2 cf       	rjmp	.-28     	; 0x1cd0 <Endpoint_Read_Control_Stream_LE+0x1e>
    1cec:	06 c0       	rjmp	.+12     	; 0x1cfa <Endpoint_Read_Control_Stream_LE+0x48>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    1cee:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1cf2:	81 93       	st	Z+, r24
				Length--;
    1cf4:	61 50       	subi	r22, 0x01	; 1
    1cf6:	70 40       	sbci	r23, 0x00	; 0
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		  
		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    1cf8:	21 f0       	breq	.+8      	; 0x1d02 <Endpoint_Read_Control_Stream_LE+0x50>
    1cfa:	80 91 f2 00 	lds	r24, 0x00F2
    1cfe:	88 23       	and	r24, r24
    1d00:	b1 f7       	brne	.-20     	; 0x1cee <Endpoint_Read_Control_Stream_LE+0x3c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
			}
			
			Endpoint_ClearOUT();
    1d02:	80 91 e8 00 	lds	r24, 0x00E8
    1d06:	98 2f       	mov	r25, r24
    1d08:	9b 7f       	andi	r25, 0xFB	; 251
    1d0a:	90 93 e8 00 	sts	0x00E8, r25
    1d0e:	8f 77       	andi	r24, 0x7F	; 127
    1d10:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	
	if (!(Length))
	  Endpoint_ClearOUT();
	
	while (Length)
    1d14:	61 15       	cp	r22, r1
    1d16:	71 05       	cpc	r23, r1
    1d18:	d9 f6       	brne	.-74     	; 0x1cd0 <Endpoint_Read_Control_Stream_LE+0x1e>
    1d1a:	04 c0       	rjmp	.+8      	; 0x1d24 <Endpoint_Read_Control_Stream_LE+0x72>
		}		  
	}
	
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
    1d1c:	80 91 0e 01 	lds	r24, 0x010E
    1d20:	88 23       	and	r24, r24
    1d22:	31 f0       	breq	.+12     	; 0x1d30 <Endpoint_Read_Control_Stream_LE+0x7e>
			
			Endpoint_ClearOUT();
		}		  
	}
	
	while (!(Endpoint_IsINReady()))
    1d24:	80 91 e8 00 	lds	r24, 0x00E8
    1d28:	80 ff       	sbrs	r24, 0
    1d2a:	f8 cf       	rjmp	.-16     	; 0x1d1c <Endpoint_Read_Control_Stream_LE+0x6a>
    1d2c:	80 e0       	ldi	r24, 0x00	; 0
    1d2e:	08 95       	ret
    1d30:	82 e0       	ldi	r24, 0x02	; 2
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
	}
	
	return ENDPOINT_RWCSTREAM_NoError;
}
    1d32:	08 95       	ret

00001d34 <__mulhi3>:
    1d34:	55 27       	eor	r21, r21
    1d36:	00 24       	eor	r0, r0

00001d38 <__mulhi3_loop>:
    1d38:	80 ff       	sbrs	r24, 0
    1d3a:	02 c0       	rjmp	.+4      	; 0x1d40 <__mulhi3_skip1>
    1d3c:	06 0e       	add	r0, r22
    1d3e:	57 1f       	adc	r21, r23

00001d40 <__mulhi3_skip1>:
    1d40:	66 0f       	add	r22, r22
    1d42:	77 1f       	adc	r23, r23
    1d44:	61 15       	cp	r22, r1
    1d46:	71 05       	cpc	r23, r1
    1d48:	21 f0       	breq	.+8      	; 0x1d52 <__mulhi3_exit>
    1d4a:	96 95       	lsr	r25
    1d4c:	87 95       	ror	r24
    1d4e:	00 97       	sbiw	r24, 0x00	; 0
    1d50:	99 f7       	brne	.-26     	; 0x1d38 <__mulhi3_loop>

00001d52 <__mulhi3_exit>:
    1d52:	95 2f       	mov	r25, r21
    1d54:	80 2d       	mov	r24, r0
    1d56:	08 95       	ret

00001d58 <__mulsi3>:
    1d58:	ff 27       	eor	r31, r31
    1d5a:	ee 27       	eor	r30, r30
    1d5c:	bb 27       	eor	r27, r27
    1d5e:	aa 27       	eor	r26, r26

00001d60 <__mulsi3_loop>:
    1d60:	60 ff       	sbrs	r22, 0
    1d62:	04 c0       	rjmp	.+8      	; 0x1d6c <__mulsi3_skip1>
    1d64:	a2 0f       	add	r26, r18
    1d66:	b3 1f       	adc	r27, r19
    1d68:	e4 1f       	adc	r30, r20
    1d6a:	f5 1f       	adc	r31, r21

00001d6c <__mulsi3_skip1>:
    1d6c:	22 0f       	add	r18, r18
    1d6e:	33 1f       	adc	r19, r19
    1d70:	44 1f       	adc	r20, r20
    1d72:	55 1f       	adc	r21, r21
    1d74:	96 95       	lsr	r25
    1d76:	87 95       	ror	r24
    1d78:	77 95       	ror	r23
    1d7a:	67 95       	ror	r22
    1d7c:	89 f7       	brne	.-30     	; 0x1d60 <__mulsi3_loop>
    1d7e:	00 97       	sbiw	r24, 0x00	; 0
    1d80:	76 07       	cpc	r23, r22
    1d82:	71 f7       	brne	.-36     	; 0x1d60 <__mulsi3_loop>

00001d84 <__mulsi3_exit>:
    1d84:	cf 01       	movw	r24, r30
    1d86:	bd 01       	movw	r22, r26
    1d88:	08 95       	ret

00001d8a <__udivmodhi4>:
    1d8a:	aa 1b       	sub	r26, r26
    1d8c:	bb 1b       	sub	r27, r27
    1d8e:	51 e1       	ldi	r21, 0x11	; 17
    1d90:	07 c0       	rjmp	.+14     	; 0x1da0 <__udivmodhi4_ep>

00001d92 <__udivmodhi4_loop>:
    1d92:	aa 1f       	adc	r26, r26
    1d94:	bb 1f       	adc	r27, r27
    1d96:	a6 17       	cp	r26, r22
    1d98:	b7 07       	cpc	r27, r23
    1d9a:	10 f0       	brcs	.+4      	; 0x1da0 <__udivmodhi4_ep>
    1d9c:	a6 1b       	sub	r26, r22
    1d9e:	b7 0b       	sbc	r27, r23

00001da0 <__udivmodhi4_ep>:
    1da0:	88 1f       	adc	r24, r24
    1da2:	99 1f       	adc	r25, r25
    1da4:	5a 95       	dec	r21
    1da6:	a9 f7       	brne	.-22     	; 0x1d92 <__udivmodhi4_loop>
    1da8:	80 95       	com	r24
    1daa:	90 95       	com	r25
    1dac:	bc 01       	movw	r22, r24
    1dae:	cd 01       	movw	r24, r26
    1db0:	08 95       	ret

00001db2 <__udivmodsi4>:
    1db2:	a1 e2       	ldi	r26, 0x21	; 33
    1db4:	1a 2e       	mov	r1, r26
    1db6:	aa 1b       	sub	r26, r26
    1db8:	bb 1b       	sub	r27, r27
    1dba:	fd 01       	movw	r30, r26
    1dbc:	0d c0       	rjmp	.+26     	; 0x1dd8 <__udivmodsi4_ep>

00001dbe <__udivmodsi4_loop>:
    1dbe:	aa 1f       	adc	r26, r26
    1dc0:	bb 1f       	adc	r27, r27
    1dc2:	ee 1f       	adc	r30, r30
    1dc4:	ff 1f       	adc	r31, r31
    1dc6:	a2 17       	cp	r26, r18
    1dc8:	b3 07       	cpc	r27, r19
    1dca:	e4 07       	cpc	r30, r20
    1dcc:	f5 07       	cpc	r31, r21
    1dce:	20 f0       	brcs	.+8      	; 0x1dd8 <__udivmodsi4_ep>
    1dd0:	a2 1b       	sub	r26, r18
    1dd2:	b3 0b       	sbc	r27, r19
    1dd4:	e4 0b       	sbc	r30, r20
    1dd6:	f5 0b       	sbc	r31, r21

00001dd8 <__udivmodsi4_ep>:
    1dd8:	66 1f       	adc	r22, r22
    1dda:	77 1f       	adc	r23, r23
    1ddc:	88 1f       	adc	r24, r24
    1dde:	99 1f       	adc	r25, r25
    1de0:	1a 94       	dec	r1
    1de2:	69 f7       	brne	.-38     	; 0x1dbe <__udivmodsi4_loop>
    1de4:	60 95       	com	r22
    1de6:	70 95       	com	r23
    1de8:	80 95       	com	r24
    1dea:	90 95       	com	r25
    1dec:	9b 01       	movw	r18, r22
    1dee:	ac 01       	movw	r20, r24
    1df0:	bd 01       	movw	r22, r26
    1df2:	cf 01       	movw	r24, r30
    1df4:	08 95       	ret

00001df6 <__divmodsi4>:
    1df6:	97 fb       	bst	r25, 7
    1df8:	09 2e       	mov	r0, r25
    1dfa:	05 26       	eor	r0, r21
    1dfc:	0e d0       	rcall	.+28     	; 0x1e1a <__divmodsi4_neg1>
    1dfe:	57 fd       	sbrc	r21, 7
    1e00:	04 d0       	rcall	.+8      	; 0x1e0a <__divmodsi4_neg2>
    1e02:	d7 df       	rcall	.-82     	; 0x1db2 <__udivmodsi4>
    1e04:	0a d0       	rcall	.+20     	; 0x1e1a <__divmodsi4_neg1>
    1e06:	00 1c       	adc	r0, r0
    1e08:	38 f4       	brcc	.+14     	; 0x1e18 <__divmodsi4_exit>

00001e0a <__divmodsi4_neg2>:
    1e0a:	50 95       	com	r21
    1e0c:	40 95       	com	r20
    1e0e:	30 95       	com	r19
    1e10:	21 95       	neg	r18
    1e12:	3f 4f       	sbci	r19, 0xFF	; 255
    1e14:	4f 4f       	sbci	r20, 0xFF	; 255
    1e16:	5f 4f       	sbci	r21, 0xFF	; 255

00001e18 <__divmodsi4_exit>:
    1e18:	08 95       	ret

00001e1a <__divmodsi4_neg1>:
    1e1a:	f6 f7       	brtc	.-4      	; 0x1e18 <__divmodsi4_exit>
    1e1c:	90 95       	com	r25
    1e1e:	80 95       	com	r24
    1e20:	70 95       	com	r23
    1e22:	61 95       	neg	r22
    1e24:	7f 4f       	sbci	r23, 0xFF	; 255
    1e26:	8f 4f       	sbci	r24, 0xFF	; 255
    1e28:	9f 4f       	sbci	r25, 0xFF	; 255
    1e2a:	08 95       	ret

00001e2c <__eerd_byte_m32u2>:
    1e2c:	f9 99       	sbic	0x1f, 1	; 31
    1e2e:	fe cf       	rjmp	.-4      	; 0x1e2c <__eerd_byte_m32u2>
    1e30:	92 bd       	out	0x22, r25	; 34
    1e32:	81 bd       	out	0x21, r24	; 33
    1e34:	f8 9a       	sbi	0x1f, 0	; 31
    1e36:	99 27       	eor	r25, r25
    1e38:	80 b5       	in	r24, 0x20	; 32
    1e3a:	08 95       	ret

00001e3c <__eerd_dword_m32u2>:
    1e3c:	a6 e1       	ldi	r26, 0x16	; 22
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	44 e0       	ldi	r20, 0x04	; 4
    1e42:	50 e0       	ldi	r21, 0x00	; 0
    1e44:	18 c0       	rjmp	.+48     	; 0x1e76 <__eerd_blraw_m32u2>

00001e46 <__eewr_byte_m32u2>:
    1e46:	26 2f       	mov	r18, r22

00001e48 <__eewr_r18_m32u2>:
    1e48:	f9 99       	sbic	0x1f, 1	; 31
    1e4a:	fe cf       	rjmp	.-4      	; 0x1e48 <__eewr_r18_m32u2>
    1e4c:	1f ba       	out	0x1f, r1	; 31
    1e4e:	92 bd       	out	0x22, r25	; 34
    1e50:	81 bd       	out	0x21, r24	; 33
    1e52:	20 bd       	out	0x20, r18	; 32
    1e54:	0f b6       	in	r0, 0x3f	; 63
    1e56:	f8 94       	cli
    1e58:	fa 9a       	sbi	0x1f, 2	; 31
    1e5a:	f9 9a       	sbi	0x1f, 1	; 31
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	01 96       	adiw	r24, 0x01	; 1
    1e60:	08 95       	ret

00001e62 <__eewr_dword_m32u2>:
    1e62:	24 2f       	mov	r18, r20
    1e64:	f1 df       	rcall	.-30     	; 0x1e48 <__eewr_r18_m32u2>
    1e66:	25 2f       	mov	r18, r21
    1e68:	ef df       	rcall	.-34     	; 0x1e48 <__eewr_r18_m32u2>
    1e6a:	00 c0       	rjmp	.+0      	; 0x1e6c <__eewr_word_m32u2>

00001e6c <__eewr_word_m32u2>:
    1e6c:	ec df       	rcall	.-40     	; 0x1e46 <__eewr_byte_m32u2>
    1e6e:	27 2f       	mov	r18, r23
    1e70:	eb cf       	rjmp	.-42     	; 0x1e48 <__eewr_r18_m32u2>

00001e72 <__eerd_block_m32u2>:
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22

00001e76 <__eerd_blraw_m32u2>:
    1e76:	fc 01       	movw	r30, r24
    1e78:	f9 99       	sbic	0x1f, 1	; 31
    1e7a:	fe cf       	rjmp	.-4      	; 0x1e78 <__eerd_blraw_m32u2+0x2>
    1e7c:	06 c0       	rjmp	.+12     	; 0x1e8a <__eerd_blraw_m32u2+0x14>
    1e7e:	f2 bd       	out	0x22, r31	; 34
    1e80:	e1 bd       	out	0x21, r30	; 33
    1e82:	f8 9a       	sbi	0x1f, 0	; 31
    1e84:	31 96       	adiw	r30, 0x01	; 1
    1e86:	00 b4       	in	r0, 0x20	; 32
    1e88:	0d 92       	st	X+, r0
    1e8a:	41 50       	subi	r20, 0x01	; 1
    1e8c:	50 40       	sbci	r21, 0x00	; 0
    1e8e:	b8 f7       	brcc	.-18     	; 0x1e7e <__eerd_blraw_m32u2+0x8>
    1e90:	08 95       	ret

00001e92 <_exit>:
    1e92:	f8 94       	cli

00001e94 <__stop_program>:
    1e94:	ff cf       	rjmp	.-2      	; 0x1e94 <__stop_program>

Disassembly of section .bootloader:

00003000 <__bootvectors>:

    .section .bootvectors,"ax",@progbits
    .global __bootvectors
    .func   __bootvectors
__bootvectors:
    jmp    __bootinit
    3000:	4b c0       	rjmp	.+150    	; 0x3098 <__bootinit>
    3002:	00 00       	nop
    nop
    3004:	4b c7       	rjmp	.+3734   	; 0x3e9c <__bootbad_interrupt>
    vector  __bootvector_1
    3006:	00 00       	nop
    3008:	49 c7       	rjmp	.+3730   	; 0x3e9c <__bootbad_interrupt>
    300a:	00 00       	nop
    vector  __bootvector_2
    300c:	47 c7       	rjmp	.+3726   	; 0x3e9c <__bootbad_interrupt>
    300e:	00 00       	nop
    3010:	45 c7       	rjmp	.+3722   	; 0x3e9c <__bootbad_interrupt>
    vector  __bootvector_3
    3012:	00 00       	nop
    3014:	43 c7       	rjmp	.+3718   	; 0x3e9c <__bootbad_interrupt>
    3016:	00 00       	nop
    vector  __bootvector_4
    3018:	41 c7       	rjmp	.+3714   	; 0x3e9c <__bootbad_interrupt>
    301a:	00 00       	nop
    301c:	3f c7       	rjmp	.+3710   	; 0x3e9c <__bootbad_interrupt>
    vector  __bootvector_5
    301e:	00 00       	nop
    3020:	3d c7       	rjmp	.+3706   	; 0x3e9c <__bootbad_interrupt>
    3022:	00 00       	nop
    vector  __bootvector_6
    3024:	3b c7       	rjmp	.+3702   	; 0x3e9c <__bootbad_interrupt>
    3026:	00 00       	nop
    3028:	39 c7       	rjmp	.+3698   	; 0x3e9c <__bootbad_interrupt>
    vector  __bootvector_7
    302a:	00 00       	nop
    302c:	79 c1       	rjmp	.+754    	; 0x3320 <__bootvector_11>
    302e:	00 00       	nop
    vector  __bootvector_8
    3030:	35 c7       	rjmp	.+3690   	; 0x3e9c <__bootbad_interrupt>
    3032:	00 00       	nop
    3034:	33 c7       	rjmp	.+3686   	; 0x3e9c <__bootbad_interrupt>
    vector  __bootvector_9
    3036:	00 00       	nop
    3038:	31 c7       	rjmp	.+3682   	; 0x3e9c <__bootbad_interrupt>
    303a:	00 00       	nop
    vector  __bootvector_10
    303c:	2f c7       	rjmp	.+3678   	; 0x3e9c <__bootbad_interrupt>
    303e:	00 00       	nop
    3040:	2d c7       	rjmp	.+3674   	; 0x3e9c <__bootbad_interrupt>
    vector  __bootvector_11
    3042:	00 00       	nop
    3044:	2b c7       	rjmp	.+3670   	; 0x3e9c <__bootbad_interrupt>
    3046:	00 00       	nop
    vector  __bootvector_12
    3048:	29 c7       	rjmp	.+3666   	; 0x3e9c <__bootbad_interrupt>
    304a:	00 00       	nop
    304c:	27 c7       	rjmp	.+3662   	; 0x3e9c <__bootbad_interrupt>
    vector  __bootvector_13
    304e:	00 00       	nop
    3050:	25 c7       	rjmp	.+3658   	; 0x3e9c <__bootbad_interrupt>
    3052:	00 00       	nop
    vector  __bootvector_14
    3054:	23 c7       	rjmp	.+3654   	; 0x3e9c <__bootbad_interrupt>
    3056:	00 00       	nop
    3058:	21 c7       	rjmp	.+3650   	; 0x3e9c <__bootbad_interrupt>
    vector  __bootvector_15
    305a:	00 00       	nop
    305c:	1f c7       	rjmp	.+3646   	; 0x3e9c <__bootbad_interrupt>
    305e:	00 00       	nop
    vector  __bootvector_16
    3060:	1d c7       	rjmp	.+3642   	; 0x3e9c <__bootbad_interrupt>
    3062:	00 00       	nop
    3064:	1b c7       	rjmp	.+3638   	; 0x3e9c <__bootbad_interrupt>
    vector  __bootvector_17
    3066:	00 00       	nop
    3068:	19 c7       	rjmp	.+3634   	; 0x3e9c <__bootbad_interrupt>
    306a:	00 00       	nop
    vector  __bootvector_18
    306c:	17 c7       	rjmp	.+3630   	; 0x3e9c <__bootbad_interrupt>
    306e:	00 00       	nop
    3070:	15 c7       	rjmp	.+3626   	; 0x3e9c <__bootbad_interrupt>
    vector  __bootvector_19
    3072:	00 00       	nop
    3074:	13 c7       	rjmp	.+3622   	; 0x3e9c <__bootbad_interrupt>
    3076:	00 00       	nop
    vector  __bootvector_20
    3078:	11 c7       	rjmp	.+3618   	; 0x3e9c <__bootbad_interrupt>
    307a:	00 00       	nop
    307c:	0f c7       	rjmp	.+3614   	; 0x3e9c <__bootbad_interrupt>
    vector  __bootvector_21
    307e:	00 00       	nop
    3080:	0d c7       	rjmp	.+3610   	; 0x3e9c <__bootbad_interrupt>
    3082:	00 00       	nop
    vector  __bootvector_22
    3084:	0b c7       	rjmp	.+3606   	; 0x3e9c <__bootbad_interrupt>
    3086:	00 00       	nop
    3088:	09 c7       	rjmp	.+3602   	; 0x3e9c <__bootbad_interrupt>
    vector  __bootvector_23
    308a:	00 00       	nop
    308c:	07 c7       	rjmp	.+3598   	; 0x3e9c <__bootbad_interrupt>
    308e:	00 00       	nop
    vector  __bootvector_24
    3090:	05 c7       	rjmp	.+3594   	; 0x3e9c <__bootbad_interrupt>
    3092:	00 00       	nop
    3094:	03 c7       	rjmp	.+3590   	; 0x3e9c <__bootbad_interrupt>
    vector  __bootvector_25
    3096:	00 00       	nop

00003098 <__bootinit>:
    3098:	11 24       	eor	r1, r1
    309a:	1f be       	out	0x3f, r1	; 63
    vector  __bootvector_26
    309c:	cf ef       	ldi	r28, 0xFF	; 255
    309e:	d4 e0       	ldi	r29, 0x04	; 4
    30a0:	de bf       	out	0x3e, r29	; 62
    vector  __bootvector_27
    30a2:	cd bf       	out	0x3d, r28	; 61

000030a4 <__do_copy_bootdata>:
    30a4:	11 e0       	ldi	r17, 0x01	; 1
    30a6:	af e0       	ldi	r26, 0x0F	; 15
    vector  __bootvector_28
    30a8:	b1 e0       	ldi	r27, 0x01	; 1
    30aa:	e8 ef       	ldi	r30, 0xF8	; 248
    30ac:	fe e3       	ldi	r31, 0x3E	; 62
    vector  __bootvector_29
    30ae:	00 e0       	ldi	r16, 0x00	; 0
    30b0:	02 c0       	rjmp	.+4      	; 0x30b6 <__do_copy_bootdata+0x12>
    30b2:	05 90       	lpm	r0, Z+
    vector  __bootvector_30
    30b4:	0d 92       	st	X+, r0
    30b6:	a8 32       	cpi	r26, 0x28	; 40
    30b8:	b1 07       	cpc	r27, r17
    vector  __bootvector_31
    30ba:	d9 f7       	brne	.-10     	; 0x30b2 <__do_copy_bootdata+0xe>
    30bc:	8e d4       	rcall	.+2332   	; 0x39da <bootmain>
    30be:	f8 94       	cli
    vector  __bootvector_32
    30c0:	ff cf       	rjmp	.-2      	; 0x30c0 <__do_copy_bootdata+0x1c>

000030c2 <Endpoint_BytesToEPSizeMaskDynamic>:
#if !defined(FIXED_CONTROL_ENDPOINT_SIZE)
uint8_t USB_ControlEndpointSize LUFA_SHARED_DATA_SECTION = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

uint8_t Endpoint_BytesToEPSizeMaskDynamic(const uint16_t Size)
{
    30c2:	28 e0       	ldi	r18, 0x08	; 8
    30c4:	30 e0       	ldi	r19, 0x00	; 0
    30c6:	40 e0       	ldi	r20, 0x00	; 0
    30c8:	03 c0       	rjmp	.+6      	; 0x30d0 <Endpoint_BytesToEPSizeMaskDynamic+0xe>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
				
				while (CheckBytes < Bytes)
				{
					MaskVal++;
    30ca:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    30cc:	22 0f       	add	r18, r18
    30ce:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
				
				while (CheckBytes < Bytes)
    30d0:	28 17       	cp	r18, r24
    30d2:	39 07       	cpc	r19, r25
    30d4:	d0 f3       	brcs	.-12     	; 0x30ca <Endpoint_BytesToEPSizeMaskDynamic+0x8>
	return Endpoint_BytesToEPSizeMask(Size);
}
    30d6:	84 2f       	mov	r24, r20
    30d8:	82 95       	swap	r24
    30da:	80 7f       	andi	r24, 0xF0	; 240
    30dc:	08 95       	ret

000030de <Endpoint_ConfigureEndpoint_Prv>:

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number, const uint8_t UECFG0XData, const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
    30de:	80 93 e9 00 	sts	0x00E9, r24
	Endpoint_EnableEndpoint();
    30e2:	80 91 eb 00 	lds	r24, 0x00EB
    30e6:	81 60       	ori	r24, 0x01	; 1
    30e8:	80 93 eb 00 	sts	0x00EB, r24

	UECFG1X = 0;
    30ec:	10 92 ed 00 	sts	0x00ED, r1

	UECFG0X = UECFG0XData;
    30f0:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
    30f4:	40 93 ed 00 	sts	0x00ED, r20

	return Endpoint_IsConfigured();
    30f8:	80 91 ee 00 	lds	r24, 0x00EE
}
    30fc:	88 1f       	adc	r24, r24
    30fe:	88 27       	eor	r24, r24
    3100:	88 1f       	adc	r24, r24
    3102:	08 95       	ret

00003104 <Endpoint_ClearEndpoints>:

void Endpoint_ClearEndpoints(void)
{
	UEINT = 0;
    3104:	10 92 f4 00 	sts	0x00F4, r1
    3108:	90 e0       	ldi	r25, 0x00	; 0

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		Endpoint_SelectEndpoint(EPNum);	
    310a:	90 93 e9 00 	sts	0x00E9, r25
		UEIENX = 0;
    310e:	10 92 f0 00 	sts	0x00F0, r1
		UEINTX = 0;
    3112:	10 92 e8 00 	sts	0x00E8, r1
		Endpoint_DeallocateMemory();
    3116:	80 91 ed 00 	lds	r24, 0x00ED
    311a:	8d 7f       	andi	r24, 0xFD	; 253
    311c:	80 93 ed 00 	sts	0x00ED, r24
		Endpoint_DisableEndpoint();
    3120:	80 91 eb 00 	lds	r24, 0x00EB
    3124:	8e 7f       	andi	r24, 0xFE	; 254
    3126:	80 93 eb 00 	sts	0x00EB, r24

void Endpoint_ClearEndpoints(void)
{
	UEINT = 0;

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    312a:	9f 5f       	subi	r25, 0xFF	; 255
    312c:	95 30       	cpi	r25, 0x05	; 5
    312e:	69 f7       	brne	.-38     	; 0x310a <Endpoint_ClearEndpoints+0x6>
		UEIENX = 0;
		UEINTX = 0;
		Endpoint_DeallocateMemory();
		Endpoint_DisableEndpoint();
	}
}
    3130:	08 95       	ret

00003132 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    3132:	80 91 06 01 	lds	r24, 0x0106
    3136:	88 23       	and	r24, r24
    3138:	bc f4       	brge	.+46     	; 0x3168 <Endpoint_ClearStatusStage+0x36>
    313a:	04 c0       	rjmp	.+8      	; 0x3144 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    313c:	80 91 0e 01 	lds	r24, 0x010E
    3140:	88 23       	and	r24, r24
    3142:	f9 f0       	breq	.+62     	; 0x3182 <Endpoint_ClearStatusStage+0x50>

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    3144:	80 91 e8 00 	lds	r24, 0x00E8
    3148:	82 ff       	sbrs	r24, 2
    314a:	f8 cf       	rjmp	.-16     	; 0x313c <Endpoint_ClearStatusStage+0xa>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return;
		}

		Endpoint_ClearOUT();
    314c:	80 91 e8 00 	lds	r24, 0x00E8
    3150:	98 2f       	mov	r25, r24
    3152:	9b 7f       	andi	r25, 0xFB	; 251
    3154:	90 93 e8 00 	sts	0x00E8, r25
    3158:	8f 77       	andi	r24, 0x7F	; 127
    315a:	80 93 e8 00 	sts	0x00E8, r24
    315e:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    3160:	80 91 0e 01 	lds	r24, 0x010E
    3164:	88 23       	and	r24, r24
    3166:	69 f0       	breq	.+26     	; 0x3182 <Endpoint_ClearStatusStage+0x50>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    3168:	80 91 e8 00 	lds	r24, 0x00E8
    316c:	80 ff       	sbrs	r24, 0
    316e:	f8 cf       	rjmp	.-16     	; 0x3160 <Endpoint_ClearStatusStage+0x2e>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return;
		}
		
		Endpoint_ClearIN();
    3170:	80 91 e8 00 	lds	r24, 0x00E8
    3174:	98 2f       	mov	r25, r24
    3176:	9e 7f       	andi	r25, 0xFE	; 254
    3178:	90 93 e8 00 	sts	0x00E8, r25
    317c:	8f 77       	andi	r24, 0x7F	; 127
    317e:	80 93 e8 00 	sts	0x00E8, r24
    3182:	08 95       	ret

00003184 <Endpoint_Write_Control_PStream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer, uint16_t Length)
{
    3184:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;
	
	if (Length > USB_ControlRequest.wLength)
    3186:	40 91 0c 01 	lds	r20, 0x010C
    318a:	50 91 0d 01 	lds	r21, 0x010D
    318e:	46 17       	cp	r20, r22
    3190:	57 07       	cpc	r21, r23
    3192:	20 f4       	brcc	.+8      	; 0x319c <Endpoint_Write_Control_PStream_LE+0x18>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
			}
			
			LastPacketFull = (Endpoint_BytesInEndpoint() == USB_ControlEndpointSize);
    3194:	70 91 00 01 	lds	r23, 0x0100
    3198:	60 e0       	ldi	r22, 0x00	; 0
    319a:	42 c0       	rjmp	.+132    	; 0x3220 <Endpoint_Write_Control_PStream_LE+0x9c>
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;
	
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    319c:	61 15       	cp	r22, r1
    319e:	71 05       	cpc	r23, r1
    31a0:	11 f0       	breq	.+4      	; 0x31a6 <Endpoint_Write_Control_PStream_LE+0x22>
    31a2:	ab 01       	movw	r20, r22
    31a4:	f7 cf       	rjmp	.-18     	; 0x3194 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();
    31a6:	80 91 e8 00 	lds	r24, 0x00E8
    31aa:	98 2f       	mov	r25, r24
    31ac:	9e 7f       	andi	r25, 0xFE	; 254
    31ae:	90 93 e8 00 	sts	0x00E8, r25
    31b2:	8f 77       	andi	r24, 0x7F	; 127
    31b4:	80 93 e8 00 	sts	0x00E8, r24
    31b8:	40 e0       	ldi	r20, 0x00	; 0
    31ba:	50 e0       	ldi	r21, 0x00	; 0
    31bc:	eb cf       	rjmp	.-42     	; 0x3194 <Endpoint_Write_Control_PStream_LE+0x10>

	while (Length || LastPacketFull)
	{
		if (Endpoint_IsSETUPReceived())
    31be:	80 91 e8 00 	lds	r24, 0x00E8
    31c2:	83 ff       	sbrs	r24, 3
    31c4:	02 c0       	rjmp	.+4      	; 0x31ca <Endpoint_Write_Control_PStream_LE+0x46>
    31c6:	81 e0       	ldi	r24, 0x01	; 1
    31c8:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    31ca:	80 91 e8 00 	lds	r24, 0x00E8
    31ce:	82 fd       	sbrc	r24, 2
    31d0:	31 c0       	rjmp	.+98     	; 0x3234 <Endpoint_Write_Control_PStream_LE+0xb0>
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
    31d2:	80 91 0e 01 	lds	r24, 0x010E
    31d6:	88 23       	and	r24, r24
    31d8:	99 f1       	breq	.+102    	; 0x3240 <Endpoint_Write_Control_PStream_LE+0xbc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		  
		if (Endpoint_IsINReady())
    31da:	80 91 e8 00 	lds	r24, 0x00E8
    31de:	80 ff       	sbrs	r24, 0
    31e0:	1f c0       	rjmp	.+62     	; 0x3220 <Endpoint_Write_Control_PStream_LE+0x9c>
    31e2:	08 c0       	rjmp	.+16     	; 0x31f4 <Endpoint_Write_Control_PStream_LE+0x70>
    31e4:	f9 01       	movw	r30, r18
		{
			while (Length && (Endpoint_BytesInEndpoint() < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    31e6:	2f 5f       	subi	r18, 0xFF	; 255
    31e8:	3f 4f       	sbci	r19, 0xFF	; 255
    31ea:	e4 91       	lpm	r30, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    31ec:	e0 93 f1 00 	sts	0x00F1, r30
				Length--;
    31f0:	41 50       	subi	r20, 0x01	; 1
    31f2:	50 40       	sbci	r21, 0x00	; 0
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		  
		if (Endpoint_IsINReady())
		{
			while (Length && (Endpoint_BytesInEndpoint() < USB_ControlEndpointSize))
    31f4:	41 15       	cp	r20, r1
    31f6:	51 05       	cpc	r21, r1
    31f8:	21 f0       	breq	.+8      	; 0x3202 <Endpoint_Write_Control_PStream_LE+0x7e>
    31fa:	80 91 f2 00 	lds	r24, 0x00F2
    31fe:	87 17       	cp	r24, r23
    3200:	88 f3       	brcs	.-30     	; 0x31e4 <Endpoint_Write_Control_PStream_LE+0x60>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
			}
			
			LastPacketFull = (Endpoint_BytesInEndpoint() == USB_ControlEndpointSize);
    3202:	80 91 f2 00 	lds	r24, 0x00F2
    3206:	60 e0       	ldi	r22, 0x00	; 0
    3208:	87 17       	cp	r24, r23
    320a:	09 f4       	brne	.+2      	; 0x320e <Endpoint_Write_Control_PStream_LE+0x8a>
    320c:	61 e0       	ldi	r22, 0x01	; 1
			Endpoint_ClearIN();
    320e:	80 91 e8 00 	lds	r24, 0x00E8
    3212:	98 2f       	mov	r25, r24
    3214:	9e 7f       	andi	r25, 0xFE	; 254
    3216:	90 93 e8 00 	sts	0x00E8, r25
    321a:	8f 77       	andi	r24, 0x7F	; 127
    321c:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    3220:	41 15       	cp	r20, r1
    3222:	51 05       	cpc	r21, r1
    3224:	61 f6       	brne	.-104    	; 0x31be <Endpoint_Write_Control_PStream_LE+0x3a>
    3226:	66 23       	and	r22, r22
    3228:	51 f6       	brne	.-108    	; 0x31be <Endpoint_Write_Control_PStream_LE+0x3a>
    322a:	04 c0       	rjmp	.+8      	; 0x3234 <Endpoint_Write_Control_PStream_LE+0xb0>
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
    322c:	80 91 0e 01 	lds	r24, 0x010E
    3230:	88 23       	and	r24, r24
    3232:	31 f0       	breq	.+12     	; 0x3240 <Endpoint_Write_Control_PStream_LE+0xbc>
			LastPacketFull = (Endpoint_BytesInEndpoint() == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
    3234:	80 91 e8 00 	lds	r24, 0x00E8
    3238:	82 ff       	sbrs	r24, 2
    323a:	f8 cf       	rjmp	.-16     	; 0x322c <Endpoint_Write_Control_PStream_LE+0xa8>
    323c:	80 e0       	ldi	r24, 0x00	; 0
    323e:	08 95       	ret
    3240:	82 e0       	ldi	r24, 0x02	; 2
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;	
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    3242:	08 95       	ret

00003244 <CALLBACK_USER_USB_GetDescriptor>:
 *  USB host.
 */

DFU_SECTION uint16_t CALLBACK_USER_USB_GetDescriptor(const uint16_t wValue, const uint8_t wIndex, void** const DescriptorAddress)
{
    JMP_TRAP(TR_USB_GETDESCRIPTOR);
    3244:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bootstraps_vec1>
}
    3248:	08 95       	ret

0000324a <CALLBACK_USB_GetDescriptor>:

DFU_SECTION uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue, const uint8_t wIndex, void** const DescriptorAddress)
{
    324a:	28 2f       	mov	r18, r24
    324c:	da 01       	movw	r26, r20
    if (!RunBootloader)
    324e:	80 91 01 01 	lds	r24, 0x0101
    3252:	88 23       	and	r24, r24
    3254:	21 f4       	brne	.+8      	; 0x325e <CALLBACK_USB_GetDescriptor+0x14>
    {
        return CALLBACK_USER_USB_GetDescriptor(wValue, wIndex, DescriptorAddress);
    3256:	82 2f       	mov	r24, r18
    3258:	f5 df       	rcall	.-22     	; 0x3244 <CALLBACK_USER_USB_GetDescriptor>
    325a:	9c 01       	movw	r18, r24
    325c:	22 c0       	rjmp	.+68     	; 0x32a2 <CALLBACK_USB_GetDescriptor+0x58>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    325e:	92 30       	cpi	r25, 0x02	; 2
    3260:	71 f0       	breq	.+28     	; 0x327e <CALLBACK_USB_GetDescriptor+0x34>
    3262:	93 30       	cpi	r25, 0x03	; 3
    3264:	89 f0       	breq	.+34     	; 0x3288 <CALLBACK_USB_GetDescriptor+0x3e>
    3266:	91 30       	cpi	r25, 0x01	; 1
    3268:	29 f4       	brne	.+10     	; 0x3274 <CALLBACK_USB_GetDescriptor+0x2a>
    326a:	ee e9       	ldi	r30, 0x9E	; 158
    326c:	fe e3       	ldi	r31, 0x3E	; 62
    326e:	22 e1       	ldi	r18, 0x12	; 18
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	15 c0       	rjmp	.+42     	; 0x329e <CALLBACK_USB_GetDescriptor+0x54>
    3274:	e0 e0       	ldi	r30, 0x00	; 0
    3276:	f0 e0       	ldi	r31, 0x00	; 0
    3278:	20 e0       	ldi	r18, 0x00	; 0
    327a:	30 e0       	ldi	r19, 0x00	; 0
    327c:	10 c0       	rjmp	.+32     	; 0x329e <CALLBACK_USB_GetDescriptor+0x54>
    327e:	e0 eb       	ldi	r30, 0xB0	; 176
    3280:	fe e3       	ldi	r31, 0x3E	; 62
    3282:	2b e1       	ldi	r18, 0x1B	; 27
    3284:	30 e0       	ldi	r19, 0x00	; 0
    3286:	0b c0       	rjmp	.+22     	; 0x329e <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration: 
			Address = &ConfigurationDescriptorDFU;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String: 
			if (!(DescriptorNumber))
    3288:	22 23       	and	r18, r18
    328a:	21 f4       	brne	.+8      	; 0x3294 <CALLBACK_USB_GetDescriptor+0x4a>
			{
				Address = &LanguageString;
				Size    = pgm_read_byte(&LanguageString.Header.Size);
    328c:	eb ec       	ldi	r30, 0xCB	; 203
    328e:	fe e3       	ldi	r31, 0x3E	; 62
    3290:	84 91       	lpm	r24, Z+
    3292:	03 c0       	rjmp	.+6      	; 0x329a <CALLBACK_USB_GetDescriptor+0x50>
			}
			else
			{
				Address = &ProductStringDFU;
				Size    = pgm_read_byte(&ProductStringDFU.Header.Size);
    3294:	ef ec       	ldi	r30, 0xCF	; 207
    3296:	fe e3       	ldi	r31, 0x3E	; 62
    3298:	84 91       	lpm	r24, Z+
    329a:	28 2f       	mov	r18, r24
    329c:	30 e0       	ldi	r19, 0x00	; 0
			}
			
			break;
	}
	
	*DescriptorAddress = Address;
    329e:	ed 93       	st	X+, r30
    32a0:	fc 93       	st	X, r31
	return Size;
}
    32a2:	c9 01       	movw	r24, r18
    32a4:	08 95       	ret

000032a6 <EVENT_USB_Device_Connect>:
uint16_t EndAddr DFU_DATA  = 0x0000;


DFU_SECTION void EVENT_USB_Device_Connect(void)
{
    if (!RunBootloader)
    32a6:	80 91 01 01 	lds	r24, 0x0101
    32aa:	88 23       	and	r24, r24
    32ac:	11 f4       	brne	.+4      	; 0x32b2 <EVENT_USB_Device_Connect+0xc>
        CALL_TRAP(TR_USB_DEVICE_CONNECT);
    32ae:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bootstraps_vec2>
    32b2:	08 95       	ret

000032b4 <EVENT_USB_Device_Disconnect>:
}

DFU_SECTION void EVENT_USB_Device_Disconnect(void)
{
    if (!RunBootloader)
    32b4:	80 91 01 01 	lds	r24, 0x0101
    32b8:	88 23       	and	r24, r24
    32ba:	11 f4       	brne	.+4      	; 0x32c0 <EVENT_USB_Device_Disconnect+0xc>
        CALL_TRAP(TR_USB_DEVICE_DISCONNECT);
    32bc:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bootstraps_vec3>
    32c0:	08 95       	ret

000032c2 <EVENT_USB_Device_ConfigurationChanged>:
        CALL_TRAP(TR_USB_DEVICE_UNHANDLEDCONTROLREQUEST);
}

DFU_SECTION void EVENT_USB_Device_ConfigurationChanged(void)
{
    if (!RunBootloader)
    32c2:	80 91 01 01 	lds	r24, 0x0101
    32c6:	88 23       	and	r24, r24
    32c8:	11 f4       	brne	.+4      	; 0x32ce <EVENT_USB_Device_ConfigurationChanged+0xc>
        CALL_TRAP(TR_USB_DEVICE_CONFIGURATIONCHANGED);
    32ca:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bootstraps_vec5>
    32ce:	08 95       	ret

000032d0 <EVENT_USB_Device_Suspend>:
}

DFU_SECTION void EVENT_USB_Device_Suspend(void)
{
    if (!RunBootloader)
    32d0:	80 91 01 01 	lds	r24, 0x0101
    32d4:	88 23       	and	r24, r24
    32d6:	11 f4       	brne	.+4      	; 0x32dc <EVENT_USB_Device_Suspend+0xc>
        CALL_TRAP(TR_USB_DEVICE_SUSPEND);
    32d8:	0c 94 56 00 	jmp	0xac	; 0xac <__bootstraps_vec6>
    32dc:	08 95       	ret

000032de <EVENT_USB_Device_WakeUp>:
}

DFU_SECTION void EVENT_USB_Device_WakeUp(void)
{
    if (!RunBootloader)
    32de:	80 91 01 01 	lds	r24, 0x0101
    32e2:	88 23       	and	r24, r24
    32e4:	11 f4       	brne	.+4      	; 0x32ea <EVENT_USB_Device_WakeUp+0xc>
        CALL_TRAP(TR_USB_DEVICE_WAKEUP);
    32e6:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bootstraps_vec7>
    32ea:	08 95       	ret

000032ec <EVENT_USB_Device_Reset>:
}

DFU_SECTION void EVENT_USB_Device_Reset(void)
{
    if (!RunBootloader)
    32ec:	80 91 01 01 	lds	r24, 0x0101
    32f0:	88 23       	and	r24, r24
    32f2:	11 f4       	brne	.+4      	; 0x32f8 <EVENT_USB_Device_Reset+0xc>
        CALL_TRAP(TR_USB_DEVICE_RESET);
    32f4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bootstraps_vec8>
    32f8:	08 95       	ret

000032fa <EVENT_USB_Device_StartOfFrame>:
}

DFU_SECTION void EVENT_USB_Device_StartOfFrame(void)
{
    if (!RunBootloader)
    32fa:	80 91 01 01 	lds	r24, 0x0101
    32fe:	88 23       	and	r24, r24
    3300:	11 f4       	brne	.+4      	; 0x3306 <EVENT_USB_Device_StartOfFrame+0xc>
        CALL_TRAP(TR_USB_DEVICE_STARTOFFRAME);
    3302:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bootstraps_vec9>
    3306:	08 95       	ret

00003308 <SkipDfu>:
#define INFOLED_PORT      PORTB


DFU_SECTION void SkipDfu(void)
{
    RunBootloader = !(PINB & 0x1);
    3308:	83 b1       	in	r24, 0x03	; 3
    330a:	80 95       	com	r24
    330c:	81 70       	andi	r24, 0x01	; 1
    330e:	80 93 01 01 	sts	0x0101, r24
    if (!RunBootloader)
    3312:	88 23       	and	r24, r24
    3314:	11 f4       	brne	.+4      	; 0x331a <SkipDfu+0x12>
        CALL_TRAP(TR_USERCODE);
    3316:	0e 94 62 00 	call	0xc4	; 0xc4 <__bootstraps_start>

    INFOLED_DDR |=  (1 << INFOLED);
    331a:	25 9a       	sbi	0x04, 5	; 4
    INFOLED_PORT |= (1 << INFOLED);
    331c:	2d 9a       	sbi	0x05, 5	; 5
}
    331e:	08 95       	ret

00003320 <__bootvector_11>:

DFU_SECTION void __bootvector_11(void)
{
    __asm__ __volatile__("jmp __vector_11;\r\n");
}
    3320:	01 c5       	rjmp	.+2562   	; 0x3d24 <__vector_11>

00003322 <DiscardFillerBytes>:
 *  discard unused bytes in the stream from the host, including the memory program block suffix.
 *
 *  \param[in] NumberOfBytes  Number of bytes to discard from the host from the control endpoint
 */
DFU_SECTION static void DiscardFillerBytes(uint8_t NumberOfBytes)
{
    3322:	28 2f       	mov	r18, r24
    3324:	1a c0       	rjmp	.+52     	; 0x335a <DiscardFillerBytes+0x38>
    while (NumberOfBytes--)
    {
        if (!(Endpoint_BytesInEndpoint()))
    3326:	80 91 f2 00 	lds	r24, 0x00F2
    332a:	88 23       	and	r24, r24
    332c:	99 f4       	brne	.+38     	; 0x3354 <DiscardFillerBytes+0x32>
        {
            Endpoint_ClearOUT();
    332e:	80 91 e8 00 	lds	r24, 0x00E8
    3332:	98 2f       	mov	r25, r24
    3334:	9b 7f       	andi	r25, 0xFB	; 251
    3336:	90 93 e8 00 	sts	0x00E8, r25
    333a:	8f 77       	andi	r24, 0x7F	; 127
    333c:	80 93 e8 00 	sts	0x00E8, r24
    3340:	04 c0       	rjmp	.+8      	; 0x334a <DiscardFillerBytes+0x28>

            /* Wait until next data packet received */
            while (!(Endpoint_IsOUTReceived()))
            {
                if (USB_DeviceState == DEVICE_STATE_Unattached)
    3342:	80 91 0e 01 	lds	r24, 0x010E
    3346:	88 23       	and	r24, r24
    3348:	51 f0       	breq	.+20     	; 0x335e <DiscardFillerBytes+0x3c>
        if (!(Endpoint_BytesInEndpoint()))
        {
            Endpoint_ClearOUT();

            /* Wait until next data packet received */
            while (!(Endpoint_IsOUTReceived()))
    334a:	80 91 e8 00 	lds	r24, 0x00E8
    334e:	82 ff       	sbrs	r24, 2
    3350:	f8 cf       	rjmp	.-16     	; 0x3342 <DiscardFillerBytes+0x20>
    3352:	02 c0       	rjmp	.+4      	; 0x3358 <DiscardFillerBytes+0x36>
			static inline void Endpoint_Discard_Byte(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Discard_Byte(void)
			{
				uint8_t Dummy;
				
				Dummy = UEDATX;
    3354:	80 91 f1 00 	lds	r24, 0x00F1
    3358:	21 50       	subi	r18, 0x01	; 1
 *
 *  \param[in] NumberOfBytes  Number of bytes to discard from the host from the control endpoint
 */
DFU_SECTION static void DiscardFillerBytes(uint8_t NumberOfBytes)
{
    while (NumberOfBytes--)
    335a:	22 23       	and	r18, r18
    335c:	21 f7       	brne	.-56     	; 0x3326 <DiscardFillerBytes+0x4>
    335e:	08 95       	ret

00003360 <LoadStartEndAddresses>:
    union
    {
        uint8_t  Bytes[2];
        uint16_t Word;
    } Address[2] = {{.Bytes = {SentCommand.Data[2], SentCommand.Data[1]}},
                    {.Bytes = {SentCommand.Data[4], SentCommand.Data[3]}}};
    3360:	20 91 24 01 	lds	r18, 0x0124
    3364:	30 91 23 01 	lds	r19, 0x0123

    /* Load in the start and ending read addresses from the sent data packet */
    StartAddr = Address[0].Word;
    3368:	80 91 22 01 	lds	r24, 0x0122
    336c:	90 91 21 01 	lds	r25, 0x0121
    3370:	80 93 15 01 	sts	0x0115, r24
    3374:	90 93 16 01 	sts	0x0116, r25
    EndAddr   = Address[1].Word;
    3378:	c9 01       	movw	r24, r18
    337a:	80 93 17 01 	sts	0x0117, r24
    337e:	90 93 18 01 	sts	0x0118, r25
}
    3382:	08 95       	ret

00003384 <ProcessBootloaderCommand>:
 *  appropriate handler function.
 */
DFU_SECTION static void ProcessBootloaderCommand(void)
{
    /* Check if device is in secure mode */
    if (IsSecure)
    3384:	80 91 0f 01 	lds	r24, 0x010F
    3388:	88 23       	and	r24, r24
    338a:	d9 f0       	breq	.+54     	; 0x33c2 <ProcessBootloaderCommand+0x3e>
    {
        /* Don't process command unless it is a READ or chip erase command */
        if (!(((SentCommand.Command == COMMAND_WRITE)             &&
    338c:	80 91 1f 01 	lds	r24, 0x011F
    3390:	84 30       	cpi	r24, 0x04	; 4
    3392:	49 f4       	brne	.+18     	; 0x33a6 <ProcessBootloaderCommand+0x22>
    3394:	80 91 20 01 	lds	r24, 0x0120
    3398:	88 23       	and	r24, r24
    339a:	39 f4       	brne	.+14     	; 0x33aa <ProcessBootloaderCommand+0x26>
    339c:	80 91 21 01 	lds	r24, 0x0121
    33a0:	8f 3f       	cpi	r24, 0xFF	; 255
    33a2:	19 f4       	brne	.+6      	; 0x33aa <ProcessBootloaderCommand+0x26>
    33a4:	0e c0       	rjmp	.+28     	; 0x33c2 <ProcessBootloaderCommand+0x3e>
    33a6:	85 30       	cpi	r24, 0x05	; 5
    33a8:	61 f0       	breq	.+24     	; 0x33c2 <ProcessBootloaderCommand+0x3e>
                IS_TWOBYTE_COMMAND(SentCommand.Data, 0x00, 0xFF)) ||
               (SentCommand.Command == COMMAND_READ)))
        {
            /* Set the state and status variables to indicate the error */
            DFU_State  = dfuERROR;
    33aa:	8a e0       	ldi	r24, 0x0A	; 10
    33ac:	80 93 11 01 	sts	0x0111, r24
            DFU_Status = errWRITE;
    33b0:	83 e0       	ldi	r24, 0x03	; 3
    33b2:	80 93 12 01 	sts	0x0112, r24

            /* Stall command */
            Endpoint_StallTransaction();
    33b6:	80 91 eb 00 	lds	r24, 0x00EB
    33ba:	80 62       	ori	r24, 0x20	; 32
    33bc:	80 93 eb 00 	sts	0x00EB, r24
    33c0:	08 95       	ret
            return;
        }
    }

    /* Dispatch the required command processing routine based on the command type */
    switch (SentCommand.Command)
    33c2:	80 91 1f 01 	lds	r24, 0x011F
    33c6:	83 30       	cpi	r24, 0x03	; 3
    33c8:	29 f1       	breq	.+74     	; 0x3414 <ProcessBootloaderCommand+0x90>
    33ca:	84 30       	cpi	r24, 0x04	; 4
    33cc:	20 f4       	brcc	.+8      	; 0x33d6 <ProcessBootloaderCommand+0x52>
    33ce:	81 30       	cpi	r24, 0x01	; 1
    33d0:	09 f0       	breq	.+2      	; 0x33d4 <ProcessBootloaderCommand+0x50>
    33d2:	a6 c0       	rjmp	.+332    	; 0x3520 <ProcessBootloaderCommand+0x19c>
    33d4:	07 c0       	rjmp	.+14     	; 0x33e4 <ProcessBootloaderCommand+0x60>
    33d6:	84 30       	cpi	r24, 0x04	; 4
    33d8:	09 f4       	brne	.+2      	; 0x33dc <ProcessBootloaderCommand+0x58>
    33da:	40 c0       	rjmp	.+128    	; 0x345c <ProcessBootloaderCommand+0xd8>
    33dc:	85 30       	cpi	r24, 0x05	; 5
    33de:	09 f0       	breq	.+2      	; 0x33e2 <ProcessBootloaderCommand+0x5e>
    33e0:	9f c0       	rjmp	.+318    	; 0x3520 <ProcessBootloaderCommand+0x19c>
    33e2:	89 c0       	rjmp	.+274    	; 0x34f6 <ProcessBootloaderCommand+0x172>
/** Handler for a Memory Program command issued by the host. This routine handles the preparations needed
 *  to write subsequent data from the host into the specified memory.
 */
DFU_SECTION static void ProcessMemProgCommand(void)
{
    if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00) ||                          // Write FLASH command
    33e4:	80 91 20 01 	lds	r24, 0x0120
    33e8:	82 30       	cpi	r24, 0x02	; 2
    33ea:	08 f0       	brcs	.+2      	; 0x33ee <ProcessBootloaderCommand+0x6a>
    33ec:	99 c0       	rjmp	.+306    	; 0x3520 <ProcessBootloaderCommand+0x19c>
        IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                            // Write EEPROM command
    {
        /* Load in the start and ending read addresses */
        LoadStartEndAddresses();
    33ee:	b8 df       	rcall	.-144    	; 0x3360 <LoadStartEndAddresses>

        /* If FLASH is being written to, we need to pre-erase the first page to write to */
        if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))
    33f0:	80 91 20 01 	lds	r24, 0x0120
    33f4:	88 23       	and	r24, r24
    33f6:	61 f4       	brne	.+24     	; 0x3410 <ProcessBootloaderCommand+0x8c>
            #ifndef NO64KB
              Flash64KBPage
            #else
              0
            #endif
            }};
    33f8:	80 91 15 01 	lds	r24, 0x0115
    33fc:	90 91 16 01 	lds	r25, 0x0116

            /* Erase the current page's temp buffer */
            boot_page_erase(CurrFlashAddress.Long);
    3400:	23 e0       	ldi	r18, 0x03	; 3
    3402:	fc 01       	movw	r30, r24
    3404:	20 93 57 00 	sts	0x0057, r18
    3408:	e8 95       	spm
            boot_spm_busy_wait();
    340a:	07 b6       	in	r0, 0x37	; 55
    340c:	00 fc       	sbrc	r0, 0
    340e:	fd cf       	rjmp	.-6      	; 0x340a <ProcessBootloaderCommand+0x86>
        }

        /* Set the state so that the next DNLOAD requests reads in the firmware */
        DFU_State = dfuDNLOAD_IDLE;
    3410:	85 e0       	ldi	r24, 0x05	; 5
    3412:	08 c0       	rjmp	.+16     	; 0x3424 <ProcessBootloaderCommand+0xa0>
 *  to read subsequent data from the specified memory out to the host, as well as implementing the memory
 *  blank check command.
 */
DFU_SECTION static void ProcessMemReadCommand(void)
{
    if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00) ||                          // Read FLASH command
    3414:	80 91 20 01 	lds	r24, 0x0120
    3418:	88 23       	and	r24, r24
    341a:	11 f0       	breq	.+4      	; 0x3420 <ProcessBootloaderCommand+0x9c>
    341c:	82 30       	cpi	r24, 0x02	; 2
    341e:	29 f4       	brne	.+10     	; 0x342a <ProcessBootloaderCommand+0xa6>
        IS_ONEBYTE_COMMAND(SentCommand.Data, 0x02))                            // Read EEPROM command
    {
        /* Load in the start and ending read addresses */
        LoadStartEndAddresses();
    3420:	9f df       	rcall	.-194    	; 0x3360 <LoadStartEndAddresses>

        /* Set the state so that the next UPLOAD requests read out the firmware */
        DFU_State = dfuUPLOAD_IDLE;
    3422:	89 e0       	ldi	r24, 0x09	; 9
    3424:	80 93 11 01 	sts	0x0111, r24
    3428:	08 95       	ret
    }
    else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                       // Blank check FLASH command
    342a:	81 30       	cpi	r24, 0x01	; 1
    342c:	09 f0       	breq	.+2      	; 0x3430 <ProcessBootloaderCommand+0xac>
    342e:	78 c0       	rjmp	.+240    	; 0x3520 <ProcessBootloaderCommand+0x19c>
    3430:	e0 e0       	ldi	r30, 0x00	; 0
    3432:	f0 e0       	ldi	r31, 0x00	; 0
        {
            /* Check if the current byte is not blank */
            #if (FLASHEND > 0xFFFF)
            if (pgm_read_byte_far(CurrFlashAddress) != 0xFF)
            #else
            if (pgm_read_byte(CurrFlashAddress) != 0xFF)
    3434:	84 91       	lpm	r24, Z+
    3436:	8f 3f       	cpi	r24, 0xFF	; 255
    3438:	59 f0       	breq	.+22     	; 0x3450 <ProcessBootloaderCommand+0xcc>
            {
                /* Save the location of the first non-blank byte for response back to the host */
                #ifndef NO64KB
                Flash64KBPage = (CurrFlashAddress >> 16);
                #endif
                StartAddr     = CurrFlashAddress;
    343a:	f0 93 16 01 	sts	0x0116, r31
    343e:	e0 93 15 01 	sts	0x0115, r30

                /* Set state and status variables to the appropriate error values */
                DFU_State  = dfuERROR;
    3442:	8a e0       	ldi	r24, 0x0A	; 10
    3444:	80 93 11 01 	sts	0x0111, r24
                DFU_Status = errCHECK_ERASED;
    3448:	85 e0       	ldi	r24, 0x05	; 5
    344a:	80 93 12 01 	sts	0x0112, r24
    344e:	08 95       	ret

                break;
            }

            CurrFlashAddress++;
    3450:	31 96       	adiw	r30, 0x01	; 1
        #else
        uint16_t
        #endif
                  CurrFlashAddress = 0;

        while (CurrFlashAddress < BOOT_START_ADDR)
    3452:	20 e3       	ldi	r18, 0x30	; 48
    3454:	e0 30       	cpi	r30, 0x00	; 0
    3456:	f2 07       	cpc	r31, r18
    3458:	69 f7       	brne	.-38     	; 0x3434 <ProcessBootloaderCommand+0xb0>
    345a:	08 95       	ret
/** Handler for a Data Write command issued by the host. This routine handles non-programming commands such as
 *  bootloader exit (both via software jumps and hardware watchdog resets) and flash memory erasure.
 */
DFU_SECTION static void ProcessWriteCommand(void)
{
    if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x03))                            // Start application
    345c:	80 91 20 01 	lds	r24, 0x0120
    3460:	83 30       	cpi	r24, 0x03	; 3
    3462:	29 f5       	brne	.+74     	; 0x34ae <ProcessBootloaderCommand+0x12a>
    {
        /* Indicate that the bootloader is terminating */
        WaitForExit = true;
    3464:	81 e0       	ldi	r24, 0x01	; 1
    3466:	80 93 10 01 	sts	0x0110, r24

        /* Check if empty request data array - an empty request after a filled request retains the
           previous valid request data, but initializes the reset */
        if (!(SentCommand.DataSize))
    346a:	80 91 25 01 	lds	r24, 0x0125
    346e:	90 91 26 01 	lds	r25, 0x0126
    3472:	89 2b       	or	r24, r25
    3474:	09 f0       	breq	.+2      	; 0x3478 <ProcessBootloaderCommand+0xf4>
    3476:	54 c0       	rjmp	.+168    	; 0x3520 <ProcessBootloaderCommand+0x19c>
        {
            if (SentCommand.Data[1] == 0x00)                                   // Start via watchdog
    3478:	80 91 21 01 	lds	r24, 0x0121
    347c:	88 23       	and	r24, r24
    347e:	61 f4       	brne	.+24     	; 0x3498 <ProcessBootloaderCommand+0x114>
            {
                /* Start the watchdog to reset the AVR once the communications are finalized */
                wdt_enable(WDTO_250MS);
    3480:	2c e0       	ldi	r18, 0x0C	; 12
    3482:	88 e1       	ldi	r24, 0x18	; 24
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	0f b6       	in	r0, 0x3f	; 63
    3488:	f8 94       	cli
    348a:	a8 95       	wdr
    348c:	80 93 60 00 	sts	0x0060, r24
    3490:	0f be       	out	0x3f, r0	; 63
    3492:	20 93 60 00 	sts	0x0060, r18
    3496:	08 95       	ret
                /* Load in the jump address into the application start address pointer */
                union
                {
                    uint8_t  Bytes[2];
                    AppPtr_t FuncPtr;
                } Address = {.Bytes = {SentCommand.Data[4], SentCommand.Data[3]}};
    3498:	80 91 24 01 	lds	r24, 0x0124
    349c:	90 91 23 01 	lds	r25, 0x0123

                AppStartPtr = Address.FuncPtr;
    34a0:	90 93 14 01 	sts	0x0114, r25
    34a4:	80 93 13 01 	sts	0x0113, r24

                /* Set the flag to terminate the bootloader at next opportunity */
                RunBootloader = false;
    34a8:	10 92 01 01 	sts	0x0101, r1
    34ac:	08 95       	ret
            }
        }
    }
    else if (IS_TWOBYTE_COMMAND(SentCommand.Data, 0x00, 0xFF))                 // Erase flash
    34ae:	88 23       	and	r24, r24
    34b0:	09 f0       	breq	.+2      	; 0x34b4 <ProcessBootloaderCommand+0x130>
    34b2:	36 c0       	rjmp	.+108    	; 0x3520 <ProcessBootloaderCommand+0x19c>
    34b4:	80 91 21 01 	lds	r24, 0x0121
    34b8:	8f 3f       	cpi	r24, 0xFF	; 255
    34ba:	91 f5       	brne	.+100    	; 0x3520 <ProcessBootloaderCommand+0x19c>
    34bc:	e0 e0       	ldi	r30, 0x00	; 0
    34be:	f0 e0       	ldi	r31, 0x00	; 0
        uint32_t CurrFlashAddress = 0;

        /* Clear the application section of flash */
        while (CurrFlashAddress < BOOT_START_ADDR)
        {
            boot_page_erase(CurrFlashAddress);
    34c0:	93 e0       	ldi	r25, 0x03	; 3
            boot_spm_busy_wait();
            boot_page_write(CurrFlashAddress);
    34c2:	85 e0       	ldi	r24, 0x05	; 5
        uint32_t CurrFlashAddress = 0;

        /* Clear the application section of flash */
        while (CurrFlashAddress < BOOT_START_ADDR)
        {
            boot_page_erase(CurrFlashAddress);
    34c4:	90 93 57 00 	sts	0x0057, r25
    34c8:	e8 95       	spm
            boot_spm_busy_wait();
    34ca:	07 b6       	in	r0, 0x37	; 55
    34cc:	00 fc       	sbrc	r0, 0
    34ce:	fd cf       	rjmp	.-6      	; 0x34ca <ProcessBootloaderCommand+0x146>
            boot_page_write(CurrFlashAddress);
    34d0:	80 93 57 00 	sts	0x0057, r24
    34d4:	e8 95       	spm
            boot_spm_busy_wait();
    34d6:	07 b6       	in	r0, 0x37	; 55
    34d8:	00 fc       	sbrc	r0, 0
    34da:	fd cf       	rjmp	.-6      	; 0x34d6 <ProcessBootloaderCommand+0x152>
    34dc:	e0 58       	subi	r30, 0x80	; 128
    34de:	ff 4f       	sbci	r31, 0xFF	; 255
    else if (IS_TWOBYTE_COMMAND(SentCommand.Data, 0x00, 0xFF))                 // Erase flash
    {
        uint32_t CurrFlashAddress = 0;

        /* Clear the application section of flash */
        while (CurrFlashAddress < BOOT_START_ADDR)
    34e0:	20 e3       	ldi	r18, 0x30	; 48
    34e2:	e0 30       	cpi	r30, 0x00	; 0
    34e4:	f2 07       	cpc	r31, r18
    34e6:	71 f7       	brne	.-36     	; 0x34c4 <ProcessBootloaderCommand+0x140>

            CurrFlashAddress += SPM_PAGESIZE;
        }

        /* Re-enable the RWW section of flash as writing to the flash locks it out */
        boot_rww_enable();
    34e8:	81 e1       	ldi	r24, 0x11	; 17
    34ea:	80 93 57 00 	sts	0x0057, r24
    34ee:	e8 95       	spm

        /* Memory has been erased, reset the security bit so that programming/reading is allowed */
        IsSecure = false;
    34f0:	10 92 0f 01 	sts	0x010F, r1
    34f4:	08 95       	ret
static uint8_t BootloaderInfo[3] DFU_DATA = {BOOTLOADER_VERSION, BOOTLOADER_ID_BYTE1, BOOTLOADER_ID_BYTE2};
static uint8_t SignatureInfo[3]  DFU_DATA = {AVR_SIGNATURE_1,    AVR_SIGNATURE_2,     AVR_SIGNATURE_3};

DFU_SECTION static void ProcessReadCommand(void)
{
    uint8_t DataIndexToRead = SentCommand.Data[1];
    34f6:	e0 91 21 01 	lds	r30, 0x0121

    if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))                         // Read bootloader info
    34fa:	80 91 20 01 	lds	r24, 0x0120
    34fe:	88 23       	and	r24, r24
    3500:	39 f4       	brne	.+14     	; 0x3510 <ProcessBootloaderCommand+0x18c>
    {
        ResponseByte = BootloaderInfo[DataIndexToRead];
    3502:	f0 e0       	ldi	r31, 0x00	; 0
    3504:	e7 5e       	subi	r30, 0xE7	; 231
    3506:	fe 4f       	sbci	r31, 0xFE	; 254
    3508:	80 81       	ld	r24, Z
    350a:	80 93 27 01 	sts	0x0127, r24
    350e:	08 95       	ret
    }
    else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                    // Read signature byte
    3510:	81 30       	cpi	r24, 0x01	; 1
    3512:	31 f4       	brne	.+12     	; 0x3520 <ProcessBootloaderCommand+0x19c>
    {
        ResponseByte = SignatureInfo[DataIndexToRead - 0x30];
    3514:	f0 e0       	ldi	r31, 0x00	; 0
    3516:	e4 51       	subi	r30, 0x14	; 20
    3518:	ff 4f       	sbci	r31, 0xFF	; 255
    351a:	80 81       	ld	r24, Z
    351c:	80 93 27 01 	sts	0x0127, r24
    3520:	08 95       	ret

00003522 <DFU_EVENT_USB_Device_UnhandledControlRequest>:
/** Event handler for the USB_UnhandledControlRequest event. This is used to catch standard and class specific
 *  control requests that are not handled internally by the USB library (including the DFU commands, which are
 *  all issued via the control endpoint), so that they can be handled appropriately for the application.
 */
DFU_SECTION void DFU_EVENT_USB_Device_UnhandledControlRequest(void)
{
    3522:	2f 92       	push	r2
    3524:	3f 92       	push	r3
    3526:	4f 92       	push	r4
    3528:	5f 92       	push	r5
    352a:	6f 92       	push	r6
    352c:	7f 92       	push	r7
    352e:	8f 92       	push	r8
    3530:	9f 92       	push	r9
    3532:	af 92       	push	r10
    3534:	bf 92       	push	r11
    3536:	cf 92       	push	r12
    3538:	df 92       	push	r13
    353a:	ef 92       	push	r14
    353c:	ff 92       	push	r15
    353e:	0f 93       	push	r16
    3540:	1f 93       	push	r17
    3542:	cf 93       	push	r28
    3544:	df 93       	push	r29
    /* Get the size of the command and data from the wLength value */
    SentCommand.DataSize = USB_ControlRequest.wLength;
    3546:	80 91 0c 01 	lds	r24, 0x010C
    354a:	90 91 0d 01 	lds	r25, 0x010D
    354e:	90 93 26 01 	sts	0x0126, r25
    3552:	80 93 25 01 	sts	0x0125, r24

    switch (USB_ControlRequest.bRequest)
    3556:	80 91 07 01 	lds	r24, 0x0107
    355a:	83 30       	cpi	r24, 0x03	; 3
    355c:	09 f4       	brne	.+2      	; 0x3560 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x3e>
    355e:	c8 c1       	rjmp	.+912    	; 0x38f0 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x3ce>
    3560:	84 30       	cpi	r24, 0x04	; 4
    3562:	30 f4       	brcc	.+12     	; 0x3570 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x4e>
    3564:	81 30       	cpi	r24, 0x01	; 1
    3566:	71 f0       	breq	.+28     	; 0x3584 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x62>
    3568:	82 30       	cpi	r24, 0x02	; 2
    356a:	09 f0       	breq	.+2      	; 0x356e <DFU_EVENT_USB_Device_UnhandledControlRequest+0x4c>
    356c:	fb c1       	rjmp	.+1014   	; 0x3964 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x442>
    356e:	1e c1       	rjmp	.+572    	; 0x37ac <DFU_EVENT_USB_Device_UnhandledControlRequest+0x28a>
    3570:	85 30       	cpi	r24, 0x05	; 5
    3572:	09 f4       	brne	.+2      	; 0x3576 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x54>
    3574:	db c1       	rjmp	.+950    	; 0x392c <DFU_EVENT_USB_Device_UnhandledControlRequest+0x40a>
    3576:	85 30       	cpi	r24, 0x05	; 5
    3578:	08 f4       	brcc	.+2      	; 0x357c <DFU_EVENT_USB_Device_UnhandledControlRequest+0x5a>
    357a:	d0 c1       	rjmp	.+928    	; 0x391c <DFU_EVENT_USB_Device_UnhandledControlRequest+0x3fa>
    357c:	86 30       	cpi	r24, 0x06	; 6
    357e:	09 f0       	breq	.+2      	; 0x3582 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x60>
    3580:	f1 c1       	rjmp	.+994    	; 0x3964 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x442>
    3582:	e7 c1       	rjmp	.+974    	; 0x3952 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x430>
    {
        case DFU_DNLOAD:
            Endpoint_ClearSETUP();
    3584:	80 91 e8 00 	lds	r24, 0x00E8
    3588:	87 7f       	andi	r24, 0xF7	; 247
    358a:	80 93 e8 00 	sts	0x00E8, r24

            /* Check if bootloader is waiting to terminate */
            if (WaitForExit)
    358e:	80 91 10 01 	lds	r24, 0x0110
    3592:	88 23       	and	r24, r24
    3594:	19 f0       	breq	.+6      	; 0x359c <DFU_EVENT_USB_Device_UnhandledControlRequest+0x7a>
            {
                /* Bootloader is terminating - process last received command */
                ProcessBootloaderCommand();
    3596:	f6 de       	rcall	.-532    	; 0x3384 <ProcessBootloaderCommand>

                /* Indicate that the last command has now been processed - free to exit bootloader */
                WaitForExit = false;
    3598:	10 92 10 01 	sts	0x0110, r1
            }

            /* If the request has a data stage, load it into the command struct */
            if (SentCommand.DataSize)
    359c:	20 91 25 01 	lds	r18, 0x0125
    35a0:	30 91 26 01 	lds	r19, 0x0126
    35a4:	21 15       	cp	r18, r1
    35a6:	31 05       	cpc	r19, r1
    35a8:	31 f4       	brne	.+12     	; 0x35b6 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x94>
    35aa:	2b c0       	rjmp	.+86     	; 0x3602 <DFU_EVENT_USB_Device_UnhandledControlRequest+0xe0>
            {
                while (!(Endpoint_IsOUTReceived()))
                {
                    if (USB_DeviceState == DEVICE_STATE_Unattached)
    35ac:	80 91 0e 01 	lds	r24, 0x010E
    35b0:	88 23       	and	r24, r24
    35b2:	09 f4       	brne	.+2      	; 0x35b6 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x94>
    35b4:	d7 c1       	rjmp	.+942    	; 0x3964 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x442>
            }

            /* If the request has a data stage, load it into the command struct */
            if (SentCommand.DataSize)
            {
                while (!(Endpoint_IsOUTReceived()))
    35b6:	80 91 e8 00 	lds	r24, 0x00E8
    35ba:	82 ff       	sbrs	r24, 2
    35bc:	f7 cf       	rjmp	.-18     	; 0x35ac <DFU_EVENT_USB_Device_UnhandledControlRequest+0x8a>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    35be:	80 91 f1 00 	lds	r24, 0x00F1
                    if (USB_DeviceState == DEVICE_STATE_Unattached)
                      return;
                }

                /* First byte of the data stage is the DNLOAD request's command */
                SentCommand.Command = Endpoint_Read_Byte();
    35c2:	80 93 1f 01 	sts	0x011F, r24

                /* One byte of the data stage is the command, so subtract it from the total data bytes */
                SentCommand.DataSize--;
    35c6:	21 50       	subi	r18, 0x01	; 1
    35c8:	30 40       	sbci	r19, 0x00	; 0
    35ca:	30 93 26 01 	sts	0x0126, r19
    35ce:	20 93 25 01 	sts	0x0125, r18
    35d2:	e0 e2       	ldi	r30, 0x20	; 32
    35d4:	f1 e0       	ldi	r31, 0x01	; 1
    35d6:	0c c0       	rjmp	.+24     	; 0x35f0 <DFU_EVENT_USB_Device_UnhandledControlRequest+0xce>
    35d8:	80 91 f1 00 	lds	r24, 0x00F1

                /* Load in the rest of the data stage as command parameters */
                for (uint8_t DataByte = 0; (DataByte < sizeof(SentCommand.Data)) &&
                     Endpoint_BytesInEndpoint(); DataByte++)
                {
                    SentCommand.Data[DataByte] = Endpoint_Read_Byte();
    35dc:	81 93       	st	Z+, r24
    35de:	21 50       	subi	r18, 0x01	; 1
    35e0:	30 40       	sbci	r19, 0x00	; 0

                /* One byte of the data stage is the command, so subtract it from the total data bytes */
                SentCommand.DataSize--;

                /* Load in the rest of the data stage as command parameters */
                for (uint8_t DataByte = 0; (DataByte < sizeof(SentCommand.Data)) &&
    35e2:	81 e0       	ldi	r24, 0x01	; 1
    35e4:	e5 32       	cpi	r30, 0x25	; 37
    35e6:	f8 07       	cpc	r31, r24
    35e8:	19 f4       	brne	.+6      	; 0x35f0 <DFU_EVENT_USB_Device_UnhandledControlRequest+0xce>
    35ea:	31 83       	std	Z+1, r19	; 0x01
    35ec:	20 83       	st	Z, r18
    35ee:	08 c0       	rjmp	.+16     	; 0x3600 <DFU_EVENT_USB_Device_UnhandledControlRequest+0xde>
    35f0:	80 91 f2 00 	lds	r24, 0x00F2
    35f4:	88 23       	and	r24, r24
    35f6:	81 f7       	brne	.-32     	; 0x35d8 <DFU_EVENT_USB_Device_UnhandledControlRequest+0xb6>
    35f8:	30 93 26 01 	sts	0x0126, r19
    35fc:	20 93 25 01 	sts	0x0125, r18
                    SentCommand.Data[DataByte] = Endpoint_Read_Byte();
                    SentCommand.DataSize--;
                }

                /* Process the command */
                ProcessBootloaderCommand();
    3600:	c1 de       	rcall	.-638    	; 0x3384 <ProcessBootloaderCommand>
            }

            /* Check if currently downloading firmware */
            if (DFU_State == dfuDNLOAD_IDLE)
    3602:	80 91 11 01 	lds	r24, 0x0111
    3606:	85 30       	cpi	r24, 0x05	; 5
    3608:	09 f0       	breq	.+2      	; 0x360c <DFU_EVENT_USB_Device_UnhandledControlRequest+0xea>
    360a:	cb c0       	rjmp	.+406    	; 0x37a2 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x280>
            {
                if (!(SentCommand.DataSize))
    360c:	80 91 25 01 	lds	r24, 0x0125
    3610:	90 91 26 01 	lds	r25, 0x0126
    3614:	89 2b       	or	r24, r25
    3616:	21 f4       	brne	.+8      	; 0x3620 <DFU_EVENT_USB_Device_UnhandledControlRequest+0xfe>
                {
                    DFU_State = dfuIDLE;
    3618:	82 e0       	ldi	r24, 0x02	; 2
    361a:	80 93 11 01 	sts	0x0111, r24
    361e:	c1 c0       	rjmp	.+386    	; 0x37a2 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x280>
                }
                else
                {
                    /* Throw away the filler bytes before the start of the firmware */
                    DiscardFillerBytes(DFU_FILLER_BYTES_SIZE);
    3620:	8a e1       	ldi	r24, 0x1A	; 26
    3622:	7f de       	rcall	.-770    	; 0x3322 <DiscardFillerBytes>

                    /* Throw away the page alignment filler bytes before the start of the firmware */
                    DiscardFillerBytes(StartAddr % SPM_PAGESIZE);
    3624:	80 91 15 01 	lds	r24, 0x0115
    3628:	8f 77       	andi	r24, 0x7F	; 127
    362a:	7b de       	rcall	.-778    	; 0x3322 <DiscardFillerBytes>

                    /* Calculate the number of bytes remaining to be written */
                    uint16_t BytesRemaining = ((EndAddr - StartAddr) + 1);
    362c:	c0 91 17 01 	lds	r28, 0x0117
    3630:	d0 91 18 01 	lds	r29, 0x0118
    3634:	20 91 15 01 	lds	r18, 0x0115
    3638:	30 91 16 01 	lds	r19, 0x0116
    363c:	21 96       	adiw	r28, 0x01	; 1
    363e:	8e 01       	movw	r16, r28
    3640:	02 1b       	sub	r16, r18
    3642:	13 0b       	sbc	r17, r19
    3644:	21 97       	sbiw	r28, 0x01	; 1

                    if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))        // Write flash
    3646:	80 91 20 01 	lds	r24, 0x0120
    364a:	88 23       	and	r24, r24
    364c:	09 f0       	breq	.+2      	; 0x3650 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x12e>
    364e:	a4 c0       	rjmp	.+328    	; 0x3798 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x276>
                    {
                        /* Calculate the number of words to be written from the number of bytes to be written */
                        uint16_t WordsRemaining = (BytesRemaining >> 1);
    3650:	18 01       	movw	r2, r16
    3652:	36 94       	lsr	r3
    3654:	27 94       	ror	r2
                        #ifndef NO64KB
                            Flash64KBPage
                        #else
                            0
                        #endif
                                                              }};
    3656:	80 e0       	ldi	r24, 0x00	; 0
    3658:	90 e0       	ldi	r25, 0x00	; 0
    365a:	a0 e0       	ldi	r26, 0x00	; 0
    365c:	b0 e0       	ldi	r27, 0x00	; 0
    365e:	c9 01       	movw	r24, r18

                        uint32_t CurrFlashPageStartAddress = CurrFlashAddress.Long;
    3660:	9c 01       	movw	r18, r24
    3662:	ad 01       	movw	r20, r26
    3664:	62 e0       	ldi	r22, 0x02	; 2
    3666:	e6 2e       	mov	r14, r22
    3668:	f1 2c       	mov	r15, r1
    366a:	01 2d       	mov	r16, r1
    366c:	11 2d       	mov	r17, r1
    366e:	e2 0e       	add	r14, r18
    3670:	f3 1e       	adc	r15, r19
    3672:	04 1f       	adc	r16, r20
    3674:	15 1f       	adc	r17, r21
    3676:	59 01       	movw	r10, r18
    3678:	6a 01       	movw	r12, r20
    367a:	a0 e0       	ldi	r26, 0x00	; 0
                                      return;
                                }
                            }

                            /* Write the next word into the current flash page */
                            boot_page_fill(CurrFlashAddress.Long, Endpoint_Read_Word_LE());
    367c:	88 24       	eor	r8, r8
    367e:	83 94       	inc	r8

                            /* See if an entire page has been written to the flash page buffer */
                            if ((WordsInFlashPage == (SPM_PAGESIZE >> 1)) || !(WordsRemaining))
                            {
                                /* Commit the flash page to memory */
                                boot_page_write(CurrFlashPageStartAddress);
    3680:	45 e0       	ldi	r20, 0x05	; 5
    3682:	94 2e       	mov	r9, r20
                                {
                                    CurrFlashPageStartAddress = CurrFlashAddress.Long;
                                    WordsInFlashPage          = 0;

                                    /* Erase next page's temp buffer */
                                    boot_page_erase(CurrFlashAddress.Long);
    3684:	b3 e0       	ldi	r27, 0x03	; 3
    3686:	4d c0       	rjmp	.+154    	; 0x3722 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x200>
                        uint8_t  WordsInFlashPage          = 0;

                        while (WordsRemaining--)
                        {
                            /* Check if endpoint is empty - if so clear it and wait until ready for next packet */
                            if (!(Endpoint_BytesInEndpoint()))
    3688:	80 91 f2 00 	lds	r24, 0x00F2
    368c:	88 23       	and	r24, r24
    368e:	99 f4       	brne	.+38     	; 0x36b6 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x194>
                            {
                                Endpoint_ClearOUT();
    3690:	80 91 e8 00 	lds	r24, 0x00E8
    3694:	98 2f       	mov	r25, r24
    3696:	9b 7f       	andi	r25, 0xFB	; 251
    3698:	90 93 e8 00 	sts	0x00E8, r25
    369c:	8f 77       	andi	r24, 0x7F	; 127
    369e:	80 93 e8 00 	sts	0x00E8, r24
    36a2:	05 c0       	rjmp	.+10     	; 0x36ae <DFU_EVENT_USB_Device_UnhandledControlRequest+0x18c>

                                while (!(Endpoint_IsOUTReceived()))
                                {
                                    if (USB_DeviceState == DEVICE_STATE_Unattached)
    36a4:	80 91 0e 01 	lds	r24, 0x010E
    36a8:	88 23       	and	r24, r24
    36aa:	09 f4       	brne	.+2      	; 0x36ae <DFU_EVENT_USB_Device_UnhandledControlRequest+0x18c>
    36ac:	5b c1       	rjmp	.+694    	; 0x3964 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x442>
                            /* Check if endpoint is empty - if so clear it and wait until ready for next packet */
                            if (!(Endpoint_BytesInEndpoint()))
                            {
                                Endpoint_ClearOUT();

                                while (!(Endpoint_IsOUTReceived()))
    36ae:	80 91 e8 00 	lds	r24, 0x00E8
    36b2:	82 ff       	sbrs	r24, 2
    36b4:	f7 cf       	rjmp	.-18     	; 0x36a4 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x182>
                                                              }};

                        uint32_t CurrFlashPageStartAddress = CurrFlashAddress.Long;
                        uint8_t  WordsInFlashPage          = 0;

                        while (WordsRemaining--)
    36b6:	08 94       	sec
    36b8:	21 08       	sbc	r2, r1
    36ba:	31 08       	sbc	r3, r1
				{
					uint16_t Word;
					uint8_t  Bytes[2];
				} Data;
				
				Data.Bytes[0] = UEDATX;
    36bc:	80 91 f1 00 	lds	r24, 0x00F1
    36c0:	68 2f       	mov	r22, r24
				Data.Bytes[1] = UEDATX;
    36c2:	80 91 f1 00 	lds	r24, 0x00F1
    36c6:	78 2f       	mov	r23, r24
                                      return;
                                }
                            }

                            /* Write the next word into the current flash page */
                            boot_page_fill(CurrFlashAddress.Long, Endpoint_Read_Word_LE());
    36c8:	f5 01       	movw	r30, r10
    36ca:	0b 01       	movw	r0, r22
    36cc:	80 92 57 00 	sts	0x0057, r8
    36d0:	e8 95       	spm
    36d2:	11 24       	eor	r1, r1

                            /* Adjust counters */
                            WordsInFlashPage      += 1;
    36d4:	af 5f       	subi	r26, 0xFF	; 255
                            CurrFlashAddress.Long += 2;

                            /* See if an entire page has been written to the flash page buffer */
                            if ((WordsInFlashPage == (SPM_PAGESIZE >> 1)) || !(WordsRemaining))
    36d6:	a0 34       	cpi	r26, 0x40	; 64
    36d8:	19 f0       	breq	.+6      	; 0x36e0 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x1be>
    36da:	21 14       	cp	r2, r1
    36dc:	31 04       	cpc	r3, r1
    36de:	a1 f4       	brne	.+40     	; 0x3708 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x1e6>
                            {
                                /* Commit the flash page to memory */
                                boot_page_write(CurrFlashPageStartAddress);
    36e0:	f9 01       	movw	r30, r18
    36e2:	90 92 57 00 	sts	0x0057, r9
    36e6:	e8 95       	spm
                                boot_spm_busy_wait();
    36e8:	07 b6       	in	r0, 0x37	; 55
    36ea:	00 fc       	sbrc	r0, 0
    36ec:	fd cf       	rjmp	.-6      	; 0x36e8 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x1c6>

                                /* Check if programming incomplete */
                                if (WordsRemaining)
    36ee:	21 14       	cp	r2, r1
    36f0:	31 04       	cpc	r3, r1
    36f2:	51 f0       	breq	.+20     	; 0x3708 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x1e6>
                                {
                                    CurrFlashPageStartAddress = CurrFlashAddress.Long;
                                    WordsInFlashPage          = 0;

                                    /* Erase next page's temp buffer */
                                    boot_page_erase(CurrFlashAddress.Long);
    36f4:	f7 01       	movw	r30, r14
    36f6:	b0 93 57 00 	sts	0x0057, r27
    36fa:	e8 95       	spm
                                    boot_spm_busy_wait();
    36fc:	07 b6       	in	r0, 0x37	; 55
    36fe:	00 fc       	sbrc	r0, 0
    3700:	fd cf       	rjmp	.-6      	; 0x36fc <DFU_EVENT_USB_Device_UnhandledControlRequest+0x1da>
    3702:	a8 01       	movw	r20, r16
    3704:	97 01       	movw	r18, r14
    3706:	a0 e0       	ldi	r26, 0x00	; 0
    3708:	92 e0       	ldi	r25, 0x02	; 2
    370a:	49 2e       	mov	r4, r25
    370c:	51 2c       	mov	r5, r1
    370e:	61 2c       	mov	r6, r1
    3710:	71 2c       	mov	r7, r1
    3712:	e4 0c       	add	r14, r4
    3714:	f5 1c       	adc	r15, r5
    3716:	06 1d       	adc	r16, r6
    3718:	17 1d       	adc	r17, r7
    371a:	a4 0c       	add	r10, r4
    371c:	b5 1c       	adc	r11, r5
    371e:	c6 1c       	adc	r12, r6
    3720:	d7 1c       	adc	r13, r7
                                                              }};

                        uint32_t CurrFlashPageStartAddress = CurrFlashAddress.Long;
                        uint8_t  WordsInFlashPage          = 0;

                        while (WordsRemaining--)
    3722:	21 14       	cp	r2, r1
    3724:	31 04       	cpc	r3, r1
    3726:	09 f0       	breq	.+2      	; 0x372a <DFU_EVENT_USB_Device_UnhandledControlRequest+0x208>
    3728:	af cf       	rjmp	.-162    	; 0x3688 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x166>
                                }
                            }
                        }

                        /* Once programming complete, start address equals the end address */
                        StartAddr = EndAddr;
    372a:	d0 93 16 01 	sts	0x0116, r29
    372e:	c0 93 15 01 	sts	0x0115, r28

                        /* Re-enable the RWW section of flash */
                        boot_rww_enable();
    3732:	81 e1       	ldi	r24, 0x11	; 17
    3734:	80 93 57 00 	sts	0x0057, r24
    3738:	e8 95       	spm
    373a:	31 c0       	rjmp	.+98     	; 0x379e <DFU_EVENT_USB_Device_UnhandledControlRequest+0x27c>
                    else                                                   // Write EEPROM
                    {
                        while (BytesRemaining--)
                        {
                            /* Check if endpoint is empty - if so clear it and wait until ready for next packet */
                            if (!(Endpoint_BytesInEndpoint()))
    373c:	80 91 f2 00 	lds	r24, 0x00F2
    3740:	88 23       	and	r24, r24
    3742:	99 f4       	brne	.+38     	; 0x376a <DFU_EVENT_USB_Device_UnhandledControlRequest+0x248>
                            {
                                Endpoint_ClearOUT();
    3744:	80 91 e8 00 	lds	r24, 0x00E8
    3748:	98 2f       	mov	r25, r24
    374a:	9b 7f       	andi	r25, 0xFB	; 251
    374c:	90 93 e8 00 	sts	0x00E8, r25
    3750:	8f 77       	andi	r24, 0x7F	; 127
    3752:	80 93 e8 00 	sts	0x00E8, r24
    3756:	05 c0       	rjmp	.+10     	; 0x3762 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x240>

                                while (!(Endpoint_IsOUTReceived()))
                                {
                                    if (USB_DeviceState == DEVICE_STATE_Unattached)
    3758:	80 91 0e 01 	lds	r24, 0x010E
    375c:	88 23       	and	r24, r24
    375e:	09 f4       	brne	.+2      	; 0x3762 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x240>
    3760:	01 c1       	rjmp	.+514    	; 0x3964 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x442>
                            /* Check if endpoint is empty - if so clear it and wait until ready for next packet */
                            if (!(Endpoint_BytesInEndpoint()))
                            {
                                Endpoint_ClearOUT();

                                while (!(Endpoint_IsOUTReceived()))
    3762:	80 91 e8 00 	lds	r24, 0x00E8
    3766:	82 ff       	sbrs	r24, 2
    3768:	f7 cf       	rjmp	.-18     	; 0x3758 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x236>
                                      return;
                                }
                            }

                            /* Read the byte from the USB interface and write to to the EEPROM */
							if (StartAddr < SAFE_EEPROM_ADDRESS)
    376a:	80 91 15 01 	lds	r24, 0x0115
    376e:	90 91 16 01 	lds	r25, 0x0116
    3772:	21 e0       	ldi	r18, 0x01	; 1
    3774:	8c 39       	cpi	r24, 0x9C	; 156
    3776:	92 07       	cpc	r25, r18
    3778:	20 f4       	brcc	.+8      	; 0x3782 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x260>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    377a:	60 91 f1 00 	lds	r22, 0x00F1
                            	eeprom_write_byte((uint8_t*)StartAddr, Endpoint_Read_Byte());
    377e:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__eewr_byte_m32u2>

                            /* Adjust counters */
                            StartAddr++;
    3782:	80 91 15 01 	lds	r24, 0x0115
    3786:	90 91 16 01 	lds	r25, 0x0116
    378a:	01 96       	adiw	r24, 0x01	; 1
    378c:	90 93 16 01 	sts	0x0116, r25
    3790:	80 93 15 01 	sts	0x0115, r24
    3794:	01 50       	subi	r16, 0x01	; 1
    3796:	10 40       	sbci	r17, 0x00	; 0
                        /* Re-enable the RWW section of flash */
                        boot_rww_enable();
                    }
                    else                                                   // Write EEPROM
                    {
                        while (BytesRemaining--)
    3798:	01 15       	cp	r16, r1
    379a:	11 05       	cpc	r17, r1
    379c:	79 f6       	brne	.-98     	; 0x373c <DFU_EVENT_USB_Device_UnhandledControlRequest+0x21a>
                            StartAddr++;
                        }
                    }

                    /* Throw away the currently unused DFU file suffix */
                    DiscardFillerBytes(DFU_FILE_SUFFIX_SIZE);
    379e:	80 e1       	ldi	r24, 0x10	; 16
    37a0:	c0 dd       	rcall	.-1152   	; 0x3322 <DiscardFillerBytes>
                }
            }

            Endpoint_ClearOUT();
    37a2:	80 91 e8 00 	lds	r24, 0x00E8
    37a6:	98 2f       	mov	r25, r24
    37a8:	9b 7f       	andi	r25, 0xFB	; 251
    37aa:	cd c0       	rjmp	.+410    	; 0x3946 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x424>
            Endpoint_ClearStatusStage();

            break;
#ifndef NO_DFUUPLOAD
        case DFU_UPLOAD:
            Endpoint_ClearSETUP();
    37ac:	80 91 e8 00 	lds	r24, 0x00E8
    37b0:	87 7f       	andi	r24, 0xF7	; 247
    37b2:	80 93 e8 00 	sts	0x00E8, r24
    37b6:	05 c0       	rjmp	.+10     	; 0x37c2 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x2a0>

            while (!(Endpoint_IsINReady()))
            {
                if (USB_DeviceState == DEVICE_STATE_Unattached)
    37b8:	80 91 0e 01 	lds	r24, 0x010E
    37bc:	88 23       	and	r24, r24
    37be:	09 f4       	brne	.+2      	; 0x37c2 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x2a0>
    37c0:	d1 c0       	rjmp	.+418    	; 0x3964 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x442>
            break;
#ifndef NO_DFUUPLOAD
        case DFU_UPLOAD:
            Endpoint_ClearSETUP();

            while (!(Endpoint_IsINReady()))
    37c2:	80 91 e8 00 	lds	r24, 0x00E8
    37c6:	80 ff       	sbrs	r24, 0
    37c8:	f7 cf       	rjmp	.-18     	; 0x37b8 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x296>
            {
                if (USB_DeviceState == DEVICE_STATE_Unattached)
                  return;
            }

            if (DFU_State != dfuUPLOAD_IDLE)
    37ca:	80 91 11 01 	lds	r24, 0x0111
    37ce:	89 30       	cpi	r24, 0x09	; 9
    37d0:	91 f0       	breq	.+36     	; 0x37f6 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x2d4>
            {
                if ((DFU_State == dfuERROR) && IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))       // Blank Check
    37d2:	8a 30       	cpi	r24, 0x0A	; 10
    37d4:	69 f4       	brne	.+26     	; 0x37f0 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x2ce>
    37d6:	80 91 20 01 	lds	r24, 0x0120
    37da:	81 30       	cpi	r24, 0x01	; 1
    37dc:	49 f4       	brne	.+18     	; 0x37f0 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x2ce>
                {
                    /* Blank checking is performed in the DFU_DNLOAD request - if we get here we've told the host
                       that the memory isn't blank, and the host is requesting the first non-blank address */
                    Endpoint_Write_Word_LE(StartAddr);
    37de:	80 91 15 01 	lds	r24, 0x0115
    37e2:	90 91 16 01 	lds	r25, 0x0116
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
    37e6:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Word >> 8);
    37ea:	90 93 f1 00 	sts	0x00F1, r25
    37ee:	a7 c0       	rjmp	.+334    	; 0x393e <DFU_EVENT_USB_Device_UnhandledControlRequest+0x41c>
                }
                else
                {
                    /* Idle state upload - send response to last issued command */
                    Endpoint_Write_Byte(ResponseByte);
    37f0:	80 91 27 01 	lds	r24, 0x0127
    37f4:	a2 c0       	rjmp	.+324    	; 0x393a <DFU_EVENT_USB_Device_UnhandledControlRequest+0x418>
                }
            }
            else
            {
                /* Determine the number of bytes remaining in the current block */
                uint16_t BytesRemaining = ((EndAddr - StartAddr) + 1);
    37f6:	60 91 17 01 	lds	r22, 0x0117
    37fa:	70 91 18 01 	lds	r23, 0x0118
    37fe:	20 91 15 01 	lds	r18, 0x0115
    3802:	30 91 16 01 	lds	r19, 0x0116
    3806:	6f 5f       	subi	r22, 0xFF	; 255
    3808:	7f 4f       	sbci	r23, 0xFF	; 255
    380a:	7b 01       	movw	r14, r22
    380c:	e2 1a       	sub	r14, r18
    380e:	f3 0a       	sbc	r15, r19
    3810:	61 50       	subi	r22, 0x01	; 1
    3812:	70 40       	sbci	r23, 0x00	; 0

                if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))            // Read FLASH
    3814:	80 91 20 01 	lds	r24, 0x0120
    3818:	88 23       	and	r24, r24
    381a:	b9 f5       	brne	.+110    	; 0x388a <DFU_EVENT_USB_Device_UnhandledControlRequest+0x368>
                {
                    /* Calculate the number of words to be written from the number of bytes to be written */
                    uint16_t WordsRemaining = (BytesRemaining >> 1);
    381c:	87 01       	movw	r16, r14
    381e:	16 95       	lsr	r17
    3820:	07 95       	ror	r16
                    #ifndef NO64KB
                      Flash64KBPage
                    #else
                      0
                    #endif
                                            }};
    3822:	80 e0       	ldi	r24, 0x00	; 0
    3824:	90 e0       	ldi	r25, 0x00	; 0
    3826:	a0 e0       	ldi	r26, 0x00	; 0
    3828:	b0 e0       	ldi	r27, 0x00	; 0
    382a:	c9 01       	movw	r24, r18
    382c:	9c 01       	movw	r18, r24
    382e:	ad 01       	movw	r20, r26
    3830:	24 c0       	rjmp	.+72     	; 0x387a <DFU_EVENT_USB_Device_UnhandledControlRequest+0x358>

                    while (WordsRemaining--)
                    {
                        /* Check if endpoint is full - if so clear it and wait until ready for next packet */
                        if (Endpoint_BytesInEndpoint() == DFU_CONTROL_ENDPOINT_SIZE)
    3832:	80 91 f2 00 	lds	r24, 0x00F2
    3836:	80 32       	cpi	r24, 0x20	; 32
    3838:	99 f4       	brne	.+38     	; 0x3860 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x33e>
                        {
                            Endpoint_ClearIN();
    383a:	80 91 e8 00 	lds	r24, 0x00E8
    383e:	98 2f       	mov	r25, r24
    3840:	9e 7f       	andi	r25, 0xFE	; 254
    3842:	90 93 e8 00 	sts	0x00E8, r25
    3846:	8f 77       	andi	r24, 0x7F	; 127
    3848:	80 93 e8 00 	sts	0x00E8, r24
    384c:	05 c0       	rjmp	.+10     	; 0x3858 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x336>

                            while (!(Endpoint_IsINReady()))
                            {
                                if (USB_DeviceState == DEVICE_STATE_Unattached)
    384e:	80 91 0e 01 	lds	r24, 0x010E
    3852:	88 23       	and	r24, r24
    3854:	09 f4       	brne	.+2      	; 0x3858 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x336>
    3856:	86 c0       	rjmp	.+268    	; 0x3964 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x442>
                        /* Check if endpoint is full - if so clear it and wait until ready for next packet */
                        if (Endpoint_BytesInEndpoint() == DFU_CONTROL_ENDPOINT_SIZE)
                        {
                            Endpoint_ClearIN();

                            while (!(Endpoint_IsINReady()))
    3858:	80 91 e8 00 	lds	r24, 0x00E8
    385c:	80 ff       	sbrs	r24, 0
    385e:	f7 cf       	rjmp	.-18     	; 0x384e <DFU_EVENT_USB_Device_UnhandledControlRequest+0x32c>

                        /* Read the flash word and send it via USB to the host */
                        #if (FLASHEND > 0xFFFF)
                            Endpoint_Write_Word_LE(pgm_read_word_far(CurrFlashAddress.Long));
                        #else
                            Endpoint_Write_Word_LE(pgm_read_word(CurrFlashAddress.Long));
    3860:	f9 01       	movw	r30, r18
    3862:	85 91       	lpm	r24, Z+
    3864:	94 91       	lpm	r25, Z+
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
    3866:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Word >> 8);
    386a:	90 93 f1 00 	sts	0x00F1, r25
    386e:	01 50       	subi	r16, 0x01	; 1
    3870:	10 40       	sbci	r17, 0x00	; 0
    3872:	2e 5f       	subi	r18, 0xFE	; 254
    3874:	3f 4f       	sbci	r19, 0xFF	; 255
    3876:	4f 4f       	sbci	r20, 0xFF	; 255
    3878:	5f 4f       	sbci	r21, 0xFF	; 255
                    #else
                      0
                    #endif
                                            }};

                    while (WordsRemaining--)
    387a:	01 15       	cp	r16, r1
    387c:	11 05       	cpc	r17, r1
    387e:	c9 f6       	brne	.-78     	; 0x3832 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x310>
                        /* Adjust counters */
                        CurrFlashAddress.Long += 2;
                    }

                    /* Once reading is complete, start address equals the end address */
                    StartAddr = EndAddr;
    3880:	70 93 16 01 	sts	0x0116, r23
    3884:	60 93 15 01 	sts	0x0115, r22
    3888:	2f c0       	rjmp	.+94     	; 0x38e8 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x3c6>
                }
                else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x02))       // Read EEPROM
    388a:	82 30       	cpi	r24, 0x02	; 2
    388c:	69 f5       	brne	.+90     	; 0x38e8 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x3c6>
    388e:	29 c0       	rjmp	.+82     	; 0x38e2 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x3c0>
                {
                    while (BytesRemaining--)
                    {
                        /* Check if endpoint is full - if so clear it and wait until ready for next packet */
                        if (Endpoint_BytesInEndpoint() == DFU_CONTROL_ENDPOINT_SIZE)
    3890:	80 91 f2 00 	lds	r24, 0x00F2
    3894:	80 32       	cpi	r24, 0x20	; 32
    3896:	99 f4       	brne	.+38     	; 0x38be <DFU_EVENT_USB_Device_UnhandledControlRequest+0x39c>
                        {
                            Endpoint_ClearIN();
    3898:	80 91 e8 00 	lds	r24, 0x00E8
    389c:	98 2f       	mov	r25, r24
    389e:	9e 7f       	andi	r25, 0xFE	; 254
    38a0:	90 93 e8 00 	sts	0x00E8, r25
    38a4:	8f 77       	andi	r24, 0x7F	; 127
    38a6:	80 93 e8 00 	sts	0x00E8, r24
    38aa:	05 c0       	rjmp	.+10     	; 0x38b6 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x394>

                            while (!(Endpoint_IsINReady()))
                            {
                                if (USB_DeviceState == DEVICE_STATE_Unattached)
    38ac:	80 91 0e 01 	lds	r24, 0x010E
    38b0:	88 23       	and	r24, r24
    38b2:	09 f4       	brne	.+2      	; 0x38b6 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x394>
    38b4:	57 c0       	rjmp	.+174    	; 0x3964 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x442>
                        /* Check if endpoint is full - if so clear it and wait until ready for next packet */
                        if (Endpoint_BytesInEndpoint() == DFU_CONTROL_ENDPOINT_SIZE)
                        {
                            Endpoint_ClearIN();

                            while (!(Endpoint_IsINReady()))
    38b6:	80 91 e8 00 	lds	r24, 0x00E8
    38ba:	80 ff       	sbrs	r24, 0
    38bc:	f7 cf       	rjmp	.-18     	; 0x38ac <DFU_EVENT_USB_Device_UnhandledControlRequest+0x38a>
                                  return;
                            }
                        }

                        /* Read the EEPROM byte and send it via USB to the host */
                        Endpoint_Write_Byte(eeprom_read_byte((uint8_t*)StartAddr));
    38be:	00 91 15 01 	lds	r16, 0x0115
    38c2:	10 91 16 01 	lds	r17, 0x0116
    38c6:	c8 01       	movw	r24, r16
    38c8:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__eerd_byte_m32u2>
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    38cc:	80 93 f1 00 	sts	0x00F1, r24

                        /* Adjust counters */
                        StartAddr++;
    38d0:	0f 5f       	subi	r16, 0xFF	; 255
    38d2:	1f 4f       	sbci	r17, 0xFF	; 255
    38d4:	10 93 16 01 	sts	0x0116, r17
    38d8:	00 93 15 01 	sts	0x0115, r16
    38dc:	08 94       	sec
    38de:	e1 08       	sbc	r14, r1
    38e0:	f1 08       	sbc	r15, r1
                    /* Once reading is complete, start address equals the end address */
                    StartAddr = EndAddr;
                }
                else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x02))       // Read EEPROM
                {
                    while (BytesRemaining--)
    38e2:	e1 14       	cp	r14, r1
    38e4:	f1 04       	cpc	r15, r1
    38e6:	a1 f6       	brne	.-88     	; 0x3890 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x36e>
                        StartAddr++;
                    }
                }

                /* Return to idle state */
                DFU_State = dfuIDLE;
    38e8:	82 e0       	ldi	r24, 0x02	; 2
    38ea:	80 93 11 01 	sts	0x0111, r24
    38ee:	27 c0       	rjmp	.+78     	; 0x393e <DFU_EVENT_USB_Device_UnhandledControlRequest+0x41c>
            Endpoint_ClearStatusStage();
            break;
#endif

        case DFU_GETSTATUS:
            Endpoint_ClearSETUP();
    38f0:	80 91 e8 00 	lds	r24, 0x00E8
    38f4:	87 7f       	andi	r24, 0xF7	; 247
    38f6:	80 93 e8 00 	sts	0x00E8, r24

            /* Write 8-bit status value */
            Endpoint_Write_Byte(DFU_Status);
    38fa:	80 91 12 01 	lds	r24, 0x0112
    38fe:	80 93 f1 00 	sts	0x00F1, r24
    3902:	10 92 f1 00 	sts	0x00F1, r1
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
    3906:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Word >> 8);
    390a:	10 92 f1 00 	sts	0x00F1, r1
            /* Write 24-bit poll timeout value */
            Endpoint_Write_Byte(0);
            Endpoint_Write_Word_LE(0);

            /* Write 8-bit state value */
            Endpoint_Write_Byte(DFU_State);
    390e:	80 91 11 01 	lds	r24, 0x0111
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    3912:	80 93 f1 00 	sts	0x00F1, r24
    3916:	10 92 f1 00 	sts	0x00F1, r1
    391a:	11 c0       	rjmp	.+34     	; 0x393e <DFU_EVENT_USB_Device_UnhandledControlRequest+0x41c>
            Endpoint_ClearIN();

            Endpoint_ClearStatusStage();
            break;
        case DFU_CLRSTATUS:
            Endpoint_ClearSETUP();
    391c:	80 91 e8 00 	lds	r24, 0x00E8
    3920:	87 7f       	andi	r24, 0xF7	; 247
    3922:	80 93 e8 00 	sts	0x00E8, r24

            /* Reset the status value variable to the default OK status */
            DFU_Status = OK;
    3926:	10 92 12 01 	sts	0x0112, r1
    392a:	1b c0       	rjmp	.+54     	; 0x3962 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x440>

            Endpoint_ClearStatusStage();
            break;
        case DFU_GETSTATE:
            Endpoint_ClearSETUP();
    392c:	80 91 e8 00 	lds	r24, 0x00E8
    3930:	87 7f       	andi	r24, 0xF7	; 247
    3932:	80 93 e8 00 	sts	0x00E8, r24

            /* Write the current device state to the endpoint */
            Endpoint_Write_Byte(DFU_State);
    3936:	80 91 11 01 	lds	r24, 0x0111
    393a:	80 93 f1 00 	sts	0x00F1, r24

            Endpoint_ClearIN();
    393e:	80 91 e8 00 	lds	r24, 0x00E8
    3942:	98 2f       	mov	r25, r24
    3944:	9e 7f       	andi	r25, 0xFE	; 254
    3946:	90 93 e8 00 	sts	0x00E8, r25
    394a:	8f 77       	andi	r24, 0x7F	; 127
    394c:	80 93 e8 00 	sts	0x00E8, r24
    3950:	08 c0       	rjmp	.+16     	; 0x3962 <DFU_EVENT_USB_Device_UnhandledControlRequest+0x440>

            Endpoint_ClearStatusStage();
            break;
        case DFU_ABORT:
            Endpoint_ClearSETUP();
    3952:	80 91 e8 00 	lds	r24, 0x00E8
    3956:	87 7f       	andi	r24, 0xF7	; 247
    3958:	80 93 e8 00 	sts	0x00E8, r24

            /* Reset the current state variable to the default idle state */
            DFU_State = dfuIDLE;
    395c:	82 e0       	ldi	r24, 0x02	; 2
    395e:	80 93 11 01 	sts	0x0111, r24

            Endpoint_ClearStatusStage();
    3962:	e7 db       	rcall	.-2098   	; 0x3132 <Endpoint_ClearStatusStage>
            break;
    }
}
    3964:	df 91       	pop	r29
    3966:	cf 91       	pop	r28
    3968:	1f 91       	pop	r17
    396a:	0f 91       	pop	r16
    396c:	ff 90       	pop	r15
    396e:	ef 90       	pop	r14
    3970:	df 90       	pop	r13
    3972:	cf 90       	pop	r12
    3974:	bf 90       	pop	r11
    3976:	af 90       	pop	r10
    3978:	9f 90       	pop	r9
    397a:	8f 90       	pop	r8
    397c:	7f 90       	pop	r7
    397e:	6f 90       	pop	r6
    3980:	5f 90       	pop	r5
    3982:	4f 90       	pop	r4
    3984:	3f 90       	pop	r3
    3986:	2f 90       	pop	r2
    3988:	08 95       	ret

0000398a <EVENT_USB_Device_UnhandledControlRequest>:
        CALL_TRAP(TR_USB_DEVICE_DISCONNECT);
}

DFU_SECTION void EVENT_USB_Device_UnhandledControlRequest(void)
{
    if (RunBootloader)
    398a:	80 91 01 01 	lds	r24, 0x0101
    398e:	88 23       	and	r24, r24
    3990:	09 f0       	breq	.+2      	; 0x3994 <EVENT_USB_Device_UnhandledControlRequest+0xa>
        DFU_EVENT_USB_Device_UnhandledControlRequest();
    3992:	c7 cd       	rjmp	.-1138   	; 0x3522 <DFU_EVENT_USB_Device_UnhandledControlRequest>
    else
        CALL_TRAP(TR_USB_DEVICE_UNHANDLEDCONTROLREQUEST);
    3994:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bootstraps_vec4>

00003998 <ResetHardwareDFU>:

/** Resets all configured hardware required for the bootloader back to their original states. */
DFU_SECTION void ResetHardwareDFU(void)
{
    /* Shut down the USB subsystem */
    USB_ShutDown();
    3998:	aa d1       	rcall	.+852    	; 0x3cee <USB_ShutDown>

    /* Relocate the interrupt vector table back to the application section */
    MCUCR = (1 << IVCE);
    399a:	81 e0       	ldi	r24, 0x01	; 1
    399c:	85 bf       	out	0x35, r24	; 53
    MCUCR = 0;
    399e:	15 be       	out	0x35, r1	; 53
}
    39a0:	08 95       	ret

000039a2 <SetupHardwareDFU>:

/** Configures all hardware required for the bootloader. */
DFU_SECTION void SetupHardwareDFU(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
    39a2:	84 b7       	in	r24, 0x34	; 52
    39a4:	87 7f       	andi	r24, 0xF7	; 247
    39a6:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
    39a8:	88 e1       	ldi	r24, 0x18	; 24
    39aa:	0f b6       	in	r0, 0x3f	; 63
    39ac:	f8 94       	cli
    39ae:	80 93 60 00 	sts	0x0060, r24
    39b2:	10 92 60 00 	sts	0x0060, r1
    39b6:	0f be       	out	0x3f, r0	; 63
    39b8:	90 e0       	ldi	r25, 0x00	; 0
    39ba:	80 e8       	ldi	r24, 0x80	; 128
    39bc:	0f b6       	in	r0, 0x3f	; 63
    39be:	f8 94       	cli
    39c0:	80 93 61 00 	sts	0x0061, r24
    39c4:	90 93 61 00 	sts	0x0061, r25
    39c8:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
	
	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
    39ca:	81 e0       	ldi	r24, 0x01	; 1
    39cc:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1 << IVSEL);
    39ce:	82 e0       	ldi	r24, 0x02	; 2
    39d0:	85 bf       	out	0x35, r24	; 53

#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE))
    USB_ControlEndpointSize = DFU_CONTROL_ENDPOINT_SIZE;
    39d2:	80 e2       	ldi	r24, 0x20	; 32
    39d4:	80 93 00 01 	sts	0x0100, r24
#endif

	/* Initialize the USB subsystem */
	USB_Init();
}
    39d8:	99 c1       	rjmp	.+818    	; 0x3d0c <USB_Init>

000039da <bootmain>:
 *  runs the bootloader processing routine until instructed to soft-exit, or hard-reset via the watchdog to start
 *  the loaded application code.
 */
DFU_SECTION void bootmain(void)
{
    SkipDfu();
    39da:	96 dc       	rcall	.-1748   	; 0x3308 <SkipDfu>

    /* Configure hardware required by the bootloader */
    SetupHardwareDFU();
    39dc:	e2 df       	rcall	.-60     	; 0x39a2 <SetupHardwareDFU>
    39de:	01 c0       	rjmp	.+2      	; 0x39e2 <bootmain+0x8>

    /* Run the USB management task while the bootloader is supposed to be running */
    while (RunBootloader || WaitForExit)
      USB_USBTask();
    39e0:	4a d2       	rcall	.+1172   	; 0x3e76 <USB_USBTask>

    /* Configure hardware required by the bootloader */
    SetupHardwareDFU();

    /* Run the USB management task while the bootloader is supposed to be running */
    while (RunBootloader || WaitForExit)
    39e2:	80 91 01 01 	lds	r24, 0x0101
    39e6:	88 23       	and	r24, r24
    39e8:	d9 f7       	brne	.-10     	; 0x39e0 <bootmain+0x6>
    39ea:	80 91 10 01 	lds	r24, 0x0110
    39ee:	88 23       	and	r24, r24
    39f0:	b9 f7       	brne	.-18     	; 0x39e0 <bootmain+0x6>
      USB_USBTask();

    /* Reset configured hardware back to their original states for the user application */
    ResetHardwareDFU();
    39f2:	d2 df       	rcall	.-92     	; 0x3998 <ResetHardwareDFU>

    /* Start the user application */
    AppStartPtr();
    39f4:	e0 91 13 01 	lds	r30, 0x0113
    39f8:	f0 91 14 01 	lds	r31, 0x0114
    39fc:	09 95       	icall

000039fe <USB_Device_ProcessControlRequest>:
uint8_t USB_ConfigurationNumber   LUFA_SHARED_DATA_SECTION;
bool    USB_RemoteWakeupEnabled   LUFA_SHARED_DATA_SECTION;
bool    USB_CurrentlySelfPowered  LUFA_SHARED_DATA_SECTION;

void USB_Device_ProcessControlRequest(void)
{
    39fe:	1f 93       	push	r17
    3a00:	df 93       	push	r29
    3a02:	cf 93       	push	r28
    3a04:	00 d0       	rcall	.+0      	; 0x3a06 <USB_Device_ProcessControlRequest+0x8>
    3a06:	cd b7       	in	r28, 0x3d	; 61
    3a08:	de b7       	in	r29, 0x3e	; 62
    3a0a:	e6 e0       	ldi	r30, 0x06	; 6
    3a0c:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    3a0e:	80 91 f1 00 	lds	r24, 0x00F1
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
	
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
    3a12:	81 93       	st	Z+, r24
void USB_Device_ProcessControlRequest(void)
{
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
	
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    3a14:	81 e0       	ldi	r24, 0x01	; 1
    3a16:	ee 30       	cpi	r30, 0x0E	; 14
    3a18:	f8 07       	cpc	r31, r24
    3a1a:	c9 f7       	brne	.-14     	; 0x3a0e <USB_Device_ProcessControlRequest+0x10>
	  *(RequestHeader++) = Endpoint_Read_Byte();
	  
	uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    3a1c:	80 91 06 01 	lds	r24, 0x0106
	
	switch (USB_ControlRequest.bRequest)
    3a20:	30 91 07 01 	lds	r19, 0x0107
    3a24:	35 30       	cpi	r19, 0x05	; 5
    3a26:	09 f4       	brne	.+2      	; 0x3a2a <USB_Device_ProcessControlRequest+0x2c>
    3a28:	85 c0       	rjmp	.+266    	; 0x3b34 <USB_Device_ProcessControlRequest+0x136>
    3a2a:	36 30       	cpi	r19, 0x06	; 6
    3a2c:	40 f4       	brcc	.+16     	; 0x3a3e <USB_Device_ProcessControlRequest+0x40>
    3a2e:	31 30       	cpi	r19, 0x01	; 1
    3a30:	c1 f1       	breq	.+112    	; 0x3aa2 <USB_Device_ProcessControlRequest+0xa4>
    3a32:	31 30       	cpi	r19, 0x01	; 1
    3a34:	70 f0       	brcs	.+28     	; 0x3a52 <USB_Device_ProcessControlRequest+0x54>
    3a36:	33 30       	cpi	r19, 0x03	; 3
    3a38:	09 f0       	breq	.+2      	; 0x3a3c <USB_Device_ProcessControlRequest+0x3e>
    3a3a:	ee c0       	rjmp	.+476    	; 0x3c18 <USB_Device_ProcessControlRequest+0x21a>
    3a3c:	32 c0       	rjmp	.+100    	; 0x3aa2 <USB_Device_ProcessControlRequest+0xa4>
    3a3e:	38 30       	cpi	r19, 0x08	; 8
    3a40:	09 f4       	brne	.+2      	; 0x3a44 <USB_Device_ProcessControlRequest+0x46>
    3a42:	bb c0       	rjmp	.+374    	; 0x3bba <USB_Device_ProcessControlRequest+0x1bc>
    3a44:	39 30       	cpi	r19, 0x09	; 9
    3a46:	09 f4       	brne	.+2      	; 0x3a4a <USB_Device_ProcessControlRequest+0x4c>
    3a48:	ce c0       	rjmp	.+412    	; 0x3be6 <USB_Device_ProcessControlRequest+0x1e8>
    3a4a:	36 30       	cpi	r19, 0x06	; 6
    3a4c:	09 f0       	breq	.+2      	; 0x3a50 <USB_Device_ProcessControlRequest+0x52>
    3a4e:	e4 c0       	rjmp	.+456    	; 0x3c18 <USB_Device_ProcessControlRequest+0x21a>
    3a50:	90 c0       	rjmp	.+288    	; 0x3b72 <USB_Device_ProcessControlRequest+0x174>
	{
		case REQ_GetStatus:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3a52:	80 38       	cpi	r24, 0x80	; 128
    3a54:	21 f0       	breq	.+8      	; 0x3a5e <USB_Device_ProcessControlRequest+0x60>
    3a56:	82 38       	cpi	r24, 0x82	; 130
    3a58:	09 f0       	breq	.+2      	; 0x3a5c <USB_Device_ProcessControlRequest+0x5e>
    3a5a:	de c0       	rjmp	.+444    	; 0x3c18 <USB_Device_ProcessControlRequest+0x21a>
    3a5c:	08 c0       	rjmp	.+16     	; 0x3a6e <USB_Device_ProcessControlRequest+0x70>
    3a5e:	90 91 04 01 	lds	r25, 0x0104
	{
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE):
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			
			if (USB_RemoteWakeupEnabled)
    3a62:	80 91 03 01 	lds	r24, 0x0103
    3a66:	88 23       	and	r24, r24
    3a68:	91 f0       	breq	.+36     	; 0x3a8e <USB_Device_ProcessControlRequest+0x90>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    3a6a:	92 60       	ori	r25, 0x02	; 2
    3a6c:	10 c0       	rjmp	.+32     	; 0x3a8e <USB_Device_ProcessControlRequest+0x90>
			
			break;
#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint(USB_ControlRequest.wIndex & 0xFF);
    3a6e:	80 91 0a 01 	lds	r24, 0x010A
    3a72:	80 93 e9 00 	sts	0x00E9, r24

			CurrentStatus = Endpoint_IsStalled();
    3a76:	80 91 eb 00 	lds	r24, 0x00EB
    3a7a:	90 e0       	ldi	r25, 0x00	; 0
    3a7c:	25 e0       	ldi	r18, 0x05	; 5
    3a7e:	96 95       	lsr	r25
    3a80:	87 95       	ror	r24
    3a82:	2a 95       	dec	r18
    3a84:	e1 f7       	brne	.-8      	; 0x3a7e <USB_Device_ProcessControlRequest+0x80>
    3a86:	98 2f       	mov	r25, r24
    3a88:	91 70       	andi	r25, 0x01	; 1

			Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);			  
    3a8a:	10 92 e9 00 	sts	0x00E9, r1
#endif
		default:
			return;
	}

	Endpoint_ClearSETUP();
    3a8e:	80 91 e8 00 	lds	r24, 0x00E8
    3a92:	87 7f       	andi	r24, 0xF7	; 247
    3a94:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
    3a98:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Word >> 8);
    3a9c:	10 92 f1 00 	sts	0x00F1, r1
    3aa0:	97 c0       	rjmp	.+302    	; 0x3bd0 <USB_Device_ProcessControlRequest+0x1d2>
			}

			break;
		case REQ_ClearFeature:
		case REQ_SetFeature:
			if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3aa2:	88 23       	and	r24, r24
    3aa4:	19 f0       	breq	.+6      	; 0x3aac <USB_Device_ProcessControlRequest+0xae>
    3aa6:	82 30       	cpi	r24, 0x02	; 2
    3aa8:	09 f0       	breq	.+2      	; 0x3aac <USB_Device_ProcessControlRequest+0xae>
    3aaa:	b6 c0       	rjmp	.+364    	; 0x3c18 <USB_Device_ProcessControlRequest+0x21a>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{	
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    3aac:	90 e0       	ldi	r25, 0x00	; 0
    3aae:	8f 71       	andi	r24, 0x1F	; 31
    3ab0:	90 70       	andi	r25, 0x00	; 0
    3ab2:	00 97       	sbiw	r24, 0x00	; 0
    3ab4:	19 f0       	breq	.+6      	; 0x3abc <USB_Device_ProcessControlRequest+0xbe>
    3ab6:	02 97       	sbiw	r24, 0x02	; 2
    3ab8:	b9 f5       	brne	.+110    	; 0x3b28 <USB_Device_ProcessControlRequest+0x12a>
    3aba:	0c c0       	rjmp	.+24     	; 0x3ad4 <USB_Device_ProcessControlRequest+0xd6>
	{
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_REMOTE_WAKEUP)
    3abc:	80 91 08 01 	lds	r24, 0x0108
    3ac0:	81 30       	cpi	r24, 0x01	; 1
    3ac2:	09 f0       	breq	.+2      	; 0x3ac6 <USB_Device_ProcessControlRequest+0xc8>
    3ac4:	aa c0       	rjmp	.+340    	; 0x3c1a <USB_Device_ProcessControlRequest+0x21c>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    3ac6:	10 92 03 01 	sts	0x0103, r1
    3aca:	33 30       	cpi	r19, 0x03	; 3
    3acc:	69 f5       	brne	.+90     	; 0x3b28 <USB_Device_ProcessControlRequest+0x12a>
    3ace:	80 93 03 01 	sts	0x0103, r24
    3ad2:	2a c0       	rjmp	.+84     	; 0x3b28 <USB_Device_ProcessControlRequest+0x12a>
			  return;
			
			break;			
#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_ENDPOINT_HALT)
    3ad4:	80 91 08 01 	lds	r24, 0x0108
    3ad8:	88 23       	and	r24, r24
    3ada:	31 f5       	brne	.+76     	; 0x3b28 <USB_Device_ProcessControlRequest+0x12a>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    3adc:	20 91 0a 01 	lds	r18, 0x010A
    3ae0:	27 70       	andi	r18, 0x07	; 7
				
				if (EndpointIndex == ENDPOINT_CONTROLEP)
    3ae2:	09 f4       	brne	.+2      	; 0x3ae6 <USB_Device_ProcessControlRequest+0xe8>
    3ae4:	9a c0       	rjmp	.+308    	; 0x3c1a <USB_Device_ProcessControlRequest+0x21c>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);
    3ae6:	20 93 e9 00 	sts	0x00E9, r18

				if (Endpoint_IsEnabled())
    3aea:	80 91 eb 00 	lds	r24, 0x00EB
    3aee:	80 ff       	sbrs	r24, 0
    3af0:	1b c0       	rjmp	.+54     	; 0x3b28 <USB_Device_ProcessControlRequest+0x12a>
				{				
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    3af2:	33 30       	cpi	r19, 0x03	; 3
    3af4:	21 f4       	brne	.+8      	; 0x3afe <USB_Device_ProcessControlRequest+0x100>
					{
						Endpoint_StallTransaction();
    3af6:	80 91 eb 00 	lds	r24, 0x00EB
    3afa:	80 62       	ori	r24, 0x20	; 32
    3afc:	13 c0       	rjmp	.+38     	; 0x3b24 <USB_Device_ProcessControlRequest+0x126>
					}
					else
					{
						Endpoint_ClearStall();
    3afe:	80 91 eb 00 	lds	r24, 0x00EB
    3b02:	80 61       	ori	r24, 0x10	; 16
    3b04:	80 93 eb 00 	sts	0x00EB, r24
						Endpoint_ResetFIFO(EndpointIndex);
    3b08:	81 e0       	ldi	r24, 0x01	; 1
    3b0a:	90 e0       	ldi	r25, 0x00	; 0
    3b0c:	02 c0       	rjmp	.+4      	; 0x3b12 <USB_Device_ProcessControlRequest+0x114>
    3b0e:	88 0f       	add	r24, r24
    3b10:	99 1f       	adc	r25, r25
    3b12:	2a 95       	dec	r18
    3b14:	e2 f7       	brpl	.-8      	; 0x3b0e <USB_Device_ProcessControlRequest+0x110>
    3b16:	80 93 ea 00 	sts	0x00EA, r24
    3b1a:	10 92 ea 00 	sts	0x00EA, r1
						Endpoint_ResetDataToggle();
    3b1e:	80 91 eb 00 	lds	r24, 0x00EB
    3b22:	88 60       	ori	r24, 0x08	; 8
    3b24:	80 93 eb 00 	sts	0x00EB, r24
			
			break;
#endif
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    3b28:	10 92 e9 00 	sts	0x00E9, r1

	Endpoint_ClearSETUP();
    3b2c:	80 91 e8 00 	lds	r24, 0x00E8
    3b30:	87 7f       	andi	r24, 0xF7	; 247
    3b32:	55 c0       	rjmp	.+170    	; 0x3bde <USB_Device_ProcessControlRequest+0x1e0>
				RequestHandled = true;
			}

			break;
		case REQ_SetAddress:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3b34:	88 23       	and	r24, r24
    3b36:	09 f0       	breq	.+2      	; 0x3b3a <USB_Device_ProcessControlRequest+0x13c>
    3b38:	6f c0       	rjmp	.+222    	; 0x3c18 <USB_Device_ProcessControlRequest+0x21a>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    3b3a:	10 91 08 01 	lds	r17, 0x0108

	Endpoint_ClearSETUP();
    3b3e:	80 91 e8 00 	lds	r24, 0x00E8
    3b42:	87 7f       	andi	r24, 0xF7	; 247
    3b44:	80 93 e8 00 	sts	0x00E8, r24
	
	Endpoint_ClearStatusStage();
    3b48:	f4 da       	rcall	.-2584   	; 0x3132 <Endpoint_ClearStatusStage>
    3b4a:	05 c0       	rjmp	.+10     	; 0x3b56 <USB_Device_ProcessControlRequest+0x158>
	
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
    3b4c:	80 91 0e 01 	lds	r24, 0x010E
    3b50:	88 23       	and	r24, r24
    3b52:	09 f4       	brne	.+2      	; 0x3b56 <USB_Device_ProcessControlRequest+0x158>
    3b54:	62 c0       	rjmp	.+196    	; 0x3c1a <USB_Device_ProcessControlRequest+0x21c>

	Endpoint_ClearSETUP();
	
	Endpoint_ClearStatusStage();
	
	while (!(Endpoint_IsINReady()))
    3b56:	80 91 e8 00 	lds	r24, 0x00E8
    3b5a:	80 ff       	sbrs	r24, 0
    3b5c:	f7 cf       	rjmp	.-18     	; 0x3b4c <USB_Device_ProcessControlRequest+0x14e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    3b5e:	91 2f       	mov	r25, r17
    3b60:	9f 77       	andi	r25, 0x7F	; 127
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return;
	}

	if (DeviceAddress)
    3b62:	19 f0       	breq	.+6      	; 0x3b6a <USB_Device_ProcessControlRequest+0x16c>
	  USB_DeviceState = DEVICE_STATE_Addressed;
    3b64:	83 e0       	ldi	r24, 0x03	; 3
    3b66:	80 93 0e 01 	sts	0x010E, r24

	UDADDR = ((1 << ADDEN) | DeviceAddress);
    3b6a:	90 68       	ori	r25, 0x80	; 128
    3b6c:	90 93 e3 00 	sts	0x00E3, r25
    3b70:	54 c0       	rjmp	.+168    	; 0x3c1a <USB_Device_ProcessControlRequest+0x21c>
				RequestHandled = true;
			}

			break;
		case REQ_GetDescriptor:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3b72:	80 58       	subi	r24, 0x80	; 128
    3b74:	82 30       	cpi	r24, 0x02	; 2
    3b76:	08 f0       	brcs	.+2      	; 0x3b7a <USB_Device_ProcessControlRequest+0x17c>
    3b78:	4f c0       	rjmp	.+158    	; 0x3c18 <USB_Device_ProcessControlRequest+0x21a>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif
	
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    3b7a:	80 91 08 01 	lds	r24, 0x0108
    3b7e:	90 91 09 01 	lds	r25, 0x0109
    3b82:	60 91 0a 01 	lds	r22, 0x010A
    3b86:	ae 01       	movw	r20, r28
    3b88:	4f 5f       	subi	r20, 0xFF	; 255
    3b8a:	5f 4f       	sbci	r21, 0xFF	; 255
    3b8c:	5e db       	rcall	.-2372   	; 0x324a <CALLBACK_USB_GetDescriptor>
    3b8e:	bc 01       	movw	r22, r24
    3b90:	00 97       	sbiw	r24, 0x00	; 0
    3b92:	09 f4       	brne	.+2      	; 0x3b96 <USB_Device_ProcessControlRequest+0x198>
    3b94:	42 c0       	rjmp	.+132    	; 0x3c1a <USB_Device_ProcessControlRequest+0x21c>
													 )) == NO_DESCRIPTOR)
	{
		return;
	}
	
	Endpoint_ClearSETUP();
    3b96:	80 91 e8 00 	lds	r24, 0x00E8
    3b9a:	87 7f       	andi	r24, 0xF7	; 247
    3b9c:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);	
    3ba0:	89 81       	ldd	r24, Y+1	; 0x01
    3ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ba4:	ef da       	rcall	.-2594   	; 0x3184 <Endpoint_Write_Control_PStream_LE>
	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);	
	#endif

	Endpoint_ClearOUT();
    3ba6:	80 91 e8 00 	lds	r24, 0x00E8
    3baa:	98 2f       	mov	r25, r24
    3bac:	9b 7f       	andi	r25, 0xFB	; 251
    3bae:	90 93 e8 00 	sts	0x00E8, r25
    3bb2:	8f 77       	andi	r24, 0x7F	; 127
    3bb4:	80 93 e8 00 	sts	0x00E8, r24
    3bb8:	30 c0       	rjmp	.+96     	; 0x3c1a <USB_Device_ProcessControlRequest+0x21c>
				RequestHandled = true;
			}
			
			break;
		case REQ_GetConfiguration:
			if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    3bba:	80 38       	cpi	r24, 0x80	; 128
    3bbc:	69 f5       	brne	.+90     	; 0x3c18 <USB_Device_ProcessControlRequest+0x21a>
	EVENT_USB_Device_ConfigurationChanged();
}

void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();
    3bbe:	80 91 e8 00 	lds	r24, 0x00E8
    3bc2:	87 7f       	andi	r24, 0xF7	; 247
    3bc4:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_Write_Byte(USB_ConfigurationNumber);
    3bc8:	80 91 02 01 	lds	r24, 0x0102
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    3bcc:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_ClearIN();
    3bd0:	80 91 e8 00 	lds	r24, 0x00E8
    3bd4:	98 2f       	mov	r25, r24
    3bd6:	9e 7f       	andi	r25, 0xFE	; 254
    3bd8:	90 93 e8 00 	sts	0x00E8, r25
    3bdc:	8f 77       	andi	r24, 0x7F	; 127
    3bde:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_ClearStatusStage();
    3be2:	a7 da       	rcall	.-2738   	; 0x3132 <Endpoint_ClearStatusStage>
    3be4:	1a c0       	rjmp	.+52     	; 0x3c1a <USB_Device_ProcessControlRequest+0x21c>
				RequestHandled = true;
			}

			break;
		case REQ_SetConfiguration:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3be6:	88 23       	and	r24, r24
    3be8:	b9 f4       	brne	.+46     	; 0x3c18 <USB_Device_ProcessControlRequest+0x21a>
}

static void USB_Device_SetConfiguration(void)
{
#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    3bea:	90 91 08 01 	lds	r25, 0x0108
    3bee:	92 30       	cpi	r25, 0x02	; 2
    3bf0:	a0 f4       	brcc	.+40     	; 0x3c1a <USB_Device_ProcessControlRequest+0x21c>
		  return;
	}
	#endif
#endif
	
	Endpoint_ClearSETUP();
    3bf2:	80 91 e8 00 	lds	r24, 0x00E8
    3bf6:	87 7f       	andi	r24, 0xF7	; 247
    3bf8:	80 93 e8 00 	sts	0x00E8, r24

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    3bfc:	90 93 02 01 	sts	0x0102, r25

	Endpoint_ClearStatusStage();
    3c00:	98 da       	rcall	.-2768   	; 0x3132 <Endpoint_ClearStatusStage>

	USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
    3c02:	80 91 02 01 	lds	r24, 0x0102
    3c06:	88 23       	and	r24, r24
    3c08:	11 f4       	brne	.+4      	; 0x3c0e <USB_Device_ProcessControlRequest+0x210>
    3c0a:	83 e0       	ldi	r24, 0x03	; 3
    3c0c:	01 c0       	rjmp	.+2      	; 0x3c10 <USB_Device_ProcessControlRequest+0x212>
    3c0e:	84 e0       	ldi	r24, 0x04	; 4
    3c10:	80 93 0e 01 	sts	0x010E, r24

	EVENT_USB_Device_ConfigurationChanged();
    3c14:	56 db       	rcall	.-2388   	; 0x32c2 <EVENT_USB_Device_ConfigurationChanged>
    3c16:	01 c0       	rjmp	.+2      	; 0x3c1a <USB_Device_ProcessControlRequest+0x21c>

			break;
	}

	if (!(RequestHandled))
	  EVENT_USB_Device_UnhandledControlRequest();
    3c18:	b8 de       	rcall	.-656    	; 0x398a <EVENT_USB_Device_UnhandledControlRequest>
	  
	if (Endpoint_IsSETUPReceived())
    3c1a:	80 91 e8 00 	lds	r24, 0x00E8
    3c1e:	83 ff       	sbrs	r24, 3
    3c20:	0a c0       	rjmp	.+20     	; 0x3c36 <USB_Device_ProcessControlRequest+0x238>
	{
		Endpoint_StallTransaction();
    3c22:	80 91 eb 00 	lds	r24, 0x00EB
    3c26:	80 62       	ori	r24, 0x20	; 32
    3c28:	80 93 eb 00 	sts	0x00EB, r24
		Endpoint_ClearSETUP();		
    3c2c:	80 91 e8 00 	lds	r24, 0x00E8
    3c30:	87 7f       	andi	r24, 0xF7	; 247
    3c32:	80 93 e8 00 	sts	0x00E8, r24
	}
}
    3c36:	0f 90       	pop	r0
    3c38:	0f 90       	pop	r0
    3c3a:	cf 91       	pop	r28
    3c3c:	df 91       	pop	r29
    3c3e:	1f 91       	pop	r17
    3c40:	08 95       	ret

00003c42 <USB_ResetInterface>:
	USB_CurrentMode = USB_MODE_NONE;
	#endif
}

void USB_ResetInterface(void)
{
    3c42:	df 93       	push	r29
    3c44:	cf 93       	push	r28
    3c46:	00 d0       	rcall	.+0      	; 0x3c48 <USB_ResetInterface+0x6>
    3c48:	cd b7       	in	r28, 0x3d	; 61
    3c4a:	de b7       	in	r29, 0x3e	; 62
	USB_INT_DisableAllInterrupts();
    3c4c:	65 d0       	rcall	.+202    	; 0x3d18 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    3c4e:	67 d0       	rcall	.+206    	; 0x3d1e <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_HOST)
	USB_HostState   = HOST_STATE_Unattached;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	USB_DeviceState = DEVICE_STATE_Unattached;
    3c50:	10 92 0e 01 	sts	0x010E, r1
	USB_ConfigurationNumber  = 0;
    3c54:	10 92 02 01 	sts	0x0102, r1
	USB_RemoteWakeupEnabled  = false;
    3c58:	10 92 03 01 	sts	0x0103, r1
	USB_CurrentlySelfPowered = false;
    3c5c:	10 92 04 01 	sts	0x0104, r1
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
    3c60:	19 bc       	out	0x29, r1	; 41
    3c62:	89 b5       	in	r24, 0x29	; 41
    3c64:	82 60       	ori	r24, 0x02	; 2
    3c66:	89 bd       	out	0x29, r24	; 41
		while (!(USB_PLL_IsReady()));
    3c68:	09 b4       	in	r0, 0x29	; 41
    3c6a:	00 fe       	sbrs	r0, 0
    3c6c:	fd cf       	rjmp	.-6      	; 0x3c68 <USB_ResetInterface+0x26>
	}
	
	USB_Controller_Reset();
    3c6e:	80 91 d8 00 	lds	r24, 0x00D8
    3c72:	98 2f       	mov	r25, r24
    3c74:	9f 77       	andi	r25, 0x7F	; 127
    3c76:	90 93 d8 00 	sts	0x00D8, r25
    3c7a:	80 68       	ori	r24, 0x80	; 128
    3c7c:	80 93 d8 00 	sts	0x00D8, r24
		USB_CurrentMode = USB_GetUSBModeFromUID();
	}
	#endif
		
	if (!(USB_Options & USB_OPT_REG_DISABLED))
	  USB_REG_On();
    3c80:	80 91 63 00 	lds	r24, 0x0063
    3c84:	8e 7f       	andi	r24, 0xFE	; 254
    3c86:	80 93 63 00 	sts	0x0063, r24
	else
	  USB_REG_Off();
	
	USB_CLK_Unfreeze();
    3c8a:	80 91 d8 00 	lds	r24, 0x00D8
    3c8e:	8f 7d       	andi	r24, 0xDF	; 223
    3c90:	80 93 d8 00 	sts	0x00D8, r24
	#if (defined(USB_CAN_BE_DEVICE) && !defined(FIXED_CONTROL_ENDPOINT_SIZE))
	if (USB_CurrentMode == USB_MODE_DEVICE)
	{
		USB_Descriptor_Device_t* DeviceDescriptorPtr;

		if (CALLBACK_USB_GetDescriptor((DTYPE_Device << 8), 0, (void*)&DeviceDescriptorPtr) != NO_DESCRIPTOR)
    3c94:	80 e0       	ldi	r24, 0x00	; 0
    3c96:	91 e0       	ldi	r25, 0x01	; 1
    3c98:	60 e0       	ldi	r22, 0x00	; 0
    3c9a:	ae 01       	movw	r20, r28
    3c9c:	4f 5f       	subi	r20, 0xFF	; 255
    3c9e:	5f 4f       	sbci	r21, 0xFF	; 255
    3ca0:	d4 da       	rcall	.-2648   	; 0x324a <CALLBACK_USB_GetDescriptor>
    3ca2:	89 2b       	or	r24, r25
    3ca4:	31 f0       	breq	.+12     	; 0x3cb2 <USB_ResetInterface+0x70>
			#if defined(USE_RAM_DESCRIPTORS)
			USB_ControlEndpointSize = DeviceDescriptorPtr->Endpoint0Size;
			#elif defined(USE_EEPROM_DESCRIPTORS)
			USB_ControlEndpointSize = eeprom_read_byte(&DeviceDescriptorPtr->Endpoint0Size);
			#else
			USB_ControlEndpointSize = pgm_read_byte(&DeviceDescriptorPtr->Endpoint0Size);
    3ca6:	e9 81       	ldd	r30, Y+1	; 0x01
    3ca8:	fa 81       	ldd	r31, Y+2	; 0x02
    3caa:	37 96       	adiw	r30, 0x07	; 7
    3cac:	e4 91       	lpm	r30, Z+
    3cae:	e0 93 00 01 	sts	0x0100, r30
			#endif
		}
	}
	#endif

	USB_Attach();
    3cb2:	80 91 e0 00 	lds	r24, 0x00E0
    3cb6:	8e 7f       	andi	r24, 0xFE	; 254
    3cb8:	80 93 e0 00 	sts	0x00E0, r24
	
	#if defined(USB_DEVICE_ONLY)
	USB_INT_Clear(USB_INT_SUSPEND);
    3cbc:	80 91 e1 00 	lds	r24, 0x00E1
    3cc0:	8e 7f       	andi	r24, 0xFE	; 254
    3cc2:	80 93 e1 00 	sts	0x00E1, r24
	USB_INT_Enable(USB_INT_SUSPEND);
    3cc6:	80 91 e2 00 	lds	r24, 0x00E2
    3cca:	81 60       	ori	r24, 0x01	; 1
    3ccc:	80 93 e2 00 	sts	0x00E2, r24
	USB_INT_Clear(USB_INT_EORSTI);
    3cd0:	80 91 e1 00 	lds	r24, 0x00E1
    3cd4:	87 7f       	andi	r24, 0xF7	; 247
    3cd6:	80 93 e1 00 	sts	0x00E1, r24
	USB_INT_Enable(USB_INT_EORSTI);
    3cda:	80 91 e2 00 	lds	r24, 0x00E2
    3cde:	88 60       	ori	r24, 0x08	; 8
    3ce0:	80 93 e2 00 	sts	0x00E2, r24
		
		USB_INT_Enable(USB_INT_SRPI);
		USB_INT_Enable(USB_INT_BCERRI);
	}
	#endif
}
    3ce4:	0f 90       	pop	r0
    3ce6:	0f 90       	pop	r0
    3ce8:	cf 91       	pop	r28
    3cea:	df 91       	pop	r29
    3cec:	08 95       	ret

00003cee <USB_ShutDown>:
	sei();
}

void USB_ShutDown(void)
{
	USB_ResetInterface();
    3cee:	a9 df       	rcall	.-174    	; 0x3c42 <USB_ResetInterface>
	USB_Detach();
    3cf0:	e0 ee       	ldi	r30, 0xE0	; 224
    3cf2:	f0 e0       	ldi	r31, 0x00	; 0
    3cf4:	80 81       	ld	r24, Z
    3cf6:	81 60       	ori	r24, 0x01	; 1
    3cf8:	80 83       	st	Z, r24
	USB_Controller_Disable();
    3cfa:	e8 ed       	ldi	r30, 0xD8	; 216
    3cfc:	f0 e0       	ldi	r31, 0x00	; 0
    3cfe:	80 81       	ld	r24, Z
    3d00:	8f 77       	andi	r24, 0x7F	; 127
    3d02:	80 83       	st	Z, r24
	
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	  USB_PLL_Off();
    3d04:	19 bc       	out	0x29, r1	; 41

	#if defined(USB_CAN_BE_BOTH)
	UHWCON &= ~(1 << UIDE);
	#endif

	USB_IsInitialized = false;
    3d06:	10 92 05 01 	sts	0x0105, r1

	#if defined(CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_NONE;
	#endif
}
    3d0a:	08 95       	ret

00003d0c <USB_Init>:
		EVENT_USB_InitFailure(USB_INITERROR_NoUSBModeSpecified);
		return;
	}
	#endif
	
	USB_ResetInterface();
    3d0c:	9a df       	rcall	.-204    	; 0x3c42 <USB_ResetInterface>

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USB_OTGPAD_On();
	#endif

	USB_IsInitialized = true;
    3d0e:	81 e0       	ldi	r24, 0x01	; 1
    3d10:	80 93 05 01 	sts	0x0105, r24

	sei();
    3d14:	78 94       	sei
}
    3d16:	08 95       	ret

00003d18 <USB_INT_DisableAllInterrupts>:
	UHIEN   = 0;
	OTGIEN  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    3d18:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    3d1c:	08 95       	ret

00003d1e <USB_INT_ClearAllInterrupts>:
	UHINT   = 0;
	OTGINT  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
    3d1e:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    3d22:	08 95       	ret

00003d24 <__vector_11>:

LUFA_DFU_DEVICE_SECTION ISR(USB_GEN_vect, ISR_BLOCK)
{
    3d24:	1f 92       	push	r1
    3d26:	0f 92       	push	r0
    3d28:	0f b6       	in	r0, 0x3f	; 63
    3d2a:	0f 92       	push	r0
    3d2c:	11 24       	eor	r1, r1
    3d2e:	2f 93       	push	r18
    3d30:	3f 93       	push	r19
    3d32:	4f 93       	push	r20
    3d34:	5f 93       	push	r21
    3d36:	6f 93       	push	r22
    3d38:	7f 93       	push	r23
    3d3a:	8f 93       	push	r24
    3d3c:	9f 93       	push	r25
    3d3e:	af 93       	push	r26
    3d40:	bf 93       	push	r27
    3d42:	ef 93       	push	r30
    3d44:	ff 93       	push	r31
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPEND) && USB_INT_IsEnabled(USB_INT_SUSPEND))
    3d46:	80 91 e1 00 	lds	r24, 0x00E1
    3d4a:	80 ff       	sbrs	r24, 0
    3d4c:	1c c0       	rjmp	.+56     	; 0x3d86 <__vector_11+0x62>
    3d4e:	80 91 e2 00 	lds	r24, 0x00E2
    3d52:	80 ff       	sbrs	r24, 0
    3d54:	18 c0       	rjmp	.+48     	; 0x3d86 <__vector_11+0x62>
	{
		USB_INT_Clear(USB_INT_SUSPEND);
    3d56:	80 91 e1 00 	lds	r24, 0x00E1
    3d5a:	8e 7f       	andi	r24, 0xFE	; 254
    3d5c:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_SUSPEND);
    3d60:	80 91 e2 00 	lds	r24, 0x00E2
    3d64:	8e 7f       	andi	r24, 0xFE	; 254
    3d66:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUP);
    3d6a:	80 91 e2 00 	lds	r24, 0x00E2
    3d6e:	80 61       	ori	r24, 0x10	; 16
    3d70:	80 93 e2 00 	sts	0x00E2, r24
		
		USB_CLK_Freeze();
    3d74:	80 91 d8 00 	lds	r24, 0x00D8
    3d78:	80 62       	ori	r24, 0x20	; 32
    3d7a:	80 93 d8 00 	sts	0x00D8, r24
		
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();
    3d7e:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    3d80:	10 92 0e 01 	sts	0x010E, r1
		EVENT_USB_Device_Disconnect();
    3d84:	97 da       	rcall	.-2770   	; 0x32b4 <EVENT_USB_Device_Disconnect>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUP) && USB_INT_IsEnabled(USB_INT_WAKEUP))
    3d86:	80 91 e1 00 	lds	r24, 0x00E1
    3d8a:	84 ff       	sbrs	r24, 4
    3d8c:	29 c0       	rjmp	.+82     	; 0x3de0 <__vector_11+0xbc>
    3d8e:	80 91 e2 00 	lds	r24, 0x00E2
    3d92:	84 ff       	sbrs	r24, 4
    3d94:	25 c0       	rjmp	.+74     	; 0x3de0 <__vector_11+0xbc>
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
    3d96:	19 bc       	out	0x29, r1	; 41
    3d98:	89 b5       	in	r24, 0x29	; 41
    3d9a:	82 60       	ori	r24, 0x02	; 2
    3d9c:	89 bd       	out	0x29, r24	; 41
			while (!(USB_PLL_IsReady()));
    3d9e:	09 b4       	in	r0, 0x29	; 41
    3da0:	00 fe       	sbrs	r0, 0
    3da2:	fd cf       	rjmp	.-6      	; 0x3d9e <__vector_11+0x7a>
		}

		USB_CLK_Unfreeze();
    3da4:	80 91 d8 00 	lds	r24, 0x00D8
    3da8:	8f 7d       	andi	r24, 0xDF	; 223
    3daa:	80 93 d8 00 	sts	0x00D8, r24

		USB_INT_Clear(USB_INT_WAKEUP);
    3dae:	80 91 e1 00 	lds	r24, 0x00E1
    3db2:	8f 7e       	andi	r24, 0xEF	; 239
    3db4:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_WAKEUP);
    3db8:	80 91 e2 00 	lds	r24, 0x00E2
    3dbc:	8f 7e       	andi	r24, 0xEF	; 239
    3dbe:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_SUSPEND);
    3dc2:	80 91 e2 00 	lds	r24, 0x00E2
    3dc6:	81 60       	ori	r24, 0x01	; 1
    3dc8:	80 93 e2 00 	sts	0x00E2, r24
		
		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    3dcc:	80 91 02 01 	lds	r24, 0x0102
    3dd0:	88 23       	and	r24, r24
    3dd2:	11 f4       	brne	.+4      	; 0x3dd8 <__vector_11+0xb4>
    3dd4:	81 e0       	ldi	r24, 0x01	; 1
    3dd6:	01 c0       	rjmp	.+2      	; 0x3dda <__vector_11+0xb6>
    3dd8:	84 e0       	ldi	r24, 0x04	; 4
    3dda:	80 93 0e 01 	sts	0x010E, r24
		EVENT_USB_Device_Connect();
    3dde:	63 da       	rcall	.-2874   	; 0x32a6 <EVENT_USB_Device_Connect>
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
		EVENT_USB_Device_WakeUp();		
		#endif
	}
   
	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    3de0:	80 91 e1 00 	lds	r24, 0x00E1
    3de4:	83 ff       	sbrs	r24, 3
    3de6:	28 c0       	rjmp	.+80     	; 0x3e38 <__vector_11+0x114>
    3de8:	80 91 e2 00 	lds	r24, 0x00E2
    3dec:	83 ff       	sbrs	r24, 3
    3dee:	24 c0       	rjmp	.+72     	; 0x3e38 <__vector_11+0x114>
	{
		USB_INT_Clear(USB_INT_EORSTI);
    3df0:	80 91 e1 00 	lds	r24, 0x00E1
    3df4:	87 7f       	andi	r24, 0xF7	; 247
    3df6:	80 93 e1 00 	sts	0x00E1, r24

		USB_DeviceState         = DEVICE_STATE_Default;
    3dfa:	82 e0       	ldi	r24, 0x02	; 2
    3dfc:	80 93 0e 01 	sts	0x010E, r24
		USB_ConfigurationNumber = 0;
    3e00:	10 92 02 01 	sts	0x0102, r1

		USB_INT_Clear(USB_INT_SUSPEND);
    3e04:	80 91 e1 00 	lds	r24, 0x00E1
    3e08:	8e 7f       	andi	r24, 0xFE	; 254
    3e0a:	80 93 e1 00 	sts	0x00E1, r24
		USB_INT_Disable(USB_INT_SUSPEND);
    3e0e:	80 91 e2 00 	lds	r24, 0x00E2
    3e12:	8e 7f       	andi	r24, 0xFE	; 254
    3e14:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUP);
    3e18:	80 91 e2 00 	lds	r24, 0x00E2
    3e1c:	80 61       	ori	r24, 0x10	; 16
    3e1e:	80 93 e2 00 	sts	0x00E2, r24

		Endpoint_ClearEndpoints();
    3e22:	70 d9       	rcall	.-3360   	; 0x3104 <Endpoint_ClearEndpoints>

		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
    3e24:	80 91 00 01 	lds	r24, 0x0100
    3e28:	90 e0       	ldi	r25, 0x00	; 0
    3e2a:	4b d9       	rcall	.-3434   	; 0x30c2 <Endpoint_BytesToEPSizeMaskDynamic>
    3e2c:	48 2f       	mov	r20, r24
    3e2e:	42 60       	ori	r20, 0x02	; 2
    3e30:	80 e0       	ldi	r24, 0x00	; 0
    3e32:	60 e0       	ldi	r22, 0x00	; 0
    3e34:	54 d9       	rcall	.-3416   	; 0x30de <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    3e36:	5a da       	rcall	.-2892   	; 0x32ec <EVENT_USB_Device_Reset>
	}
	
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    3e38:	80 91 e1 00 	lds	r24, 0x00E1
    3e3c:	82 ff       	sbrs	r24, 2
    3e3e:	0a c0       	rjmp	.+20     	; 0x3e54 <__vector_11+0x130>
    3e40:	80 91 e2 00 	lds	r24, 0x00E2
    3e44:	82 ff       	sbrs	r24, 2
    3e46:	06 c0       	rjmp	.+12     	; 0x3e54 <__vector_11+0x130>
	{
		USB_INT_Clear(USB_INT_SOFI);
    3e48:	80 91 e1 00 	lds	r24, 0x00E1
    3e4c:	8b 7f       	andi	r24, 0xFB	; 251
    3e4e:	80 93 e1 00 	sts	0x00E1, r24
		
		EVENT_USB_Device_StartOfFrame();
    3e52:	53 da       	rcall	.-2906   	; 0x32fa <EVENT_USB_Device_StartOfFrame>
		EVENT_USB_UIDChange();

		USB_ResetInterface();
	}
	#endif
}
    3e54:	ff 91       	pop	r31
    3e56:	ef 91       	pop	r30
    3e58:	bf 91       	pop	r27
    3e5a:	af 91       	pop	r26
    3e5c:	9f 91       	pop	r25
    3e5e:	8f 91       	pop	r24
    3e60:	7f 91       	pop	r23
    3e62:	6f 91       	pop	r22
    3e64:	5f 91       	pop	r21
    3e66:	4f 91       	pop	r20
    3e68:	3f 91       	pop	r19
    3e6a:	2f 91       	pop	r18
    3e6c:	0f 90       	pop	r0
    3e6e:	0f be       	out	0x3f, r0	; 63
    3e70:	0f 90       	pop	r0
    3e72:	1f 90       	pop	r1
    3e74:	18 95       	reti

00003e76 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState    LUFA_SHARED_DATA_SECTION;
#endif

void USB_USBTask(void)
{
    3e76:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    3e78:	80 91 0e 01 	lds	r24, 0x010E
    3e7c:	88 23       	and	r24, r24
    3e7e:	61 f0       	breq	.+24     	; 0x3e98 <USB_USBTask+0x22>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();
    3e80:	10 91 e9 00 	lds	r17, 0x00E9
	
		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    3e84:	10 92 e9 00 	sts	0x00E9, r1

		if (Endpoint_IsSETUPReceived())
    3e88:	80 91 e8 00 	lds	r24, 0x00E8
    3e8c:	83 ff       	sbrs	r24, 3
    3e8e:	01 c0       	rjmp	.+2      	; 0x3e92 <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
    3e90:	b6 dd       	rcall	.-1172   	; 0x39fe <USB_Device_ProcessControlRequest>
#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();
    3e92:	17 70       	andi	r17, 0x07	; 7
		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
		  USB_Device_ProcessControlRequest();
		
		Endpoint_SelectEndpoint(PrevEndpoint);
    3e94:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_DEVICE)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_HOST)
		  USB_HostTask();
	#endif
}
    3e98:	1f 91       	pop	r17
    3e9a:	08 95       	ret

00003e9c <__bootbad_interrupt>:
    .global __bootbad_interrupt
    .func   __bootbad_interrupt
__bootbad_interrupt:
    .weak   __bootvector_default
    .set    __bootvector_default, __bootvectors
    XJMP    __bootvector_default
    3e9c:	b1 c8       	rjmp	.-3742   	; 0x3000 <__bootvectors>

00003e9e <DeviceDescriptorDFU>:
    3e9e:	12 01 10 01 00 00 00 20 eb 03 f0 2f 00 00 00 01     ....... .../....
    3eae:	00 01                                               ..

00003eb0 <ConfigurationDescriptorDFU>:
    3eb0:	09 02 1b 00 01 01 00 c0 32 09 04 00 00 00 fe 01     ........2.......
    3ec0:	02 00 09 21 03 00 00 00 0c 00 01                    ...!.......

00003ecb <LanguageString>:
    3ecb:	04 03 09 04                                         ....

00003ecf <ProductStringDFU>:
    3ecf:	26 03 41 00 56 00 52 00 20 00 44 00 46 00 55 00     &.A.V.R. .D.F.U.
    3edf:	20 00 42 00 6f 00 6f 00 74 00 6c 00 6f 00 61 00      .B.o.o.t.l.o.a.
    3eef:	64 00 65 00 72 00 00 00 00                          d.e.r....
